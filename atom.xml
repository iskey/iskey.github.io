<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iskey's Blog]]></title>
  <link href="http://iskey.github.io/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2019-07-13T11:30:17+00:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sample of IPSec]]></title>
    <link href="http://iskey.github.io/blog/2019/07/13/sample-of-ipsec/"/>
    <updated>2019-07-13T10:25:17+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/13/sample-of-ipsec</id>
    <content type="html"><![CDATA[<p>前几天用eNSP模拟的实验了一下IPSec的用法,这里简单记录一下</p>

<p><img src="https://raw.githubusercontent.com/iskey/iskey.github.io/source/source/images/blogs/IPSec.png" alt="IPSec" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Example of Ansible]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible/"/>
    <updated>2019-07-07T15:34:11+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible</id>
    <content type="html"><![CDATA[<p>Ansible 是一个自动化运维工具，相似的工具还有SaltStack、Puppet、Chef、Fabric，其中Ansible、SaltStack、Fabri都是用Python实现的，现在使用Python的同学比较多，维护起来也比较顺手，而Puppet、Chef是用ruby写的，各有各的拥趸。</p>

<p>各个工具的对比:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">工具 </th>
<th style="text-align:center;">    语言 </th>
<th style="text-align:center;">  架构 </th>
<th style="text-align:center;">  协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Puppet </td>
<td style="text-align:center;">    Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Chef </td>
<td style="text-align:center;">  Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Ansible </td>
<td style="text-align:center;">   Python </td>
<td style="text-align:center;"> 无Client </td>
<td style="text-align:center;">    SSH</td>
</tr>
<tr>
<td style="text-align:center;">Saltstack </td>
<td style="text-align:center;"> Python </td>
<td style="text-align:center;">    C/S(可无Client) </td>
<td style="text-align:center;"> SSH/ZMQ/RAET</td>
</tr>
</tbody>
</table>


<hr />

<h3>一个简单的使用ansible的例子</h3>

<p>我们的例子里，在当前目录有三个文件：<code>ansible.cfg</code>,<code>first.yml</code>,<code>hosts</code></p>

<h4>ansible.cfg</h4>

<p>其中<code>ansible.cfg</code>文件是我们例子的ansible命令的配置文件，这里主要修改inventory字段，指定我们需要使用当前目录的hosts文件作为主机列表配置文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="p">[</span><span class="n">defaults</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># some basic default values...</span>
</span><span class='line'>
</span><span class='line'><span class="n">inventory</span>      <span class="o">=</span> <span class="p">.</span><span class="o">/</span><span class="n">hosts</span>
</span><span class='line'><span class="cp">#inventory      = /root/work/ansible/hosts</span>
</span><span class='line'><span class="cp">#library        = /usr/share/my_modules/</span>
</span><span class='line'><span class="cp">#remote_tmp     = $HOME/.ansible/tmp</span>
</span><span class='line'><span class="cp">#forks          = 5</span>
</span><span class='line'><span class="cp">#poll_interval  = 15</span>
</span><span class='line'><span class="cp">#sudo_user      = root</span>
</span><span class='line'><span class="cp">#ask_sudo_pass = True</span>
</span><span class='line'><span class="cp">#ask_pass      = True</span>
</span><span class='line'><span class="cp">#transport      = smart</span>
</span><span class='line'><span class="cp">#remote_port    = 22</span>
</span><span class='line'><span class="cp">#module_lang    = C</span>
</span></code></pre></td></tr></table></div></figure>


<p>ansible命令执行的时候，会按照如下顺序搜索配置文件:</p>

<ul>
<li>ANSIBLE_CONFIG (an environment variable)</li>
<li>ansible.cfg (in the current directory)</li>
<li>.ansible.cfg (in the home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<h4>hosts</h4>

<p>hosts文件指定了我们需要的管理的主机列表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># cat hosts</span>
</span><span class='line'><span class="p">[</span><span class="n">host_iskey</span><span class="p">]</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nl">host_iskey</span><span class="p">:</span><span class="n">vars</span><span class="p">]</span>
</span><span class='line'><span class="n">ansible_ssh_pass</span><span class="o">=</span><span class="err">&#39;</span><span class="n">xxxxxxxx</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">ansible_ssh_user</span><span class="o">=</span><span class="err">&#39;</span><span class="n">root</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>first.yml</h4>

<p>first.yml是我们的playbook，运行了一个很简单的命令，<code>touch /iskey</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># cat first.yml</span>
</span><span class='line'><span class="o">-</span> <span class="nl">hosts</span><span class="p">:</span> <span class="n">host_iskey</span>
</span><span class='line'>  <span class="nl">gather_facts</span><span class="p">:</span> <span class="n">smart</span>
</span><span class='line'>  <span class="nl">remote_user</span><span class="p">:</span> <span class="n">root</span>
</span><span class='line'>  <span class="nl">tasks</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="nl">name</span><span class="p">:</span> <span class="n">touch_iskey</span>
</span><span class='line'>      <span class="nl">command</span><span class="p">:</span> <span class="s">&quot;/usr/bin/touch /iskey &amp;&amp; sleep 3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>hosts:host_iskey</li>
</ul>


<p>说明要对hosts文件中的host_iskey组的主机列表进行操作</p>

<ul>
<li>gater_facts:smart</li>
</ul>


<p>ansible执行过程中，会收集远程主机的信息，如果每次都收集的话，非常浪费时间，可以设置facts缓存为smart，这样第一次收集之后，后边就不会再收集了，如果不需要收集可以直接设置为<code>no</code>来关掉主机信息收集</p>

<h4>鉴权方式</h4>

<h5>密码</h5>

<p>ansible可以使用密码方式进行鉴权，前提是需要安装<code>sshpass</code>工具，<code>apt install sshpass</code>, ssh命令本身不提供参数来支持密码登陆，一般都是通过<code>sshpass</code>工具来实现。</p>

<p>需要在hosts文件中，添加用户的密码，如下<code>host_iskey:vars</code>字段</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># cat hosts</span>
</span><span class='line'><span class="p">[</span><span class="n">host_iskey</span><span class="p">]</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nl">host_iskey</span><span class="p">:</span><span class="n">vars</span><span class="p">]</span>
</span><span class='line'><span class="n">ansible_ssh_pass</span><span class="o">=</span><span class="err">&#39;</span><span class="n">xxxxxxxx</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">ansible_ssh_user</span><span class="o">=</span><span class="err">&#39;</span><span class="n">root</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>秘钥</h5>

<p>如果使用秘钥的话，可以用ssh-keygen生成秘钥，在当前目录生成名为ansible的秘钥</p>

<pre><code>ssh-keygen -f ansible
</code></pre>

<p>把生成的公钥，追加到host主机的<code>.ssh/authorized_keys</code>文件中去，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># cat hosts</span>
</span><span class='line'><span class="p">[</span><span class="n">host_iskey</span><span class="p">]</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nl">host_iskey</span><span class="p">:</span><span class="n">vars</span><span class="p">]</span>
</span><span class='line'><span class="n">ansible_ssh_user</span><span class="o">=</span><span class="err">&#39;</span><span class="n">root</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">ansible_ssh_private_key_file</span><span class="o">=</span><span class="err">&#39;</span><span class="p">.</span><span class="o">/</span><span class="n">ansible</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行ansible-playbook，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># ansible-playbook  first.yml</span>
</span><span class='line'>
</span><span class='line'><span class="n">PLAY</span> <span class="p">[</span><span class="n">host_iskey</span><span class="p">]</span> <span class="o">****************************************************************************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="n">TASK</span> <span class="p">[</span><span class="n">touch_iskey</span><span class="p">]</span> <span class="o">***************************************************************************************************************************</span>
</span><span class='line'> <span class="p">[</span><span class="n">WARNING</span><span class="p">]</span><span class="o">:</span> <span class="n">Consider</span> <span class="n">using</span> <span class="n">the</span> <span class="n">file</span> <span class="n">module</span> <span class="n">with</span> <span class="n">state</span><span class="o">=</span><span class="n">touch</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">running</span> <span class="err">&#39;</span><span class="n">touch</span><span class="err">&#39;</span><span class="p">.</span>  <span class="n">If</span> <span class="n">you</span> <span class="n">need</span> <span class="n">to</span> <span class="n">use</span> <span class="n">command</span> <span class="n">because</span> <span class="n">file</span> <span class="n">is</span>
</span><span class='line'><span class="n">insufficient</span> <span class="n">you</span> <span class="n">can</span> <span class="n">add</span> <span class="err">&#39;</span><span class="nl">warn</span><span class="p">:</span> <span class="nb">false</span><span class="err">&#39;</span> <span class="n">to</span> <span class="n">this</span> <span class="n">command</span> <span class="n">task</span> <span class="n">or</span> <span class="n">set</span> <span class="err">&#39;</span><span class="n">command_warnings</span><span class="o">=</span><span class="n">False</span><span class="err">&#39;</span> <span class="n">in</span> <span class="n">ansible</span><span class="p">.</span><span class="n">cfg</span> <span class="n">to</span> <span class="n">get</span> <span class="n">rid</span> <span class="n">of</span> <span class="n">this</span> <span class="n">message</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nl">changed</span><span class="p">:</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span><span class="p">]</span>
</span><span class='line'><span class="nl">changed</span><span class="p">:</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">PLAY</span> <span class="n">RECAP</span> <span class="o">***********************************************************************************************************************************</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span>              <span class="o">:</span> <span class="n">ok</span><span class="o">=</span><span class="mi">1</span>    <span class="n">changed</span><span class="o">=</span><span class="mi">1</span>    <span class="n">unreachable</span><span class="o">=</span><span class="mi">0</span>    <span class="n">failed</span><span class="o">=</span><span class="mi">0</span>    <span class="n">skipped</span><span class="o">=</span><span class="mi">0</span>    <span class="n">rescued</span><span class="o">=</span><span class="mi">0</span>    <span class="n">ignored</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span>               <span class="o">:</span> <span class="n">ok</span><span class="o">=</span><span class="mi">1</span>    <span class="n">changed</span><span class="o">=</span><span class="mi">1</span>    <span class="n">unreachable</span><span class="o">=</span><span class="mi">0</span>    <span class="n">failed</span><span class="o">=</span><span class="mi">0</span>    <span class="n">skipped</span><span class="o">=</span><span class="mi">0</span>    <span class="n">rescued</span><span class="o">=</span><span class="mi">0</span>    <span class="n">ignored</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="o">****</span>
</span></code></pre></td></tr></table></div></figure>


<h4>当然，可以通过ansible命令来执行一些简单的命令</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">ansible</span> <span class="o">-</span><span class="n">i</span> <span class="p">.</span><span class="o">/</span><span class="n">hosts</span> <span class="n">all</span> <span class="o">-</span><span class="n">m</span> <span class="n">command</span>  <span class="o">-</span><span class="n">a</span> <span class="s">&quot;touch /xxxx&quot;</span>  <span class="o">--</span><span class="n">private</span><span class="o">-</span><span class="n">key</span><span class="o">=</span><span class="p">.</span><span class="o">/</span><span class="n">key</span><span class="o">/</span><span class="n">ansible</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果密钥的权限不是700，可能会提醒如下错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># ansible -i ./ansible/hosts all -m command  -a &quot;touch /isno&quot;  --private-key=./ansible/ansible</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.1</span> <span class="o">|</span> <span class="n">UNREACHABLE</span><span class="o">!</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;changed&quot;</span><span class="o">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;msg&quot;</span><span class="o">:</span> <span class="s">&quot;Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="se">\r\n</span><span class="s">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><span class="se">\r\n</span><span class="s">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="se">\r\n</span><span class="s">Permissions 0755 for &#39;./ansible&#39; are too open.</span><span class="se">\r\n</span><span class="s">It is required that your private key files are NOT accessible by others.</span><span class="se">\r\n</span><span class="s">This private key will be ignored.</span><span class="se">\r\n</span><span class="s">Load key </span><span class="se">\&quot;</span><span class="s">./ansible</span><span class="se">\&quot;</span><span class="s">: bad permissions</span><span class="se">\r\n</span><span class="s">Permission denied (publickey,password).&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;unreachable&quot;</span><span class="o">:</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">x</span><span class="mf">.2</span> <span class="o">|</span> <span class="n">UNREACHABLE</span><span class="o">!</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;changed&quot;</span><span class="o">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;msg&quot;</span><span class="o">:</span> <span class="s">&quot;Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="se">\r\n</span><span class="s">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><span class="se">\r\n</span><span class="s">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><span class="se">\r\n</span><span class="s">Permissions 0755 for &#39;./ansible&#39; are too open.</span><span class="se">\r\n</span><span class="s">It is required that your private key files are NOT accessible by others.</span><span class="se">\r\n</span><span class="s">This private key will be ignored.</span><span class="se">\r\n</span><span class="s">Load key </span><span class="se">\&quot;</span><span class="s">./ansible</span><span class="se">\&quot;</span><span class="s">: bad permissions</span><span class="se">\r\n</span><span class="s">Permission denied (publickey,password).&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;unreachable&quot;</span><span class="o">:</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，如果不想用密钥的方式，也可以把密码直接写在hosts文件里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simpe_example_of_kubernetes]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/simpe-example-of-kubernetes/"/>
    <updated>2019-07-07T15:32:37+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/simpe-example-of-kubernetes</id>
    <content type="html"><![CDATA[<p>在使用kubernetes之前，最好需要知道一些docker的基本指令，这样对整个过程的理解会更深刻一些，这是我第一次使用实际操作kubernetes，基本上是参照网上的教程操作的，这里加上一些自己的理解记录一下。
本实验基于minikube。</p>

<h4>docker命令基本用法</h4>

<p>首先用docker启动一个nginx服务器，命令如下:</p>

<pre><code>docker container run \
-d \
-p 127.0.0.2:8080:80 \
--rm \
--name mynginx \
nginx
</code></pre>

<p>各参数的含义如下：</p>

<pre><code>-d：在后台运行
-p ：容器的80端口映射到127.0.0.2:8080
--rm：容器停止运行后，自动删除容器文件
--name：容器的名字为mynginx
</code></pre>

<p>容器启动成功后，就可以通过curl <a href="http://127.0.0.2:8080%E6%9D%A5%E8%AE%BF%E9%97%AEnginx%E7%9A%84%E9%BB%98%E8%AE%A4%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82">http://127.0.0.2:8080%E6%9D%A5%E8%AE%BF%E9%97%AEnginx%E7%9A%84%E9%BB%98%E8%AE%A4%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82</a></p>

<p>这里有个疑问，那127.0.0.2的地址在哪里呢？ 秘密就在iptables的规则列表里</p>

<pre><code># iptables -S -t nat
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A DOCKER -d 127.0.0.2/32 ! -i docker0 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.17.0.7:80
</code></pre>

<p>目的地址是127网段的数据包被重定向到了DOCKER链表，DOCKER链表里把目的是127.0.0.2地址的报文发到了172.17.0.7:80端口，通过这两条规则，我们就能通过curl命令直接访问nginx服务器的80端口了。
第二条iptables规则有一个条件很有意思<code>! -i docker0</code>要求不是从docker0接口进来的包，docker0是个虚拟网桥设备，所有的容器都被挂在这个桥设备下，也就是说如果是容器之间互相访问的包，不应该被重定向到172.17.0.7这个地址上。</p>

<p>小提示：我们可以通过&ndash;volume命令把本地的文件目录映射到容器内</p>

<pre><code>docker container run \
-d \
-p 127.0.0.2:8080:80 \
--rm \
--name mynginx \
--volume "$PWD/html":/usr/share/nginx/html \
nginx
</code></pre>

<h4>使用kubernetes创建nginx服务器集群</h4>

<p>新建一个部署配置文件，内容如下：</p>

<ul>
<li>deployment.yaml文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">apps/v1beta1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx-deployment</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replicas</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span> <span class="c1"># tells deployment to run 2 pods matching the template</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="c1"># create pods using pod definition in this template</span>
</span><span class='line'>    <span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="c1"># unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is</span>
</span><span class='line'>      <span class="c1"># generated from the deployment name</span>
</span><span class='line'>      <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">iskey_nginx</span>
</span><span class='line'>    <span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">containers</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>        <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx:1.7.9</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">containerPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个配置文件的意思是要创建3个POD副本，每个副本是以nginx:1.7.9的镜像创建的容器，容器的服务端口是80</p>

<pre><code># kubectl create -f deployment.yaml
</code></pre>

<p>查看一下服务状态,可以看到三个副本已经都起来了。</p>

<pre><code># kubectl get pods -o wide -l app=nginx
NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE
nginx-deployment-75675f5897-27hs9   1/1     Running   0          1d    172.17.0.5   ecs-xxx
nginx-deployment-75675f5897-5trcf   1/1     Running   0          1d    172.17.0.6   ecs-xxx
nginx-deployment-79cb98c794-7whjg   1/1     Running   0          21h   172.17.0.4   ecs-xxx
</code></pre>

<h4>创建Service服务来访问nginx集群</h4>

<p>我看可以通过这三个IP地址来分别方位三个副本上的nginx服务，但是这里的地址是随机的，而且如果服务故障重启了，kubernetes会重新拉起一个POD，这时地址就又变化了，如何使用这几个副本的服务呢，kubernetes提供了一种类型为Service的对象，创建如下的service.yaml文件：</p>

<ul>
<li>service.yaml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-nginx</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8125</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">iskey_nginx</span>
</span></code></pre></td></tr></table></div></figure>


<p>该配置文件将创建一个名为‘my-nginx’的Service对象，他开放了端口8125，往该端口发送的请求将被路由到端口为80的，且标签具有"app=iskey_nginx"的Pod上。这个Service将被指派一个IP地址（通常称为'Cluester IP'），通常我们的说法是该请求会被路由到一个名称为‘my-nginx’的Endpoints对象上，由该Endpoints对象来负责负载均衡，并路由到实际的Pod的服务端口80上。</p>

<p>创建命令如下：</p>

<pre><code># kubectl create -f service.yaml
</code></pre>

<p>可以看到创建了一个Service对象</p>

<pre><code># kubectl get services -o wide
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE   SELECTOR
kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP    2d    &lt;none&gt;
my-nginx     ClusterIP   10.97.126.137   &lt;none&gt;        8125/TCP   18h   app=nginx
</code></pre>

<h4>Service和Endpoints对象</h4>

<p>在使用如上命令文件创建Service的同时，也创建了一个name与Service相同的Endpoints对象，Endpoints对象与Service通过名字关联</p>

<pre><code># kubectl get endpoints -o wide
NAME         ENDPOINTS                                   AGE
kubernetes   192.168.0.29:8443                           2d
my-nginx     172.17.0.4:80,172.17.0.5:80,172.17.0.6:80   18h
</code></pre>

<p>思考：如果Service和Endpoints可以通过名字进行管理，就可以灵活的自己分开创建Service和Endpoints，而不是通过Service的selector字段来自动关联Pods。比如我们外部有一个mysql集群，我们需要创建一个服务把他们发布出去，这时候就需要手动创建Service和Endpoints了。如下所示：</p>

<ul>
<li>mysql-service.yaml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql-production</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3306</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>mysql-endpoints.yaml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Endpoints</span>
</span><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql-production</span>
</span><span class='line'>  <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'><span class="l-Scalar-Plain">subsets</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">addresses</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ip</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">192.168.1.25</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3306</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Service服务iptables原理</h4>

<p>另外一个问题是，Service如何提供负载均衡的呢？答案还是在iptables的链表里</p>

<pre><code># iptables -S -t nat
-A KUBE-SVC-BEPXDJBUHFCSYIC3 -m comment --comment "default/my-nginx:" -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-DYSISBZG5TN7BHVN
-A KUBE-SVC-BEPXDJBUHFCSYIC3 -m comment --comment "default/my-nginx:" -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-BLX3X6UTIG6UGCA2
-A KUBE-SVC-BEPXDJBUHFCSYIC3 -m comment --comment "default/my-nginx:" -j KUBE-SEP-J5WBW7HEOGAHN6ZG
-A KUBE-SEP-BLX3X6UTIG6UGCA2 -s 172.17.0.5/32 -m comment --comment "default/my-nginx:" -j KUBE-MARK-MASQ
-A KUBE-SEP-BLX3X6UTIG6UGCA2 -p tcp -m comment --comment "default/my-nginx:" -m tcp -j DNAT --to-destination 172.17.0.5:80
-A KUBE-SEP-DYSISBZG5TN7BHVN -s 172.17.0.4/32 -m comment --comment "default/my-nginx:" -j KUBE-MARK-MASQ
-A KUBE-SEP-DYSISBZG5TN7BHVN -p tcp -m comment --comment "default/my-nginx:" -m tcp -j DNAT --to-destination 172.17.0.4:80
-A KUBE-SEP-J5WBW7HEOGAHN6ZG -s 172.17.0.6/32 -m comment --comment "default/my-nginx:" -j KUBE-MARK-MASQ
-A KUBE-SEP-J5WBW7HEOGAHN6ZG -p tcp -m comment --comment "default/my-nginx:" -m tcp -j DNAT --to-destination 172.17.0.6:80
</code></pre>

<p>通过iptables的statistic模块，&ndash;mode random &ndash;probability ，按照如下算法被路由到3个endpoints</p>

<pre><code>1th endpoint: 1/3
2th endpoint: 2/3 * 1/2 = 1/3
3th endpoint: 2/3 * 1/2 * 1 = 1/3
</code></pre>

<p>可见，每个endpoint都承担了3/1的访问请求。</p>

<p>但是有些情况下，可能希望来自于某一个客户端的请求都落在某一个特定的endpoint上，这时候就不能使用默认的负载均衡策略，这时候可以通过sessionAffinity属性来把来自同一个Client的请求亲和到同一个服务器，配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">apiVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">v1</span>
</span><span class='line'><span class="l-Scalar-Plain">kind</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">metadata</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my-nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">labels</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'><span class="l-Scalar-Plain">spec</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">8125</span>
</span><span class='line'>    <span class="l-Scalar-Plain">protocol</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TCP</span>
</span><span class='line'>    <span class="l-Scalar-Plain">targetPort</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">80</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">app</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessionAffinity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ClientIP</span>
</span></code></pre></td></tr></table></div></figure>


<p>当前仅支持ClientIP和None两个选项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">kubectl explain service.spec.sessionAffinity</span>
</span><span class='line'><span class="l-Scalar-Plain">KIND</span><span class="p-Indicator">:</span>     <span class="l-Scalar-Plain">Service</span>
</span><span class='line'><span class="l-Scalar-Plain">VERSION</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">v1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">FIELD</span><span class="p-Indicator">:</span>    <span class="l-Scalar-Plain">sessionAffinity &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">DESCRIPTION</span><span class="p-Indicator">:</span>
</span><span class='line'>     <span class="l-Scalar-Plain">Supports &quot;ClientIP&quot; and &quot;None&quot;. Used to maintain session affinity. Enable</span>
</span><span class='line'>     <span class="l-Scalar-Plain">client IP based session affinity. Must be ClientIP or None. Defaults to</span>
</span><span class='line'>     <span class="l-Scalar-Plain">None. More info</span><span class="p-Indicator">:</span>
</span><span class='line'>     <span class="l-Scalar-Plain">https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Service服务userspace原理</h5>

<p>此模式下，kube-proxy进程从服务(Kubernetes master)进程那边拿到Service和Endpoint对象的变化。对每一个Service, 它在本地打开一个port(随机选择)。任何连接这个本地port的请求都会转到backend后的随机一个pod，service中的字段SessionAffinity决定了使用backend的哪个pod。最后在本地建立一些iptables规则，这样访问service的cluster ip以及对应的port时，就能将请求映射到后端的pod中。</p>

<h5>Service服务iptables原理</h5>

<p>此模式下，kube-proxy进程从服务(Kubernetes master)进程那边拿到Service和Endpoint对象的变化。为每个Service创建一个iptables规则，把访问Service的Cluster IP和端口的流量重定向到后端Pod中的一个。为每个选择后端Pod的Endpoints对象都创建iptables规则。</p>

<p>TIP:userspace的方式和iptables方式不同点在于，userspace的模式是外部的服务会被重定向到kube-proxy，然后由kube-proxy重定向到后端的POD，而iptables的重定向请求是不需要kube-proxy参与的，完全由iptables规则链来处理。</p>

<h4>服务发现(Discovering services)</h4>

<p>Kubernetes支持两种方式来发现一个Service，环境变量和DNS。</p>

<ul>
<li>环境变量</li>
</ul>


<p>POD被创建时，当前环境所有的Service环境变量都会被注入到新建的POD中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/# env</span>
</span><span class='line'><span class="sr">HOSTNAME=nginx-new-7fb6bcff7f-dkvrc</span>
</span><span class='line'><span class="sr">KUBERNETES_PORT_443_TCP_PORT=443</span>
</span><span class='line'><span class="sr">KUBERNETES_PORT=tcp:/</span><span class="o">/</span><span class="mi">10</span><span class="o">.</span><span class="mi">96</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">443</span>
</span><span class='line'><span class="no">TERM</span><span class="o">=</span><span class="n">xterm</span>
</span><span class='line'><span class="no">MY_NGINX_SERVICE_PORT</span><span class="o">=</span><span class="mi">8125</span>
</span><span class='line'><span class="no">KUBERNETES_SERVICE_PORT</span><span class="o">=</span><span class="mi">443</span>
</span><span class='line'><span class="no">MY_NGINX_PORT_8125_TCP</span><span class="o">=</span><span class="ss">tcp</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">97</span><span class="o">.</span><span class="mi">126</span><span class="o">.</span><span class="mi">137</span><span class="p">:</span><span class="mi">8125</span>
</span><span class='line'><span class="no">KUBERNETES_SERVICE_HOST</span><span class="o">=</span><span class="mi">10</span><span class="o">.</span><span class="mi">96</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="no">PATH</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="ss">sbin</span><span class="p">:</span><span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="ss">bin</span><span class="p">:</span><span class="sr">/usr/s</span><span class="ss">bin</span><span class="p">:</span><span class="sr">/usr/</span><span class="ss">bin</span><span class="p">:</span><span class="sr">/sbin:/</span><span class="n">bin</span>
</span><span class='line'><span class="no">PWD</span><span class="o">=</span><span class="sr">/</span>
</span><span class='line'><span class="sr">NGINX_VERSION=1.7.9-1~wheezy</span>
</span><span class='line'><span class="sr">MY_NGINX_PORT=tcp:/</span><span class="o">/</span><span class="mi">10</span><span class="o">.</span><span class="mi">97</span><span class="o">.</span><span class="mi">126</span><span class="o">.</span><span class="mi">137</span><span class="p">:</span><span class="mi">8125</span>
</span><span class='line'><span class="no">MY_NGINX_PORT_8125_TCP_ADDR</span><span class="o">=</span><span class="mi">10</span><span class="o">.</span><span class="mi">97</span><span class="o">.</span><span class="mi">126</span><span class="o">.</span><span class="mi">137</span>
</span><span class='line'><span class="no">SHLVL</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="no">HOME</span><span class="o">=</span><span class="sr">/root</span>
</span><span class='line'><span class="sr">KUBERNETES_PORT_443_TCP_PROTO=tcp</span>
</span><span class='line'><span class="sr">KUBERNETES_SERVICE_PORT_HTTPS=443</span>
</span><span class='line'><span class="sr">MY_NGINX_PORT_8125_TCP_PORT=8125</span>
</span><span class='line'><span class="sr">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span>
</span><span class='line'><span class="sr">KUBERNETES_PORT_443_TCP=tcp:/</span><span class="o">/</span><span class="mi">10</span><span class="o">.</span><span class="mi">96</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">443</span>
</span><span class='line'><span class="no">MY_NGINX_SERVICE_HOST</span><span class="o">=</span><span class="mi">10</span><span class="o">.</span><span class="mi">97</span><span class="o">.</span><span class="mi">126</span><span class="o">.</span><span class="mi">137</span>
</span><span class='line'><span class="no">MY_NGINX_PORT_8125_TCP_PROTO</span><span class="o">=</span><span class="n">tcp</span>
</span><span class='line'><span class="n">_</span><span class="o">=</span><span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DNS</li>
</ul>


<p>DNS server通过kubernetes api server来观测是否有新service建立，并为其建立对应的dns记录。如果集群已经enable DNS，那么pod可以自动对service做name解析。
比如说我们在Kubernetes 名字空间”my-ns”中有个叫my-service的服务，DNS服务会创建一条”my-service.my-ns”的DNS记录。同在这个命名空间的Pod就可以通过”my-service”来得到这个Service分配到的Cluster IP，在其它命名空间的Pod则可以用全限定名”my-service.my-ns”来获得这个Service的地址</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helloworld_of_systemd]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/helloworld-of-systemd/"/>
    <updated>2019-07-07T15:31:20+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/helloworld-of-systemd</id>
    <content type="html"><![CDATA[<h2>init系统.</h2>

<p>linux操作系统首先从BIOS启动开始，接下来进入bootloader（桌面系统现在一般用Grub），bootloader载入内核并进行初始化。内核初始化的最好一步就是启动PID为1的init进程。init进程是以守护进程的方式存在，是所有其他进程的祖先。</p>

<p>init系统的演进路线经历了sysvinit->upstart->systemd。</p>

<h2>systemd系统简介</h2>

<p>借用一下帮助文档里的关系图(man bootup)</p>

<pre><code>       local-fs-pre.target
                |
                v
       (various mounts and   (various swap   (various cryptsetup
        fsck services...)     devices...)        devices...)       (various low-level   (various low-level
                |                  |                  |             services: udevd,     API VFS mounts:
                v                  v                  v             tmpfiles, random     mqueue, configfs,
         local-fs.target      swap.target     cryptsetup.target    seed, sysctl, ...)      debugfs, ...)
                |                  |                  |                    |                    |
                \__________________|_________________ | ___________________|____________________/
                                                     \|/
                                                      v
                                               sysinit.target
                                                      |
                 ____________________________________/|\________________________________________
                /                  |                  |                    |                    \
                |                  |                  |                    |                    |
                v                  v                  |                    v                    v
            (various           (various               |                (various          rescue.service
           timers...)          paths...)              |               sockets...)               |
                |                  |                  |                    |                    v
                v                  v                  |                    v              rescue.target
          timers.target      paths.target             |             sockets.target
                |                  |                  |                    |
                \__________________|_________________ | ___________________/
                                                     \|/
                                                      v
                                                basic.target
                                                      |
                 ____________________________________/|                                 emergency.service
                /                  |                  |                                         |
                |                  |                  |                                         v
                v                  v                  v                                 emergency.target
            display-        (various system    (various system
        manager.service         services           services)
                |             required for            |
                |            graphical UIs)           v
                |                  |           multi-user.target
                |                  |                  |
                \_________________ | _________________/
                                  \|/
                                   v
                         graphical.target
</code></pre>

<h2>systemd 使用</h2>

<ul>
<li>显示某个服务的实时日志</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">journalctl</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">pager</span> <span class="o">-</span><span class="n">f</span> <span class="o">-</span><span class="n">u</span> <span class="n">hello</span><span class="o">.</span><span class="na">service</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编写服务配置文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">cat</span> <span class="o">/</span><span class="n">root</span><span class="o">/</span><span class="n">hello</span>
</span><span class='line'><span class="n">NAME</span><span class="o">=</span><span class="n">xxxxyyyyzzz</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编写服务脚本</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">cat</span> <span class="o">/</span><span class="n">usr</span><span class="c1">//local/bin/hello.sh</span>
</span><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="n">name</span><span class="o">=</span><span class="n">$1</span>
</span><span class='line'><span class="k">while</span> <span class="kc">true</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="n">echo</span> <span class="n">Hello</span> <span class="n">World</span> <span class="n">$name</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;*&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">/</span><span class="n">root</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="na">log</span>
</span><span class='line'>    <span class="n">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="n">done</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编写服务的systemd配置文件
可以放到<code>/lib/systemd/system</code>目录，也可以放到<code>/etc/systemd/system</code>目录下，<code>/etc/systemd/system</code>的优先级更高</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">Unit</span><span class="o">]</span>
</span><span class='line'><span class="n">Description</span><span class="o">=</span><span class="n">Hello</span> <span class="n">world</span> <span class="n">Service</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="n">Service</span><span class="o">]</span>
</span><span class='line'><span class="n">EnvironmentFile</span><span class="o">=/</span><span class="n">root</span><span class="o">/</span><span class="n">hello</span>
</span><span class='line'><span class="n">ExecStartPre</span><span class="o">=-/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">touch</span> <span class="o">/</span><span class="n">root</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="na">start</span>
</span><span class='line'><span class="n">ExecStartPre</span><span class="o">=-/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">pkill</span> <span class="n">hello</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'><span class="n">ExecStart</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="na">sh</span> <span class="n">$</span><span class="o">{</span><span class="n">NAME</span><span class="o">}</span>
</span><span class='line'><span class="err">#</span><span class="n">Type</span><span class="o">=</span><span class="n">forking</span>
</span><span class='line'><span class="n">Restart</span><span class="o">=</span><span class="n">on</span><span class="o">-</span><span class="n">success</span>
</span><span class='line'><span class="n">RestartSec</span><span class="o">=</span><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置服务的cgroups参数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">systemctl</span> <span class="n">set</span><span class="o">-</span><span class="n">property</span> <span class="n">hello</span> <span class="n">CPUShares</span><span class="o">=</span><span class="mi">1600</span> <span class="n">MemoryLimit</span><span class="o">=</span><span class="mi">600</span><span class="n">M</span> <span class="o">--</span><span class="n">runtime</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>systemd-run examples</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">systemd</span><span class="o">-</span><span class="n">run</span> <span class="o">--</span><span class="n">user</span> <span class="o">--</span><span class="n">on</span><span class="o">-</span><span class="n">calendar</span> <span class="err">&#39;</span><span class="mi">2017</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">12</span> <span class="mi">14</span><span class="o">:</span><span class="mi">46</span><span class="err">&#39;</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span> <span class="o">-</span><span class="n">c</span> <span class="err">&#39;</span><span class="n">echo</span> <span class="n">done</span> <span class="o">&gt;/</span><span class="n">tmp</span><span class="o">/</span><span class="n">done</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>service/socket example</h2>

<ul>
<li>with golang <a href="https://github.com/coreos/go-systemd/tree/v14/examples/activation/httpserver">Httpserver</a></li>
<li>with python <a href="https://gist.github.com/drmalex07/333d8a88c4918954e8e4">Httpserver</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Lvm to Expend Root Partition]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/use-lvm-to-expend-root-partition/"/>
    <updated>2019-07-07T15:28:26+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/use-lvm-to-expend-root-partition</id>
    <content type="html"><![CDATA[<p>装完Linux系统后，如果当时规划的根分区太小了，有几种方法：
- 新挂一个盘，挂着到某个目录，比如<code>/usr1</code>,后续所有的大文件尽量放到/usr1
- 对跟分区进行扩容</p>

<p>新挂磁盘，比较简单，这里主要介绍一下如何对根分区进行扩容，对根分区进行扩容分两种情况：
- 根分区是非Linux LVM格式
- 根分区是Linux LVM格式</p>

<h2>扩容Linux LVM格式的分区</h2>

<p>查看当前分区，根分区挂的是<code>/dev/mapper/rhel-root</code>卷</p>

<pre><code>[root@bms-slave-0001 ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root  8G  6.5G  8G   80% /
</code></pre>

<p>查看当前磁盘:</p>

<pre><code>root@bms-slave-0001 ~]# fdisk -l

Disk /dev/sda: 599.0 GB, 598999040000 bytes, 1169920000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 262144 bytes / 262144 bytes
Disk label type: dos
Disk identifier: 0x000afd24

Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    20479999     9190400   8e  Linux LVM
/dev/sda3      1169788928  1169919999       65536   83  Linux
</code></pre>

<p>发现磁盘上还有很多空间，用fdisk，新建一个分区</p>

<pre><code>[root@bms-slave-0001 ~]# fdisk -l

Disk /dev/sda: 599.0 GB, 598999040000 bytes, 1169920000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 262144 bytes / 262144 bytes
Disk label type: dos
Disk identifier: 0x000afd24

Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    20479999     9190400   8e  Linux LVM
/dev/sda3      1169788928  1169919999       65536   83  Linux
/dev/sda4        20480000  1169788927   574654464    5  Extended
/dev/sda5        20482048  1169788927   574653440   8e  Linux LVM
</code></pre>

<p>新建分区保存退出之后，执行一下<code>partprobe</code>命令，这样不用重启系统就可以重新加载分区表了。</p>

<p>这里有个小知识，如果硬盘的分区模式是BIOS+MBR，受限于MBR的容量，只能有4个主分区
如果采用ELF+GPT模式，则不受此限制。</p>

<p>我的主机是BIOS+MBR模式，所以就新建一个扩展分区，然后在扩展分区里新建一个分区格式是Linux LVM的分区<code>/dev/sda5</code></p>

<p>现在基于<code>/dev/sda5</code>，创建一个物理卷</p>

<pre><code># pvcreate /dev/sda5
</code></pre>

<p>把<code>/dev/sda5</code>加入到根分区卷组，但是首先要查看根分区卷组</p>

<pre><code># vgdisplay
--- Volume group ---
VG Name               rhel
System ID
Format                lvm2
Metadata Areas        2
Metadata Sequence No  5
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                2
Open LV               1
Max PV                0
Cur PV                2
Act PV                2
VG Size               556.79 GiB
PE Size               4.00 MiB
Total PE              142539
Alloc PE / Size       130243 / 508.76 GiB
Free  PE / Size       12296 / 48.03 GiB
VG UUID               1KHMUX-rlrd-Pypj-ucQZ-zPwA-TZd2-5oeHzv

# vgextend rhel /dev/sda5
</code></pre>

<p>扩容卷组之后，对根分区逻辑卷进行扩容</p>

<pre><code># lvextend -L +500G /dev/mapper/rhel-root

[root@bms-slave-0001 ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root  508G  6.5G  502G   2% /
devtmpfs               126G     0  126G   0% /dev
tmpfs                  126G     0  126G   0% /dev/shm
tmpfs                  126G   19M  126G   1% /run
tmpfs                  126G     0  126G   0% /sys/fs/cgroup
</code></pre>

<p>卷扩容之后，需要用re-size对文件系统进行扩容</p>

<pre><code># resize2fs /dev/mapper/rhel-root
</code></pre>

<p>如果在centos/redhat上的话，可以用如下命令进行扩容</p>

<pre><code># xfs_growfs /dev/mapper/rhel-root
</code></pre>

<h2>扩容非Lininx LVM格式的分区</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Octopress on Windows]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/install-octopress-on-windows/"/>
    <updated>2019-07-07T00:45:05+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/install-octopress-on-windows</id>
    <content type="html"><![CDATA[<p>最近在windows上安装了octopress（在linux的步骤差不多），简单记录一下，防止以后自己忘了</p>

<h2>安装git</h2>

<p>因为我们需要用github来存放我们生成的pages</p>

<h2>安装ruby</h2>

<ul>
<li>下载安装包</li>
</ul>


<p>这里要注意一下octopress要求的ruby版本，我自己fork的octpress分支的readme.markdown里有如下字样</p>

<pre><code>Note: Octopress requires a minimum Ruby version of 1.9.3-p0
</code></pre>

<p>到ruby的官方网站下载最接近的ruby版本就可以了，<a href="https://rubyinstaller.org/downloads/">Ruby</a>,
我选用的是<a href="https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.6-x64.exe">Ruby 2.2.6(x64)</a>.</p>

<p>对应的Developmenet Kit是<a href="DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe</a>
(<code>注:Developmenet Kit是Ruby的开发工具集，安装octopress过程中，有些库需要编译</code>)</p>

<ul>
<li><p>安装Ruby（运行安装包，把Ruby安装到<code>D:/Ruby23-64</code>目录）</p></li>
<li><p>安装DevKit</p></li>
</ul>


<p>解压安装包到<code>D:/DevKit</code>，命令行进到<code>D:/DevKit</code>目录，执行</p>

<pre><code>ruby dk.rb init
</code></pre>

<p>执行完成后，打开<code>D:/DevKit</code>目录下的<code>config.yml</code>,查看里边有没有<code>- D:\Ruby23-64</code>字样，如果没有需要手动加上，继续执行命令</p>

<pre><code>ruby dk.rb install
</code></pre>

<p>另外记得把ruby的bin目录添加到系统环境变量</p>

<h3>安装Python</h3>

<p>安装Python2.7,不要用Python3</p>

<h3>安装octopress</h3>

<ul>
<li>下载octopress，我这里用自己的fork的repo，<a href="https://github.com/iskey/iskey.github.io">My octopres</a></li>
</ul>


<p>新建一个目录，<code>D:/octopress</code>,在该目录下用git</p>

<pre><code>git clone https://github.com/iskey/iskey.github.io
</code></pre>

<p>切换到<code>D:/octopress</code>，然后执行如下命令，切换一下gem的源（国内访问国外的源比较慢）</p>

<pre><code>gem sources -a https://ruby.taobao.org/
gem sources -r http://rubygems.org/
gem sources -l
</code></pre>

<p>然后，执行如下命令，安装gem库</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>安装Octopress主题</p>

<pre><code>rake install
</code></pre>

<h2>octopress使用</h2>

<ul>
<li><p>编写新文章</p>

<p>  rake new_post</p></li>
</ul>


<p>根据提示输入标题，或者直接使用如下命令</p>

<pre><code>rake new_post['welcome']
</code></pre>

<ul>
<li>发布、预览</li>
</ul>


<p>运行命令，设置github的pages地址</p>

<pre><code>rake setup_Github_pages 
</code></pre>

<p>发布文章到Github</p>

<pre><code>rake generate 
rake deploy
</code></pre>

<p>本地预览</p>

<pre><code>rake preview
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minikube Install]]></title>
    <link href="http://iskey.github.io/blog/2019/05/30/minikube-install/"/>
    <updated>2019-05-30T14:51:48+00:00</updated>
    <id>http://iskey.github.io/blog/2019/05/30/minikube-install</id>
    <content type="html"><![CDATA[<h2>单机minikube安装</h2>

<h3>安装kubectl</h3>

<p>要安装minikube需要先安装kubectl
下载后，把kubectl的执行文件拷贝到本地的PATH目录</p>

<hr />

<h3>安装minikube</h3>

<p>下载minikube,并拷贝到本地的PATH目录</p>

<pre><code>curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v0.25.2/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/
</code></pre>

<p>也可以自己构建(<code>需要本地已经安装配置好 Golang 开发环境和Docker引擎</code>):</p>

<pre><code>git clone https://github.com/AliyunContainerService/minikube
cd minikube
git checkout aliyun-v0.25.0
make
sudo cp out/minikube /usr/local/bin/
</code></pre>

<h3>启动minikube</h3>

<p>缺省Minikube使用VirtualBox驱动来创建Kubernetes本地环境</p>

<pre><code>minikube start --registry-mirror=https://registry.docker-cn.com
</code></pre>

<p>支持不同的Kubernetes版本</p>

<h3>安装Kubernetes v1.12.1</h3>

<pre><code>minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.12.1
</code></pre>

<h3>安装Kubernetes v1.11.3</h3>

<pre><code>minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.11.3
</code></pre>

<p>不使用virtualbox启动</p>

<pre><code># minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.12.1 --vm-driver=none
# kubectl get pods --all-namespaces 
NAMESPACE NAME READY STATUS RESTARTS AGE 
kube-system kube-addon-manager-minikube 1/1 Running 0 2h 
kube-system kube-dns-910330662-pkvj6 3/3 Running 0 2h
kube-system kubernetes-dashboard-mg5jt 1/1 Running 0 2h
</code></pre>

<h3>打开Kubernetes控制台</h3>

<pre><code>minikube dashboard
</code></pre>

<p><a href="https://yq.aliyun.com/articles/221687">引用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xubuntu Upgrade]]></title>
    <link href="http://iskey.github.io/blog/2019/05/28/xubuntu-upgrade/"/>
    <updated>2019-05-28T15:37:53+00:00</updated>
    <id>http://iskey.github.io/blog/2019/05/28/xubuntu-upgrade</id>
    <content type="html"><![CDATA[<hr />

<h2>升级ubuntu内核</h2>

<hr />

<p><code>apt-get upgrade</code>命令进行升级，如果内核有更新，会直接更新</p>

<h3>关于boot分区</h3>

<p>现在的ubuntu系统，一般都不建议再单独安装/boot分区来存放内核/initrd等文件了，可以直接放到根分区之下，如果要单独划分/boot分区的话,最好设置的大一点（以前翻看资料经典的推荐设置200M，现在推荐设置500M~1G）,避免后续升级的时候,出现空间不够用.</p>

<h3>清理旧的系统映像</h3>

<p>经过几次更新以后，boot分区一般会保留了好多不用的旧版本内核/初始文件系统，可以使用命令<code>sudo apt-get autoremove</code>来进行清理，
也可以制定版本号进行清理：<code>sudo apt-get remove linux-image-(版本号)</code></p>

<h3>升级内核之后，设备异常（一般是网卡/声卡）</h3>

<p>我在升级完成后，就遇到了网卡不识别的问题，这时候通过grub启动菜单，切换回之前的版本，查看一下网卡驱动</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~: lspci -k | grep Ethernet -A5
</span><span class='line'>05:00.0 Ethernet controller: Qualcomm Atheros AR8161 Gigabit Ethernet (rev 10)
</span><span class='line'>  Subsystem: Gigabyte Technology Co., Ltd AR8161 Gigabit Ethernet
</span><span class='line'>  Kernel driver in use: alx
</span><span class='line'>  Kernel modules: alx</span></code></pre></td></tr></table></div></figure>


<p>可以看到旧的内核用的驱动是<code>alx</code>,通过查询资料<code>Qualcomm Atheros AR8161 Gigabit Ethernet</code>,找到了<code>https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/</code>,打开后可以看到如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v3.8-rc5/                                          26-Jan-2013 17:47       -
</span><span class='line'>v3.8-rc7/                                          10-Feb-2013 23:35       -
</span><span class='line'>v3.8.2/                                            11-Mar-2013 23:44       -
</span><span class='line'>v3.8.3/                                            15-Mar-2013 21:55       -
</span><span class='line'>v3.9-rc1/                                          09-Mar-2013 07:20       -
</span><span class='line'>v3.9-rc2/                                          12-Mar-2013 00:45       -
</span><span class='line'>v3.9-rc3/                                          29-Mar-2013 02:43       -
</span><span class='line'>v3.9-rc4/                                          29-Mar-2013 06:04       -
</span><span class='line'>v4.0.1/                                            29-Apr-2015 20:14       -
</span><span class='line'>v4.1-rc1/                                          28-Apr-2015 21:26       -
</span><span class='line'>v4.1.1/                                            01-Jul-2015 21:14       -
</span><span class='line'>v4.14-rc2/                                         30-Sep-2017 16:02       -
</span><span class='line'>v4.19-rc5/                                         25-Sep-2018 20:14       -
</span><span class='line'>v4.19.23/                                          15-Feb-2019 19:41       -
</span><span class='line'>v4.19.32/                                          28-Mar-2019 14:42       -
</span><span class='line'>v4.19.7/                                           07-Dec-2018 19:25       -
</span><span class='line'>v4.2-rc1/                                          11-Jul-2015 23:32       -
</span><span class='line'>v4.2.6/                                            15-Nov-2015 21:22       -
</span><span class='line'>v4.20-rc5/                                         06-Dec-2018 22:27       -
</span><span class='line'>v4.20.10/                                          15-Feb-2019 22:03       -
</span><span class='line'>v4.20.17/                                          28-Mar-2019 12:58       -
</span><span class='line'>v4.3/                                              15-Nov-2015 18:31       -
</span><span class='line'>v4.4-rc2/                                          25-Nov-2015 22:24       -
</span><span class='line'>v4.4.2/                                            18-Feb-2016 21:44       -
</span><span class='line'>v5.0-rc6/                                          13-Feb-2019 20:46       -
</span><span class='line'>v5.0.5/                                            28-Mar-2019 01:06       -
</span><span class='line'>v5.1-rc2/                                          27-Mar-2019 23:17       -</span></code></pre></td></tr></table></div></figure>


<p>左边一列是内核版本号，找到与自己的内核版本对应的版本，查看内核版本号的方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ uname -r
</span><span class='line'>4.4.0-145-generic</span></code></pre></td></tr></table></div></figure>


<p>所以我下载了<code>v4.4-rc2</code>的版本（<code>backports-4.4-rc2-1.tar.gz</code>[<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4-rc2/backports-4.4-rc2-1.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4-rc2/backports-4.4-rc2-1.tar.gz</a>]），</p>

<p>下载并解压，编译并安装alx驱动，就可以了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| Your backport package isn't configured, please configure it
</span><span class='line'>| using one of the following options:
</span><span class='line'>| To configure manually:
</span><span class='line'>|     make oldconfig
</span><span class='line'>|     make menuconfig
</span><span class='line'>|
</span><span class='line'>| To get defaults for certain drivers:
</span><span class='line'>|     make defconfig-alx
</span><span class='line'>|     make defconfig-ar5523
</span><span class='line'>|     make defconfig-ath10k
</span><span class='line'>|     make defconfig-ath5k
</span><span class='line'>|     make defconfig-ath6kl
</span><span class='line'>|     make defconfig-ath9k
</span><span class='line'>|     make defconfig-ath9k-debug
</span><span class='line'>|     make defconfig-b43
</span><span class='line'>|     make defconfig-b43legacy
</span><span class='line'>|     make defconfig-brcmfmac
</span><span class='line'>|     make defconfig-brcmsmac
</span><span class='line'>|     make defconfig-carl9170
</span><span class='line'>|     make defconfig-cw1200
</span><span class='line'>|     make defconfig-hwsim
</span><span class='line'>|     make defconfig-ieee802154
</span><span class='line'>|     make defconfig-igb
</span><span class='line'>|     make defconfig-iwlwifi
</span><span class='line'>|     make defconfig-media
</span><span class='line'>|     make defconfig-nfc
</span><span class='line'>|     make defconfig-rtlwifi
</span><span class='line'>|     make defconfig-wcn36xx
</span><span class='line'>|     make defconfig-wifi
</span><span class='line'>|     make defconfig-wil6210
</span><span class='line'>|     make defconfig-wwan
</span><span class='line'>\--
</span><span class='line'>Makefile.real:45: recipe for target '.config' failed
</span><span class='line'>make[2]: *** [.config] Error 1
</span><span class='line'>Makefile:40: recipe for target 'modules' failed
</span><span class='line'>make[1]: *** [modules] Error 2
</span><span class='line'>Makefile:30: recipe for target 'default' failed
</span><span class='line'>make: *** [default] Error 2</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~: sudo make defconfig-alx
</span><span class='line'>~: sudo make install
</span><span class='line'>~: reboot</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，重启就可以找到网卡了</p>

<h3>　其它</h3>

<p>中间有个插曲，升级后Grub进不去了，不得已，用ubuntuＵ盘系统进去，使用boot-repaire重新修复了Grub,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-add-repository ppa:yannubuntu/boot-repair
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get install -y boot-repair
</span><span class='line'>
</span><span class='line'>boot-repair</span></code></pre></td></tr></table></div></figure>


<p>但是Grub菜单里的Windows系统没有了，所有又安装了grub-customizer进行调整：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Open terminal either via Ctrl+Alt+T or by searching for ‘terminal’ from app launcher. When it opens, run command to add the PPA:
</span><span class='line'>
</span><span class='line'>sudo add-apt-repository ppa:danielrichter2007/grub-customizer
</span><span class='line'>
</span><span class='line'>Input your password (no visual feedback while typing) when it prompts and hit Enter to continue.
</span><span class='line'>
</span><span class='line'>grub-customizer-ppa
</span><span class='line'>
</span><span class='line'>2. After added the PPA, run commands one by one to refresh package cache and install Grub Customizer:
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get install grub-customizer
</span><span class='line'>
</span><span class='line'>Once installed, launch the software from your application launcher and enjoy!
</span><span class='line'>Uninstall:
</span><span class='line'>
</span><span class='line'>To remove the software, run command in terminal:
</span><span class='line'>
</span><span class='line'>sudo apt-get remove --autoremove grub-customizer</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset-env-for-running-process]]></title>
    <link href="http://iskey.github.io/blog/2019/05/27/reset-env-for-running-process/"/>
    <updated>2019-05-27T16:07:38+00:00</updated>
    <id>http://iskey.github.io/blog/2019/05/27/reset-env-for-running-process</id>
    <content type="html"><![CDATA[<h3>LD_PRELOAD注入</h3>

<p>linux环境变量LD_PRELOAD可以指定程序运行时优先加载的动态链接库，在该环境变量路径下的动态链接库中的符号具有最高优先级。
通过自己编写malloc/free动态链接库，并在LD_PRELOAD环境变量中指定该路径，就可以替换libc.so中的malloc/free函数。</p>

<p>注：该方法对静态链接的程序无效。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) attach process_id
</span><span class='line'>(gdb) call putenv ("LD_PRELOAD=/mylib.so")
</span><span class='line'>(gdb) detach</span></code></pre></td></tr></table></div></figure>


<h3>使用libc库的装饰器</h3>

<h3>使用宏/函数替换malloc/free</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables时间规则匹配]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/iptables-with-time/"/>
    <updated>2018-04-27T11:25:48+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/iptables-with-time</id>
    <content type="html"><![CDATA[<p>1、每天固定时间段匹配</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">timestart</span> <span class="mi">09</span><span class="o">:</span><span class="mi">40</span> <span class="o">--</span><span class="n">timestop</span> <span class="mi">09</span><span class="o">:</span><span class="mi">59</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、按周固定时间段匹配</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">timestart</span> <span class="mi">09</span><span class="o">:</span><span class="mi">40</span> <span class="o">--</span><span class="n">timestop</span> <span class="mi">09</span><span class="o">:</span><span class="mi">59</span> <span class="o">--</span><span class="n">weekdays</span> <span class="n">Wed</span><span class="o">,</span><span class="n">Thu</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、按固定日期匹配，注这里比较特殊，可以看见下面的时间是17点不是9点，是因为时区的原因，要差8小时。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">datestart</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">19</span><span class="nl">T17:</span><span class="mi">40</span><span class="o">:</span><span class="mi">08</span> <span class="o">--</span><span class="n">datestop</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">19</span><span class="nl">T17:</span><span class="mi">59</span><span class="o">:</span><span class="mi">50</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>附上帮助说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">time</span> <span class="n">match</span> <span class="nl">options:</span>
</span><span class='line'>    <span class="o">--</span><span class="n">datestart</span> <span class="n">time</span>     <span class="n">Start</span> <span class="n">and</span> <span class="n">stop</span> <span class="n">time</span><span class="o">,</span> <span class="n">to</span> <span class="n">be</span> <span class="n">given</span> <span class="n">in</span> <span class="n">ISO</span> <span class="mi">8601</span>
</span><span class='line'>    <span class="o">--</span><span class="n">datestop</span> <span class="nf">time</span>      <span class="o">(</span><span class="n">YYYY</span><span class="o">[-</span><span class="n">MM</span><span class="o">[-</span><span class="n">DD</span><span class="o">[</span><span class="n">Thh</span><span class="o">[:</span><span class="n">mm</span><span class="o">[:</span><span class="n">ss</span><span class="o">]]]]])</span>
</span><span class='line'>    <span class="o">--</span><span class="n">timestart</span> <span class="n">time</span>     <span class="n">Start</span> <span class="n">and</span> <span class="n">stop</span> <span class="nf">daytime</span> <span class="o">(</span><span class="nl">hh:</span><span class="n">mm</span><span class="o">[:</span><span class="n">ss</span><span class="o">])</span>
</span><span class='line'>    <span class="o">--</span><span class="n">timestop</span> <span class="nf">time</span>      <span class="o">(</span><span class="n">between</span> <span class="mi">00</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">and</span> <span class="mi">23</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">59</span><span class="o">)</span>
</span><span class='line'><span class="o">[!]</span> <span class="o">--</span><span class="n">monthdays</span> <span class="n">value</span>    <span class="n">List</span> <span class="n">of</span> <span class="n">days</span> <span class="n">on</span> <span class="n">which</span> <span class="n">to</span> <span class="n">match</span><span class="o">,</span> <span class="n">separated</span> <span class="n">by</span> <span class="nf">comma</span>
</span><span class='line'>                         <span class="o">(</span><span class="n">Possible</span> <span class="nl">days:</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">31</span><span class="o">;</span> <span class="n">defaults</span> <span class="n">to</span> <span class="n">all</span><span class="o">)</span>
</span><span class='line'><span class="o">[!]</span> <span class="o">--</span><span class="n">weekdays</span> <span class="n">value</span>     <span class="n">List</span> <span class="n">of</span> <span class="n">weekdays</span> <span class="n">on</span> <span class="n">which</span> <span class="n">to</span> <span class="n">match</span><span class="o">,</span> <span class="n">sep</span><span class="o">.</span> <span class="n">by</span> <span class="nf">comma</span>
</span><span class='line'>                         <span class="o">(</span><span class="n">Possible</span> <span class="nl">days:</span> <span class="n">Mon</span><span class="o">,</span><span class="n">Tue</span><span class="o">,</span><span class="n">Wed</span><span class="o">,</span><span class="n">Thu</span><span class="o">,</span><span class="n">Fri</span><span class="o">,</span><span class="n">Sat</span><span class="o">,</span><span class="n">Sun</span> <span class="n">or</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">7</span>
</span><span class='line'>                         <span class="n">Defaults</span> <span class="n">to</span> <span class="n">all</span> <span class="n">weekdays</span><span class="o">.)</span>
</span><span class='line'>    <span class="o">--</span><span class="n">localtz</span><span class="o">/--</span><span class="n">utc</span>      <span class="n">Time</span> <span class="n">is</span> <span class="n">interpreted</span> <span class="n">as</span> <span class="n">UTC</span><span class="o">/</span><span class="n">local</span> <span class="n">time</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重定向外部连接到本地环回地址]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost/"/>
    <updated>2018-04-27T09:12:37+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost</id>
    <content type="html"><![CDATA[<p>背景：在本地<code>localhost</code>搭建了一个Httpserver，监听在<code>4000</code>端口，现在想通过<code>eth0</code>在不改动代码的情况下对外发布服务。</p>

<p>最先想到的就是端口映射，<code>rinetd</code>服务，使用也很简单，直接配置外部ip到环回地址的映射就可以了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">root</span><span class="nd">@lfgphicpra39095</span><span class="o">:/</span><span class="n">usr1</span><span class="o">/</span><span class="err">#</span> <span class="n">cat</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">rinetd</span><span class="o">.</span><span class="na">conf</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">forwarding</span> <span class="n">rules</span> <span class="n">come</span> <span class="n">here</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">you</span> <span class="n">may</span> <span class="n">specify</span> <span class="n">allow</span> <span class="n">and</span> <span class="n">deny</span> <span class="n">rules</span> <span class="n">after</span> <span class="n">a</span> <span class="n">specific</span> <span class="n">forwarding</span> <span class="n">rule</span>
</span><span class='line'><span class="err">#</span> <span class="n">to</span> <span class="n">apply</span> <span class="n">to</span> <span class="n">only</span> <span class="n">that</span> <span class="n">forwarding</span> <span class="n">rule</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">bindadress</span>    <span class="n">bindport</span>  <span class="n">connectaddress</span>  <span class="n">connectport</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span><span class="mf">10.252</span><span class="o">.</span><span class="mf">64.154</span>  <span class="mi">4000</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="mi">4000</span><span class="o">**</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样一来，一旦eth0的地址发生了改变，就需要再修改配置文件。</p>

<p>另一种方法就是通过iptables就行重定向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">t</span> <span class="n">nat</span> <span class="o">-</span><span class="n">A</span> <span class="n">PREROUTING</span> <span class="o">-</span><span class="n">i</span> <span class="n">eth0</span> <span class="o">-</span><span class="n">p</span> <span class="n">tcp</span> <span class="o">--</span><span class="n">dport</span> <span class="mi">4000</span> <span class="o">-</span><span class="n">j</span> <span class="n">DNAT</span> <span class="o">--</span><span class="n">to</span><span class="o">-</span><span class="n">destination</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置后，外部访问不通，通过抓包分析，协议栈没有回复<code>syc+ack</code>报文，看来是路由的问题。</p>

<p>内核协议栈会丢弃路由 对于源地址或目的地址为<code>loopback</code>地址的，内核协议栈的认为这是一个<code>martian packet</code>，直接丢弃。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">route_localnet</span> <span class="err">–</span> <span class="nl">BOOLEAN:</span> <span class="n">Do</span> <span class="n">not</span> <span class="n">consider</span> <span class="n">loopback</span> <span class="n">addresses</span> <span class="n">as</span> <span class="n">martian</span> <span class="n">source</span> <span class="n">or</span> <span class="n">destination</span> <span class="k">while</span> <span class="n">routing</span><span class="o">.</span> <span class="n">This</span> <span class="n">enables</span> <span class="n">the</span> <span class="n">use</span> <span class="n">of</span> <span class="mi">127</span><span class="o">/</span><span class="mi">8</span> <span class="k">for</span> <span class="n">local</span> <span class="n">routing</span> <span class="nf">purposes</span> <span class="o">(</span><span class="k">default</span> <span class="n">FALSE</span><span class="o">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个特性是对每个网卡设备生效的，所以只需要在<code>eth0</code>上开启环回地址路由就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">echo</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">net</span><span class="o">/</span><span class="n">ipv4</span><span class="o">/</span><span class="n">conf</span><span class="o">/</span><span class="n">eth0</span><span class="o">/</span><span class="n">route_localnet</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux sysctl.conf 优化]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/linux-sysctl-dot-conf-you-hua/"/>
    <updated>2018-04-27T01:32:43+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/linux-sysctl-dot-conf-you-hua</id>
    <content type="html"><![CDATA[<p>可以通过/etc/sysctl.conf控制和配置Linux内核及网络设置。</p>

<ul>
<li>避免放大攻击</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">icmp_echo_ignore_broadcasts</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启恶意icmp错误消息保护</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">icmp_ignore_bogus_error_responses</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启SYN洪水攻击保护</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_syncookies</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启并记录欺骗，源路由和重定向包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">log_martians</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">log_martians</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>处理无源路由的包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">accept_source_route</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_source_route</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启反向路径过滤</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">rp_filter</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">rp_filter</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>确保无人能修改路由表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">accept_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">secure_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">secure_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不充当路由器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">ip_forward</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">send_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">send_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启execshild</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">exec</span><span class="o">-</span><span class="n">shield</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">randomize_va_space</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>IPv6设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">router_solicitations</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_rtr_pref</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_pinfo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_defrtr</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">autoconf</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">dad_transmits</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">max_addresses</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>优化LB使用的端口</p></li>
<li><p>增加系统文件描述符限制</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fs</span><span class="o">.</span><span class="na">file</span><span class="o">-</span><span class="n">max</span> <span class="o">=</span> <span class="mi">65535</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许更多的PIDs (减少滚动翻转问题); may break some programs 32768</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">pid_max</span> <span class="o">=</span> <span class="mi">65536</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加系统IP端口限制</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">ip_local_port_range</span> <span class="o">=</span> <span class="mi">2000</span> <span class="mi">65000</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加TCP最大缓冲区大小</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_rmem</span> <span class="o">=</span> <span class="mi">4096</span> <span class="mi">87380</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_wmem</span> <span class="o">=</span> <span class="mi">4096</span> <span class="mi">87380</span> <span class="mi">8388608</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加Linux自动调整TCP缓冲区限制</li>
<li>最小，默认和最大可使用的字节数</li>
<li><p>最大值不低于4MB，如果你使用非常高的BDP路径可以设置得更高</p></li>
<li><p>Tcp窗口等</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">rmem_max</span> <span class="o">=</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">wmem_max</span> <span class="o">=</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">netdev_max_backlog</span> <span class="o">=</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_window_scaling</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Tips to Push Your Git Skills to the Next Level]]></title>
    <link href="http://iskey.github.io/blog/2018/04/26/10-tips-to-push-your-git-skills-to-the-next-level/"/>
    <updated>2018-04-26T15:38:05+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/26/10-tips-to-push-your-git-skills-to-the-next-level</id>
    <content type="html"><![CDATA[<p>Recently we published a couple of tutorials to get you familiar with Git basics and using Git in a team environment. The commands that we discussed were about enough to help a developer survive in the Git world. In this post, we will try to explore how to manage your time effectively and make full use of the features that Git provides.</p>

<p>Note: Some commands in this article include part of the command in square brackets (e.g. git add -p [file_name]). In those examples, you would insert the necessary number, identifier, etc. without the square brackets.</p>

<h3>1.  Git Auto Completion</h3>

<p>If you run Git commands through the command line, it’s a tiresome task to type in the commands manually every single time. To help with this, you can enable auto completion of Git commands within a few minutes.
To get the script, run the following in a Unix system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cd</span> <span class="o">~</span>
</span><span class='line'><span class="n">curl</span> <span class="nl">https</span><span class="p">:</span><span class="c1">//raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, add the following lines to your ~/.bash_profile file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="o">~/</span><span class="p">.</span><span class="n">git</span><span class="o">-</span><span class="n">completion</span><span class="p">.</span><span class="n">bash</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="p">.</span> <span class="o">~/</span><span class="p">.</span><span class="n">git</span><span class="o">-</span><span class="n">completion</span><span class="p">.</span><span class="n">bash</span>
</span><span class='line'><span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although I have mentioned this earlier, I can not stress it enough: If you want to use the features of Git fully, you should definitely shift to the command line interface!</p>

<h3>2.  Ignoring Files in Git</h3>

<p>Are you tired of compiled files (like .pyc) appearing in your Git repository? Or are you so fed up that you have added them to Git? Look no further, there is a way through which you can tell Git to ignore certain files and directories altogether. Simply create a file with the name .gitignore and list the files and directories that you don’t want Git to track. You can make exceptions using the exclamation mark(!).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
</span><span class='line'><span class="o">*</span><span class="p">.</span><span class="n">exe</span>
</span><span class='line'><span class="n">my_db_config</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>!main.pyc</p>

<h3>3.  Who Messed With My Code?</h3>

<p>It’s the natural instinct of human beings to blame others when something goes wrong. If your production server is broke, it’s very easy to find out the culprit — just do a git blame. This command shows you the author of every line in a file, the commit that saw the last change in that line, and the timestamp of the commit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">blame</span> <span class="p">[</span><span class="n">file_name</span><span class="p">]</span>
</span><span class='line'><span class="n">git</span> <span class="n">blame</span> <span class="n">demonstration</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in the screenshot below, you can see how this command would look on a bigger repository:</p>

<p>git blame on the ATutor repository</p>

<h3>4. Review History of the Repository</h3>

<p>We had a look at the use of git log in a previous tutorial, however, there are three options that you should know about.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">--</span><span class="n">oneline</span> <span class="err">–</span> <span class="n">Compresses</span> <span class="n">the</span> <span class="n">information</span> <span class="n">shown</span> <span class="n">beside</span> <span class="n">each</span> <span class="n">commit</span> <span class="n">to</span> <span class="n">a</span> <span class="n">reduced</span> <span class="n">commit</span> <span class="n">hash</span> <span class="n">and</span> <span class="n">the</span> <span class="n">commit</span> <span class="n">message</span><span class="p">,</span> <span class="n">all</span> <span class="n">shown</span> <span class="n">in</span> <span class="n">a</span> <span class="n">single</span> <span class="n">line</span><span class="p">.</span>
</span><span class='line'><span class="o">--</span><span class="n">graph</span> <span class="err">–</span> <span class="n">This</span> <span class="n">option</span> <span class="n">draws</span> <span class="n">a</span> <span class="n">text</span><span class="o">-</span><span class="n">based</span> <span class="n">graphical</span> <span class="n">representation</span> <span class="n">of</span> <span class="n">the</span> <span class="n">history</span> <span class="n">on</span> <span class="n">the</span> <span class="n">left</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">of</span> <span class="n">the</span> <span class="n">output</span><span class="p">.</span> <span class="n">It</span><span class="err">’</span><span class="n">s</span> <span class="n">of</span> <span class="n">no</span> <span class="n">use</span> <span class="k">if</span> <span class="n">you</span> <span class="n">are</span> <span class="n">viewing</span> <span class="n">the</span> <span class="n">history</span> <span class="k">for</span> <span class="n">a</span> <span class="n">single</span> <span class="n">branch</span><span class="p">.</span>
</span><span class='line'><span class="o">--</span><span class="n">all</span> <span class="err">–</span> <span class="n">Shows</span> <span class="n">the</span> <span class="n">history</span> <span class="n">of</span> <span class="n">all</span> <span class="n">branches</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s what a combination of the options looks like:
Use of git log with all, graph and oneline</p>

<h3>5. Never Lose Track of a Commit</h3>

<p>Let’s say you committed something you didn’t want to and ended up doing a hard reset to come back to your previous state. Later, you realize you lost some other information in the process and want to get it back, or at least view it. This is where git reflog can help.</p>

<p>A simple git log shows you the latest commit, its parent, its parent’s parent, and so on. However, git reflog is a list of commits that the head was pointed to. Remember that it’s local to your system; it’s not a part of your repository and not included in pushes or merges.</p>

<p>If I run git log, I get the commits that are a part of my repository:</p>

<p>Project history</p>

<p>However, a git reflog shows a commit (b1b0ee9 – HEAD@{4}) that was lost when I did a hard reset:</p>

<p>Git reflog</p>

<h3>6. Staging Parts of a Changed File for a Commit</h3>

<p>It is generally a good practice to make feature-based commits, that is, each commit must represent a feature or a bug fix. Consider what would happen if you fixed two bugs, or added multiple features without committing the changes. In such a situation situation, you could put the changes in a single commit. But there is a better way: Stage the files individually and commit them separately.</p>

<p>Let’s say you’ve made multiple changes to a single file and want them to appear in separate commits. In that case, we add files by prefixing -p to our add commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">-</span><span class="n">p</span> <span class="p">[</span><span class="n">file_name</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s try to demonstrate the same. I have added three new lines to file_name and I want only the first and third lines to appear in my commit. Let’s see what a git diff shows us.</p>

<p>Changes in repo</p>

<p>And let’s see what happes when we prefix a -p to our add command.</p>

<p>Running add with -p</p>

<p>It seems that Git assumed that all the changes were a part of the same idea, thereby grouping it into a single hunk. You have the following options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Enter</span> <span class="n">y</span> <span class="n">to</span> <span class="n">stage</span> <span class="n">that</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">n</span> <span class="n">to</span> <span class="n">not</span> <span class="n">stage</span> <span class="n">that</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">e</span> <span class="n">to</span> <span class="n">manually</span> <span class="n">edit</span> <span class="n">the</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">d</span> <span class="n">to</span> <span class="n">exit</span> <span class="n">or</span> <span class="n">go</span> <span class="n">to</span> <span class="n">the</span> <span class="n">next</span> <span class="n">file</span><span class="p">.</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">s</span> <span class="n">to</span> <span class="n">split</span> <span class="n">the</span> <span class="n">hunk</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our case, we definitely want to split it into smaller parts to selectively add some and ignore the rest.</p>

<p>Adding all hunks</p>

<p>As you can see, we have added the first and third lines and ignored the second. You can then view the status of the repository and make a commit.</p>

<p>Repository after selectively adding a file</p>

<h3>7. Squash Multiple Commits</h3>

<p>When you submit your code for review and create a pull request (which happens often in open source projects), you might be asked to make a change to your code before it’s accepted. You make the change, only to be asked to change it yet again in the next review. Before you know it, you have a few extra commits. Ideally, you could squash them into one using the rebase command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="n">HEAD</span><span class="o">~</span><span class="p">[</span><span class="n">number_of_commits</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to squash the last two commits, the command that you run is the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>On running this command, you are taken to an interactive interface listing the commits and asking you which ones to squash. Ideally, you pick the latest commit and squash the old ones.</p>

<p>Git squash interactive</p>

<p>You are then asked to provide a commit message to the new commit. This process essentially re-writes your commit history.</p>

<p>Adding a commit message</p>

<h3>8. Stash Uncommitted Changes</h3>

<p>Let’s say you are working on a certain bug or a feature, and you are suddenly asked to demonstrate your work. Your current work is not complete enough to be committed, and you can’t give a demonstration at this stage (without reverting the changes). In such a situation, git stash comes to the rescue. Stash essentially takes all your changes and stores them for further use. To stash your changes, you simply run the following-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check the list of stashes, you can run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stash list</p>

<p>If you want to un-stash and recover the uncommitted changes, you apply the stash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the last screenshot, you can see that each stash has an indentifier, a unique number (although we have only one stash in this case). In case you want to apply only selective stashes, you add the specific identifier to the apply command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After un-stashing changes</p>

<h3>9. Check for Lost Commits</h3>

<p>Although reflog is one way of checking for lost commits, it’s not feasible in large repositories. That is when the fsck (file system check) command comes into play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">fsck</span> <span class="o">--</span><span class="n">lost</span><span class="o">-</span><span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>Git fsck results</p>

<p>Here you can see a lost commit. You can check the changes in the commit by running git show [commit_hash] or recover it by running git merge [commit_hash].</p>

<p>git fsck has an advantage over reflog. Let’s say you deleted a remote branch and then cloned the repository. With fsck you can search for and recover the deleted remote branch.</p>

<h3>10. Cherry Pick</h3>

<p>I have saved the most elegant Git command for the last. The cherry-pick command is by far my favorite Git command, because of its literal meaning as well as its utility!</p>

<p>In the simplest of terms, cherry-pick is picking a single commit from a different branch and merging it with your current one. If you are working in a parallel fashion on two or more branches, you might notice a bug that is present in all branches. If you solve it in one, you can cherry pick the commit into the other branches, without messing with other files or commits.</p>

<p>Let’s consider a scenario where we can apply this. I have two branches and I want to cherry-pick the commit b20fd14: Cleaned junk into another one.</p>

<p>Before cherry pick</p>

<p>I switch to the branch into which I want to cherry-pick the commit, and run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">cherry</span><span class="o">-</span><span class="n">pick</span> <span class="p">[</span><span class="n">commit_hash</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>After cherry pick</p>

<p>Although we had a clean cherry-pick this time, you should know that this command can often lead to conflicts, so use it with care.
Conclusion</p>

<p>With this, we come to the end of our list of tips that I think can help you take your Git skills to a new level. Git is the best out there and it can accomplish anything you can imagine. Therefore, always try to challenge yourself with Git. Chances are, you will end up learning something new!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell文件描述符操作]]></title>
    <link href="http://iskey.github.io/blog/2018/04/24/shell-fds/"/>
    <updated>2018-04-24T02:39:25+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/24/shell-fds</id>
    <content type="html"><![CDATA[<p>shell在产生一个新进程后，新进程的前三个文件描述符都默认指向三个相关文件。
这三个文件描述符对应的数组下标分别为<strong>0，1，2</strong>。</p>

<pre><code>- 0  对应的文件叫做标准输入（stdin）
- 1  对应的文件叫做标准输出（stdout）
- 2  对应的文件叫做标准报错(stderr)
</code></pre>

<p>但是实际上，默认跟人交互的<strong>输入是键盘、鼠标，输出是显示器屏幕</strong>，这些硬件设备对于程序来说都是不认识的，所以操作系统借用了原来“终端”的概念，将键盘鼠标显示器都表现成一个终端文件。于是<strong>stdin、stdout和stderr</strong>就最重都指向了这所谓的终端文件上。</p>

<p>于是，从键盘输入的内容，进程可以从标准输入的0号文件描述符读取，正常的输出内容从1号描述符写出，报错信息被定义为从2号描述符写出。这就是标准输入、标准输出和标准报错对应的描述符编号是0、1、2的原因。这也是为什么对报错进行重定向要使用2>的原因(其实1>也是可以用的)。</p>

<p>明白了以上内容之后，很多重定向的数字魔法就好理解了，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">docker</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">sudoers</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">lvm</span><span class="o">/</span><span class="n">cache</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="n">openpgp</span><span class="o">-</span><span class="n">revocs</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="kd">private</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="n">v1</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">polkit</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">rules</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于只看报错信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="k">default</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pam</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于只看正确输出信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="o">&amp;&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有输出都不看，也可以写成”>&amp;”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="k">default</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">docker</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pam</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">sudoers</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">lvm</span><span class="o">/</span><span class="n">cache</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="n">openpgp</span><span class="o">-</span><span class="n">revocs</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="kd">private</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="n">v1</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">polkit</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">rules</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>将标准报错输出的，重定向到标准输出再输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">echo</span> <span class="n">hello</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="n">hello</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">echo</span> <span class="n">hello2</span> <span class="o">&gt;&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="n">hello</span>
</span><span class='line'><span class="n">hello2</span>
</span></code></pre></td></tr></table></div></figure>


<p>“>>”表示追加重定向。</p>

<p>相信大家对<strong>&amp;>>、1>&amp;2、？2>&amp;3、6>&amp;8、>>file 2>&amp;1</strong>这样的写法应该也都能理解了。
进程可以打开多个文件，多个描述符之间都可以进行重定向。当然，输入也可以，比如：3&lt;表示从描述符3读取。</p>

<p>下面我们罗列一下其他重定向符号和用法：
Here Document：
语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;&lt;[-]</span><span class="n">word</span>
</span><span class='line'>    <span class="n">here</span><span class="o">-</span><span class="n">document</span>
</span><span class='line'><span class="n">delimiter</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一种特殊的输入重定向，重定向的内容并不是来自于某个文件，而是从当前输入读取，直到输入中写入了delimiter字符标记结束。用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">hello</span> <span class="n">world</span><span class="o">!</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">zorro</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">sadfsdf</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">ertert</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">eof</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">hello</span> <span class="n">world</span><span class="o">!</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">zorro</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">sadfsdf</span>
</span><span class='line'><span class="n">ertert</span>
</span><span class='line'><span class="n">eof</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子可以看到，最后cat输出的内容都是在上面写入的内容，而且内容中不包括EOF，因为EOF是标记输入结束的字符串。这个功能在脚本中通常可以用于需要交互式处理的某些命令的输入和文件编辑，比如想在脚本中使用fdisk命令新建一个分区：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">root</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="err">#</span> <span class="n">cat</span> <span class="n">fdisk</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="n">fdisk</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">n</span>
</span><span class='line'><span class="n">p</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">w</span>
</span><span class='line'><span class="n">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这个脚本大家千万不要乱执行，可能会修改你的分区表。其中要输入的内容，相信熟悉fdisk命令的人应该都能明白，我就不多解释了。
Here strings：
语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;&lt;&lt;</span><span class="n">word</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">asdasdasd</span>
</span><span class='line'><span class="n">asdasdasd</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实就是将&lt;&lt;&lt;符号后面的字符串当成要输入的内容给cat，而不是定向一个文件描述符。这样是不是就相当于把cat当echo用了？</p>

<ul>
<li>文件描述符的复制：</li>
</ul>


<p><strong>复制输入文件描述符：[n]&lt;&amp;word</strong></p>

<p>如果n没有指定数字，则默认复制0号文件描述符。
word一般写一个已经打开的并且用来作为输入的描述符数字，表示将制订的n号描述符在制定的描述符上复制一个。
如果word写的是“-”符号，则表示关闭这个文件描述符。如果word指定的不是一个用来输入的文件描述符，则会报错。</p>

<p><strong>复制输出文件描述符：[n]>&amp;word</strong></p>

<p>复制一个输出的描述符，字段描述参考上面的输入复制，例子上面已经讲过了。这里还需要知道的就是1>&amp;-表示关闭1号描述符。</p>

<ul>
<li>文件描述符的移动：</li>
</ul>


<p><strong>移动输入描述符：[n]&lt;&amp;digit-</strong>
<strong>移动输出描述符：[n]>&amp;digit-</strong></p>

<p>这两个符号的意思都是将原有描述符在新的描述符编号上打开，并且关闭原有描述符。</p>

<ul>
<li>描述符新建：</li>
</ul>


<p><strong>新建一个用来输入的描述符：[n]&lt;word</strong>
<strong>新建一个用来输出的描述符：[n]>word</strong>
<strong>新建一个用来输入和输出的描述符：[n]&lt;>word</strong></p>

<p>word都应该写一个文件路径，用来表示这个文件描述符的关联文件是谁。</p>

<p>下面我们来看相关的编程例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">example</span> <span class="mi">1</span>
</span><span class='line'><span class="err">#</span><span class="n">打开3号fd用来输入</span><span class="err">，</span><span class="n">关联文件为</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&lt;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="err">#</span><span class="n">让3号描述符成为标准输入</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">0</span><span class="o">&lt;&amp;</span><span class="mi">3</span>
</span><span class='line'><span class="err">#</span><span class="n">此时cat的输入将是</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span><span class="err">，</span><span class="n">会在屏幕上显示出</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd的内容</span><span class="err">。</span>
</span><span class='line'><span class="n">cat</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">关闭3号描述符</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;&amp;-</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">example</span> <span class="mi">2</span>
</span><span class='line'><span class="err">#</span><span class="n">打开3号和4号描述符作为输出</span><span class="err">，</span><span class="n">并且分别关联文件</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stdout</span>
</span><span class='line'>
</span><span class='line'><span class="n">exec</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stderr</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">将标准输入关联到3号描述符</span><span class="err">，</span><span class="n">关闭原来的1号fd</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">1</span><span class="o">&gt;&amp;</span><span class="mi">3</span><span class="o">-</span>
</span><span class='line'><span class="err">#</span><span class="n">将标准报错关联到4号描述符</span><span class="err">，</span><span class="n">关闭原来的2号fd</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">4</span><span class="o">-</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">这个find命令的所有正常输出都会写到</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stdout文件中</span><span class="err">，</span><span class="n">错误输出都会写到</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stderr文件中</span><span class="err">。</span>
</span><span class='line'><span class="n">find</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span> <span class="o">-</span><span class="n">name</span> <span class="s">&quot;passwd&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">关闭两个描述符</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;&amp;-</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">4</span><span class="o">&gt;&amp;-</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上脚本要注意的地方是，一般输入输出重定向都是放到命令后面作为后缀使用，所以如果单纯改变脚本的描述符，需要在前面加exec命令。这种用法也叫做描述符魔术。某些特殊符号还有一些特殊用法，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">bash</span><span class="o">]</span><span class="n">$</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示清空文件，当然也可以写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">bash</span><span class="o">]</span><span class="n">$</span> <span class="o">:&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为”:”是一个内建命令，跟true是同样的功能，所以没有任何输出，所以这个命令清空文件的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立IP隧道]]></title>
    <link href="http://iskey.github.io/blog/2018/03/08/ip-tunnel/"/>
    <updated>2018-03-08T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2018/03/08/ip-tunnel</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>  有2个相互隔离的网络，拓扑见下图。ServerA想直接访问到ServerB连接的私有网络</p>

<pre><code>                    |
1.1.1.1               2.2.2.2       |
+---------+  Public   +---------+   | Private
| ServerA +-----------+ ServerB +-------+
+---------+  Network  +---------+   | Network
                    |
                    | 192.168.1.0/24 
</code></pre>

<h2>实现</h2>

<p>  通过ip tunnel建立ipip隧道，再通过iptables进行nat，便可以实现。</p>

<h3>Step 1. 建立ip隧道</h3>

<p>  ServerA配置iptunnel,并给tunnel接口配置上ip</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#ip tunnel add a2b mode ipip remote 2.2.2.2 local 1.1.1.1
</span><span class='line'>
</span><span class='line'>#ifconfig a2b 192.168.2.1 netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>  ServerB配置iptunnel,并给tunnel接口配置上ip</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#ip tunnel add a2b mode ipip remote 1.1.1.1 local 2.2.2.2
</span><span class='line'>
</span><span class='line'>#ifconfig a2b 192.168.2.2 netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>  隧道配置完成后，请在ServerA上192.168.2.2，看是否可以ping通，ping通则继续，ping不通需要再看一下上面的命令执行是否有报错</p>

<h3>Step 2. 添加路由和nat</h3>

<p>  ServerA上，添加到192.168.1.0/24的路由</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#/sbin/route add -net 192.168.1.0/24 gw 192.168.2.2</span></code></pre></td></tr></table></div></figure>


<p>  ServerB上，添加iptables nat，将ServerA过了访问192.168.1.0/24段的包进行NAT，并开启ip foward功能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#iptables -t nat -A POSTROUTING -s 192.168.2.1 -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>
</span><span class='line'>#sysctl -w net.ipv4.ip_forward=1
</span><span class='line'>
</span><span class='line'>#sed -i '/net.ipv4.ip_forward/ s/0/1/'  /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p>  至此，完成了两端的配置，ServerA可以直接访问ServerB 所接的私网了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TODO]]></title>
    <link href="http://iskey.github.io/blog/2018/03/07/TODO/"/>
    <updated>2018-03-07T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2018/03/07/TODO</id>
    <content type="html"><![CDATA[<h3>TODO</h3>

<p><a href="http://www.adminsehow.com/2011/09/iptables-packet-traverse-map">Netfilter</a></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/tables_traverse.jpg" alt="1" /></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/packet_flow9.png" alt="2" /></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/iptables.png" alt="3" /></p>

<hr />

<p><a href="http://liu2lin600.github.io/2016/07/23/iptables%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/">http://liu2lin600.github.io/2016/07/23/iptables%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/</a></p>

<p><a href="http://www.brendangregg.com/overview.html">http://www.brendangregg.com/overview.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Mode Linux]]></title>
    <link href="http://iskey.github.io/blog/2017/03/06/user_mode_linux/"/>
    <updated>2017-03-06T21:12:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/03/06/user_mode_linux</id>
    <content type="html"><![CDATA[<p>以前研究内核，总是要依靠开发板或者自己编译内核．近来留意到了ＵＭＬ，才发现linux可以像进程一样跑起来，而且跑起来不不难，深感惭愧，以下是简单的使用方法介绍．</p>

<h2>简介</h2>

<p>用户模式Linux（User ModeLinux，UML）不同于其他Linux虚拟化项目，UML尽量将它自己作为一个普通的程序。从Linux2.6.9版本起，用户模式Linux（User mode Linux,UML）已随Linux内核源代码一起发布，它存放于arch/um目录下。编译好UML的内核之后，可直接用gdb运行编译好的内核并进行调试。</p>

<p>参考：<a href="http://uml.devloop.org.uk/howto.html">http://uml.devloop.org.uk/howto.html</a></p>

<h2>编译内核</h2>

<h3>以-O2编译内核</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=um defconfig
</span><span class='line'>make menuconfig ARCH=um
</span><span class='line'>make ARCH=um</span></code></pre></td></tr></table></div></figure>


<p><a href="http://user-mode-linux.sourceforge.net/source.html">参考</a></p>

<h3>以-O0编译内核</h3>

<p><a href="http://blog.chinaunix.net/uid-234303-id-2425015.html">参考</a></p>

<h2>根文件系统</h2>

<ul>
<li><p><a href="http://fs.devloop.org.uk/">下载现成的根文件系统</a></p></li>
<li><p><a href="http://fancymore.com/reading/linux-kernel-debugging.html">制作根文件系统</a></p></li>
</ul>


<h2>调试</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gdb ./linux   
</span><span class='line'>(gdb) handle SIGSEGV pass nostop noprint   
</span><span class='line'>(gdb) handle SIGUSR1 pass nostop noprint 
</span><span class='line'>(gdb) start ubd0=/root/srcpkg/filesystem/CentOS6.x-x86-root_fs mem=256m</span></code></pre></td></tr></table></div></figure>


<p><code>http://blog.csdn.net/ztz0223/article/details/7874759</code></p>

<p>五、常见问题</p>

<p>1、
<a href="http://moodlearchive.epfl.ch/2010-2011/mod/forum/discuss.php?d=108781">http://moodlearchive.epfl.ch/2010-2011/mod/forum/discuss.php?d=108781</a></p>

<p>2、
<a href="http://www.lenky.info/archives/2012/04/1471">http://www.lenky.info/archives/2012/04/1471</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netfilter Example]]></title>
    <link href="http://iskey.github.io/blog/2017/03/02/netfilter_example/"/>
    <updated>2017-03-02T21:42:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/03/02/netfilter_example</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    #include &lt;linux/module.h&gt;
</span><span class='line'>    #include &lt;linux/kernel.h&gt;
</span><span class='line'>    #include &lt;linux/init.h&gt;
</span><span class='line'>    #include &lt;linux/types.h&gt;
</span><span class='line'>    #include &lt;linux/netdevice.h&gt;
</span><span class='line'>    #include &lt;linux/skbuff.h&gt;
</span><span class='line'>    #include &lt;linux/netfilter_ipv4.h&gt;
</span><span class='line'>    #include &lt;linux/inet.h&gt;
</span><span class='line'>    #include &lt;linux/in.h&gt;
</span><span class='line'>    #include &lt;linux/ip.h&gt;
</span><span class='line'>    
</span><span class='line'>    MODULE_LICENSE("GPL");
</span><span class='line'>    #define NIPQUAD(addr) \
</span><span class='line'>      ((unsigned char *)&addr)[0], \
</span><span class='line'>      ((unsigned char *)&addr)[1], \
</span><span class='line'>      ((unsigned char *)&addr)[2], \
</span><span class='line'>      ((unsigned char *)&addr)[3]
</span><span class='line'>    
</span><span class='line'>    static unsigned int sample(
</span><span class='line'>    unsigned int hooknum,
</span><span class='line'>    struct sk_buff * skb,
</span><span class='line'>    const struct net_device *in,
</span><span class='line'>    const struct net_device *out,
</span><span class='line'>    int (*okfn) (struct sk_buff *))
</span><span class='line'>    {
</span><span class='line'>        __be32 sip,dip;
</span><span class='line'>     if(skb){
</span><span class='line'>       struct sk_buff *sb = NULL;
</span><span class='line'>       sb = skb;
</span><span class='line'>       struct iphdr *iph;
</span><span class='line'>       iph  = ip_hdr(sb);
</span><span class='line'>       sip = iph-&gt;saddr;
</span><span class='line'>       dip = iph-&gt;daddr;
</span><span class='line'>       printk("Packet for source address: %d.%d.%d.%d\n destination address: %d.%d.%d.%d\n ", NIPQUAD(sip), NIPQUAD(dip));
</span><span class='line'>        }
</span><span class='line'>     return NF_ACCEPT;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     struct nf_hook_ops sample_ops = {
</span><span class='line'>       .list =  {NULL,NULL},
</span><span class='line'>       .hook = sample,
</span><span class='line'>       .pf = PF_INET,
</span><span class='line'>       .hooknum = NF_INET_PRE_ROUTING,
</span><span class='line'>       .priority = NF_IP_PRI_FILTER+2
</span><span class='line'>     };
</span><span class='line'>    
</span><span class='line'>    static int __init sample_init(void) {
</span><span class='line'>      nf_register_hook(&sample_ops);
</span><span class='line'>      return 0;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>    static void __exit sample_exit(void) {
</span><span class='line'>      nf_unregister_hook(&sample_ops);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     module_init(sample_init);
</span><span class='line'>     module_exit(sample_exit);
</span><span class='line'>     MODULE_AUTHOR("chenkangrui");
</span><span class='line'>     MODULE_DESCRIPTION("sample");  
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c.tom of SourceInsight for Kernel]]></title>
    <link href="http://iskey.github.io/blog/2017/01/02/ctom_of_SourceInsight_for_kernel/"/>
    <updated>2017-01-02T15:32:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/01/02/ctom_of_SourceInsight_for_kernel</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>;For Linux Kernel Code
</span><span class='line'>SYSCALL_DEFINE0(name) long sys_##name(void)
</span><span class='line'>SYSCALL_DEFINE1(name, t1, v1) long sys_##name(t1 v1)
</span><span class='line'>SYSCALL_DEFINE2(name, t1, v1, t2, v2) long sys_##name(t1 v1, t2 v2)
</span><span class='line'>SYSCALL_DEFINE3(name, t1, v1, t2, v2, t3, v3) long sys_##name(t1 v1, t2 v2, t3 v3)
</span><span class='line'>SYSCALL_DEFINE4(name, t1, v1, t2, v2, t3, v3, t4, v4) long sys_##name(t1 v1, t2 v2, t3 v3, t4 v4)
</span><span class='line'>SYSCALL_DEFINE5(name, t1, v1, t2, v2, t3, v3, t4, v4, t5, v5) long sys_##name(t1 v1, t2 v2, t3 v3, t4 v4, t5 v5)
</span><span class='line'>__init
</span><span class='line'>__initdata
</span><span class='line'>__initconst
</span><span class='line'>__exitdata
</span><span class='line'>__exit_call
</span><span class='line'>__ref
</span><span class='line'>__refdata
</span><span class='line'>__refconst
</span><span class='line'>__init_refok
</span><span class='line'>__initdata_refok
</span><span class='line'>__exit_refok
</span><span class='line'>__exitused
</span><span class='line'>__exit
</span><span class='line'>__devinit
</span><span class='line'>__devinitdata
</span><span class='line'>__devinitconst
</span><span class='line'>__devexit
</span><span class='line'>__devexitdata
</span><span class='line'>__devexitconst
</span><span class='line'>__used
</span><span class='line'>__must_check
</span><span class='line'>__compiler_offsetof(a,b)
</span><span class='line'>__always_inline
</span><span class='line'>__attribute__
</span><span class='line'>__user
</span><span class='line'>__kernel
</span><span class='line'>__safe
</span><span class='line'>__force
</span><span class='line'>__nocast
</span><span class='line'>__iomem
</span><span class='line'>__chk_user_ptr(x)
</span><span class='line'>__chk_io_ptr(x)
</span><span class='line'>__builtin_warning
</span><span class='line'>__acquires(x)
</span><span class='line'>__releases(x)
</span><span class='line'>__acquire(x)
</span><span class='line'>__release(x)
</span><span class='line'>__cond_lock(x,c)
</span><span class='line'>__percpu
</span><span class='line'>likely(x)
</span><span class='line'>unlikely(x)
</span><span class='line'>__read_mostly
</span><span class='line'>____cacheline_aligned
</span><span class='line'>____cacheline_aligned_in_smp
</span><span class='line'>__cacheline_aligned
</span><span class='line'>__cacheline_aligned_in_smp
</span><span class='line'>____cacheline_internodealigned_in_smp
</span><span class='line'>__cacheline_internodealigned_in_smp
</span><span class='line'>__rcu
</span><span class='line'>__refconst
</span><span class='line'>__refdata
</span><span class='line'>__reg_oper0
</span><span class='line'>__reg_oper1
</span><span class='line'>__bitwise
</span><span class='line'>__bitwise__
</span><span class='line'>__aligned_u64
</span><span class='line'>__aligned_be64
</span><span class='line'>__aligned_le64
</span><span class='line'>__naked
</span><span class='line'>__noreturn
</span><span class='line'>__pure
</span><span class='line'>__always_inline
</span><span class='line'>DRIVER_ATTR(_name, _mode, _show, _store) struct driver_attribute driver_attr_##_name
</span><span class='line'>CLASS_ATTR(_name, _mode, _show, _store) struct class_attribute class_attr_##_name
</span><span class='line'>LIST_HEAD(name) struct list_head name
</span><span class='line'>DEFINE_MUTEX(mutexname) struct mutex mutexname
</span><span class='line'>DEFINE_TIMER(_name, _function, _expires, _data) struct timer_list _name
</span><span class='line'>DECLARE_WORK(n, f) struct work_struct n
</span><span class='line'>DEFINE_SPINLOCK(x) spinlock_t x
</span><span class='line'>EXPORT_SYMBOL(sym)
</span><span class='line'>EXPORT_SYMBOL_GPL(sym)
</span><span class='line'>EXPORT_SYMBOL_GPL_FUTURE(sym)
</span><span class='line'>DEFINE_IDA(name) struct ida name
</span><span class='line'>DECLARE_RWSEM(name) struct rw_semaphore name
</span><span class='line'>DECLARE_BITMAP(name,bits) unsigned long name[bits/32]
</span><span class='line'>DEFINE_RWLOCK(x) rwlock_t x
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel Defines for ARM]]></title>
    <link href="http://iskey.github.io/blog/2016/06/18/Kernel_Defines_for_ARM/"/>
    <updated>2016-06-18T20:21:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/06/18/Kernel_Defines_for_ARM</id>
    <content type="html"><![CDATA[<h2>Initial definitions</h2>

<p>The following symbol definitions rely on you knowing the translation that
<code>__virt_to_phys()</code> does for your machine.  This macro converts the passed
virtual address to a physical address.  Normally, it is simply:</p>

<pre><code>    phys = virt - PAGE_OFFSET + PHYS_OFFSET
</code></pre>

<h2>Decompressor Symbols</h2>

<hr />

<h4>ZTEXTADDR</h4>

<pre><code>Start address of decompressor.  There's no point in talking about
virtual or physical addresses here, since the MMU will be off at
the time when you call the decompressor code.  You normally call
the kernel at this address to start it booting.  This doesn't have
to be located in RAM, it can be in flash or other read-only or
read-write addressable medium.
</code></pre>

<h4>ZBSSADDR</h4>

<pre><code>Start address of zero-initialised work area for the decompressor.
This must be pointing at RAM.  The decompressor will zero initialise
this for you.  Again, the MMU will be off.
</code></pre>

<h4>ZRELADDR</h4>

<pre><code>This is the address where the decompressed kernel will be written,
and eventually executed.  The following constraint must be valid:

    __virt_to_phys(TEXTADDR) == ZRELADDR

The initial part of the kernel is carefully coded to be position
independent.
</code></pre>

<h4>INITRD_PHYS</h4>

<pre><code>Physical address to place the initial RAM disk.  Only relevant if
you are using the bootpImage stuff (which only works on the old
struct param_struct).
</code></pre>

<h4>INITRD_VIRT</h4>

<pre><code>Virtual address of the initial RAM disk.  The following  constraint
must be valid:

    __virt_to_phys(INITRD_VIRT) == INITRD_PHYS
</code></pre>

<h4>PARAMS_PHYS</h4>

<pre><code>Physical address of the struct param_struct or tag list, giving the
kernel various parameters about its execution environment.
</code></pre>

<h2>Kernel Symbols</h2>

<hr />

<h4>PHYS_OFFSET</h4>

<pre><code>Physical start address of the first bank of RAM.
</code></pre>

<h4>PAGE_OFFSET</h4>

<pre><code>Virtual start address of the first bank of RAM.  During the kernel
boot phase, virtual address PAGE_OFFSET will be mapped to physical
address PHYS_OFFSET, along with any other mappings you supply.
This should be the same value as TASK_SIZE.
</code></pre>

<h4>TASK_SIZE</h4>

<pre><code>The maximum size of a user process in bytes.  Since user space
always starts at zero, this is the maximum address that a user
process can access+1.  The user space stack grows down from this
address.

Any virtual address below TASK_SIZE is deemed to be user process
area, and therefore managed dynamically on a process by process
basis by the kernel.  I'll call this the user segment.

Anything above TASK_SIZE is common to all processes.  I'll call
this the kernel segment.

(In other words, you can't put IO mappings below TASK_SIZE, and
hence PAGE_OFFSET).
</code></pre>

<h4>TEXTADDR</h4>

<pre><code>Virtual start address of kernel, normally PAGE_OFFSET + 0x8000.
This is where the kernel image ends up.  With the latest kernels,
it must be located at 32768 bytes into a 128MB region.  Previous
kernels placed a restriction of 256MB here.
</code></pre>

<h4>DATAADDR</h4>

<pre><code>Virtual address for the kernel data segment.  Must not be defined
when using the decompressor.
</code></pre>

<h4>VMALLOC_START</h4>

<h4>VMALLOC_END</h4>

<pre><code>Virtual addresses bounding the vmalloc() area.  There must not be
any static mappings in this area; vmalloc will overwrite them.
The addresses must also be in the kernel segment (see above).
Normally, the vmalloc() area starts VMALLOC_OFFSET bytes above the
last virtual RAM address (found using variable high_memory).
</code></pre>

<h4>VMALLOC_OFFSET</h4>

<pre><code>Offset normally incorporated into VMALLOC_START to provide a hole
between virtual RAM and the vmalloc area.  We do this to allow
out of bounds memory accesses (eg, something writing off the end
of the mapped memory map) to be caught.  Normally set to 8MB.
</code></pre>

<h2>Architecture Specific Macros</h2>

<hr />

<h4>BOOT_MEM(pram,pio,vio)</h4>

<pre><code>`pram' specifies the physical start address of RAM.  Must always
be present, and should be the same as PHYS_OFFSET.

`pio' is the physical address of an 8MB region containing IO for
use with the debugging macros in arch/arm/kernel/debug-armv.S.

`vio' is the virtual address of the 8MB debugging region.

It is expected that the debugging region will be re-initialised
by the architecture specific code later in the code (via the
MAPIO function).
</code></pre>

<h4>BOOT_PARAMS</h4>

<pre><code>Same as, and see PARAMS_PHYS.
</code></pre>

<h4>FIXUP(func)</h4>

<pre><code>Machine specific fixups, run before memory subsystems have been
initialised.
</code></pre>

<h4>MAPIO(func)</h4>

<pre><code>Machine specific function to map IO areas (including the debug
region above).
</code></pre>

<h4>INITIRQ(func)</h4>

<pre><code>Machine specific function to initialise interrupts.
</code></pre>
]]></content>
  </entry>
  
</feed>
