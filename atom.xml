<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Iskey's Blog]]></title>
  <link href="http://iskey.github.io/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2019-05-29T00:16:48+08:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xubuntu Upgrade]]></title>
    <link href="http://iskey.github.io/blog/2019/05/28/xubuntu-upgrade/"/>
    <updated>2019-05-28T23:37:53+08:00</updated>
    <id>http://iskey.github.io/blog/2019/05/28/xubuntu-upgrade</id>
    <content type="html"><![CDATA[<hr />

<h2>升级ubuntu内核</h2>

<hr />

<p><code>apt-get upgrade</code>命令进行升级，如果内核有更新，会直接更新</p>

<h3>关于boot分区</h3>

<p>现在的ubuntu系统，一般都不建议再单独安装/boot分区来存放内核/initrd等文件了，可以直接放到根分区之下，如果要单独划分/boot分区的话,最好设置的大一点（以前翻看资料经典的推荐设置200M，现在推荐设置500M~1G）,避免后续升级的时候,出现空间不够用.</p>

<h3>清理旧的系统映像</h3>

<p>经过几次更新以后，boot分区一般会保留了好多不用的旧版本内核/初始文件系统，可以使用命令<code>sudo apt-get autoremove</code>来进行清理，
也可以制定版本号进行清理：<code>sudo apt-get remove linux-image-(版本号)</code></p>

<h3>升级内核之后，设备异常（一般是网卡/声卡）</h3>

<p>我在升级完成后，就遇到了网卡不识别的问题，这时候通过grub启动菜单，切换回之前的版本，查看一下网卡驱动</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~: lspci -k | grep Ethernet -A5
</span><span class='line'>05:00.0 Ethernet controller: Qualcomm Atheros AR8161 Gigabit Ethernet (rev 10)
</span><span class='line'>  Subsystem: Gigabyte Technology Co., Ltd AR8161 Gigabit Ethernet
</span><span class='line'>  Kernel driver in use: alx
</span><span class='line'>  Kernel modules: alx</span></code></pre></td></tr></table></div></figure>


<p>可以看到旧的内核用的驱动是<code>alx</code>,通过查询资料<code>Qualcomm Atheros AR8161 Gigabit Ethernet</code>,找到了<code>https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/</code>,打开后可以看到如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v3.8-rc5/                                          26-Jan-2013 17:47       -
</span><span class='line'>v3.8-rc7/                                          10-Feb-2013 23:35       -
</span><span class='line'>v3.8.2/                                            11-Mar-2013 23:44       -
</span><span class='line'>v3.8.3/                                            15-Mar-2013 21:55       -
</span><span class='line'>v3.9-rc1/                                          09-Mar-2013 07:20       -
</span><span class='line'>v3.9-rc2/                                          12-Mar-2013 00:45       -
</span><span class='line'>v3.9-rc3/                                          29-Mar-2013 02:43       -
</span><span class='line'>v3.9-rc4/                                          29-Mar-2013 06:04       -
</span><span class='line'>v4.0.1/                                            29-Apr-2015 20:14       -
</span><span class='line'>v4.1-rc1/                                          28-Apr-2015 21:26       -
</span><span class='line'>v4.1.1/                                            01-Jul-2015 21:14       -
</span><span class='line'>v4.14-rc2/                                         30-Sep-2017 16:02       -
</span><span class='line'>v4.19-rc5/                                         25-Sep-2018 20:14       -
</span><span class='line'>v4.19.23/                                          15-Feb-2019 19:41       -
</span><span class='line'>v4.19.32/                                          28-Mar-2019 14:42       -
</span><span class='line'>v4.19.7/                                           07-Dec-2018 19:25       -
</span><span class='line'>v4.2-rc1/                                          11-Jul-2015 23:32       -
</span><span class='line'>v4.2.6/                                            15-Nov-2015 21:22       -
</span><span class='line'>v4.20-rc5/                                         06-Dec-2018 22:27       -
</span><span class='line'>v4.20.10/                                          15-Feb-2019 22:03       -
</span><span class='line'>v4.20.17/                                          28-Mar-2019 12:58       -
</span><span class='line'>v4.3/                                              15-Nov-2015 18:31       -
</span><span class='line'>v4.4-rc2/                                          25-Nov-2015 22:24       -
</span><span class='line'>v4.4.2/                                            18-Feb-2016 21:44       -
</span><span class='line'>v5.0-rc6/                                          13-Feb-2019 20:46       -
</span><span class='line'>v5.0.5/                                            28-Mar-2019 01:06       -
</span><span class='line'>v5.1-rc2/                                          27-Mar-2019 23:17       -</span></code></pre></td></tr></table></div></figure>


<p>左边一列是内核版本号，找到与自己的内核版本对应的版本，查看内核版本号的方法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~ uname -r
</span><span class='line'>4.4.0-145-generic</span></code></pre></td></tr></table></div></figure>


<p>所以我下载了<code>v4.4-rc2</code>的版本（<code>backports-4.4-rc2-1.tar.gz</code>[<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4-rc2/backports-4.4-rc2-1.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4-rc2/backports-4.4-rc2-1.tar.gz</a>]），</p>

<p>下载并解压，编译并安装alx驱动，就可以了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| Your backport package isn't configured, please configure it
</span><span class='line'>| using one of the following options:
</span><span class='line'>| To configure manually:
</span><span class='line'>|     make oldconfig
</span><span class='line'>|     make menuconfig
</span><span class='line'>|
</span><span class='line'>| To get defaults for certain drivers:
</span><span class='line'>|     make defconfig-alx
</span><span class='line'>|     make defconfig-ar5523
</span><span class='line'>|     make defconfig-ath10k
</span><span class='line'>|     make defconfig-ath5k
</span><span class='line'>|     make defconfig-ath6kl
</span><span class='line'>|     make defconfig-ath9k
</span><span class='line'>|     make defconfig-ath9k-debug
</span><span class='line'>|     make defconfig-b43
</span><span class='line'>|     make defconfig-b43legacy
</span><span class='line'>|     make defconfig-brcmfmac
</span><span class='line'>|     make defconfig-brcmsmac
</span><span class='line'>|     make defconfig-carl9170
</span><span class='line'>|     make defconfig-cw1200
</span><span class='line'>|     make defconfig-hwsim
</span><span class='line'>|     make defconfig-ieee802154
</span><span class='line'>|     make defconfig-igb
</span><span class='line'>|     make defconfig-iwlwifi
</span><span class='line'>|     make defconfig-media
</span><span class='line'>|     make defconfig-nfc
</span><span class='line'>|     make defconfig-rtlwifi
</span><span class='line'>|     make defconfig-wcn36xx
</span><span class='line'>|     make defconfig-wifi
</span><span class='line'>|     make defconfig-wil6210
</span><span class='line'>|     make defconfig-wwan
</span><span class='line'>\--
</span><span class='line'>Makefile.real:45: recipe for target '.config' failed
</span><span class='line'>make[2]: *** [.config] Error 1
</span><span class='line'>Makefile:40: recipe for target 'modules' failed
</span><span class='line'>make[1]: *** [modules] Error 2
</span><span class='line'>Makefile:30: recipe for target 'default' failed
</span><span class='line'>make: *** [default] Error 2</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~: sudo make defconfig-alx
</span><span class='line'>~: sudo make install
</span><span class='line'>~: reboot</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，重启就可以找到网卡了</p>

<h3>　其它</h3>

<p>中间有个插曲，升级后Grub进不去了，不得已，用ubuntuＵ盘系统进去，使用boot-repaire重新修复了Grub,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-add-repository ppa:yannubuntu/boot-repair
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get install -y boot-repair
</span><span class='line'>
</span><span class='line'>boot-repair</span></code></pre></td></tr></table></div></figure>


<p>但是Grub菜单里的Windows系统没有了，所有又安装了grub-customizer进行调整：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Open terminal either via Ctrl+Alt+T or by searching for ‘terminal’ from app launcher. When it opens, run command to add the PPA:
</span><span class='line'>
</span><span class='line'>sudo add-apt-repository ppa:danielrichter2007/grub-customizer
</span><span class='line'>
</span><span class='line'>Input your password (no visual feedback while typing) when it prompts and hit Enter to continue.
</span><span class='line'>
</span><span class='line'>grub-customizer-ppa
</span><span class='line'>
</span><span class='line'>2. After added the PPA, run commands one by one to refresh package cache and install Grub Customizer:
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'>sudo apt-get install grub-customizer
</span><span class='line'>
</span><span class='line'>Once installed, launch the software from your application launcher and enjoy!
</span><span class='line'>Uninstall:
</span><span class='line'>
</span><span class='line'>To remove the software, run command in terminal:
</span><span class='line'>
</span><span class='line'>sudo apt-get remove --autoremove grub-customizer</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reset-env-for-running-process]]></title>
    <link href="http://iskey.github.io/blog/2019/05/28/reset-env-for-running-process/"/>
    <updated>2019-05-28T00:07:38+08:00</updated>
    <id>http://iskey.github.io/blog/2019/05/28/reset-env-for-running-process</id>
    <content type="html"><![CDATA[<h3>LD_PRELOAD注入</h3>

<p>linux环境变量LD_PRELOAD可以指定程序运行时优先加载的动态链接库，在该环境变量路径下的动态链接库中的符号具有最高优先级。
通过自己编写malloc/free动态链接库，并在LD_PRELOAD环境变量中指定该路径，就可以替换libc.so中的malloc/free函数。</p>

<p>注：该方法对静态链接的程序无效。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) attach process_id
</span><span class='line'>(gdb) call putenv ("LD_PRELOAD=/mylib.so")
</span><span class='line'>(gdb) detach</span></code></pre></td></tr></table></div></figure>


<h3>使用libc库的装饰器</h3>

<h3>使用宏/函数替换malloc/free</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables时间规则匹配]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/iptables-with-time/"/>
    <updated>2018-04-27T19:25:48+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/iptables-with-time</id>
    <content type="html"><![CDATA[<p>1、每天固定时间段匹配</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">timestart</span> <span class="mi">09</span><span class="o">:</span><span class="mi">40</span> <span class="o">--</span><span class="n">timestop</span> <span class="mi">09</span><span class="o">:</span><span class="mi">59</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、按周固定时间段匹配</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">timestart</span> <span class="mi">09</span><span class="o">:</span><span class="mi">40</span> <span class="o">--</span><span class="n">timestop</span> <span class="mi">09</span><span class="o">:</span><span class="mi">59</span> <span class="o">--</span><span class="n">weekdays</span> <span class="n">Wed</span><span class="o">,</span><span class="n">Thu</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、按固定日期匹配，注这里比较特殊，可以看见下面的时间是17点不是9点，是因为时区的原因，要差8小时。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">I</span> <span class="n">FORWARD</span> <span class="o">-</span><span class="n">s</span> <span class="mf">172.17</span><span class="o">.</span><span class="mf">1.132</span> <span class="o">-</span><span class="n">d</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.119</span> <span class="o">-</span><span class="n">m</span> <span class="n">time</span> <span class="o">--</span><span class="n">datestart</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">19</span><span class="nl">T17:</span><span class="mi">40</span><span class="o">:</span><span class="mi">08</span> <span class="o">--</span><span class="n">datestop</span> <span class="mi">2014</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">19</span><span class="nl">T17:</span><span class="mi">59</span><span class="o">:</span><span class="mi">50</span> <span class="o">-</span><span class="n">j</span> <span class="n">DROP</span>
</span></code></pre></td></tr></table></div></figure>


<p>附上帮助说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">time</span> <span class="n">match</span> <span class="nl">options:</span>
</span><span class='line'>    <span class="o">--</span><span class="n">datestart</span> <span class="n">time</span>     <span class="n">Start</span> <span class="n">and</span> <span class="n">stop</span> <span class="n">time</span><span class="o">,</span> <span class="n">to</span> <span class="n">be</span> <span class="n">given</span> <span class="n">in</span> <span class="n">ISO</span> <span class="mi">8601</span>
</span><span class='line'>    <span class="o">--</span><span class="n">datestop</span> <span class="nf">time</span>      <span class="o">(</span><span class="n">YYYY</span><span class="o">[-</span><span class="n">MM</span><span class="o">[-</span><span class="n">DD</span><span class="o">[</span><span class="n">Thh</span><span class="o">[:</span><span class="n">mm</span><span class="o">[:</span><span class="n">ss</span><span class="o">]]]]])</span>
</span><span class='line'>    <span class="o">--</span><span class="n">timestart</span> <span class="n">time</span>     <span class="n">Start</span> <span class="n">and</span> <span class="n">stop</span> <span class="nf">daytime</span> <span class="o">(</span><span class="nl">hh:</span><span class="n">mm</span><span class="o">[:</span><span class="n">ss</span><span class="o">])</span>
</span><span class='line'>    <span class="o">--</span><span class="n">timestop</span> <span class="nf">time</span>      <span class="o">(</span><span class="n">between</span> <span class="mi">00</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">and</span> <span class="mi">23</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">59</span><span class="o">)</span>
</span><span class='line'><span class="o">[!]</span> <span class="o">--</span><span class="n">monthdays</span> <span class="n">value</span>    <span class="n">List</span> <span class="n">of</span> <span class="n">days</span> <span class="n">on</span> <span class="n">which</span> <span class="n">to</span> <span class="n">match</span><span class="o">,</span> <span class="n">separated</span> <span class="n">by</span> <span class="nf">comma</span>
</span><span class='line'>                         <span class="o">(</span><span class="n">Possible</span> <span class="nl">days:</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">31</span><span class="o">;</span> <span class="n">defaults</span> <span class="n">to</span> <span class="n">all</span><span class="o">)</span>
</span><span class='line'><span class="o">[!]</span> <span class="o">--</span><span class="n">weekdays</span> <span class="n">value</span>     <span class="n">List</span> <span class="n">of</span> <span class="n">weekdays</span> <span class="n">on</span> <span class="n">which</span> <span class="n">to</span> <span class="n">match</span><span class="o">,</span> <span class="n">sep</span><span class="o">.</span> <span class="n">by</span> <span class="nf">comma</span>
</span><span class='line'>                         <span class="o">(</span><span class="n">Possible</span> <span class="nl">days:</span> <span class="n">Mon</span><span class="o">,</span><span class="n">Tue</span><span class="o">,</span><span class="n">Wed</span><span class="o">,</span><span class="n">Thu</span><span class="o">,</span><span class="n">Fri</span><span class="o">,</span><span class="n">Sat</span><span class="o">,</span><span class="n">Sun</span> <span class="n">or</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">7</span>
</span><span class='line'>                         <span class="n">Defaults</span> <span class="n">to</span> <span class="n">all</span> <span class="n">weekdays</span><span class="o">.)</span>
</span><span class='line'>    <span class="o">--</span><span class="n">localtz</span><span class="o">/--</span><span class="n">utc</span>      <span class="n">Time</span> <span class="n">is</span> <span class="n">interpreted</span> <span class="n">as</span> <span class="n">UTC</span><span class="o">/</span><span class="n">local</span> <span class="n">time</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重定向外部连接到本地环回地址]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost/"/>
    <updated>2018-04-27T17:12:37+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost</id>
    <content type="html"><![CDATA[<p>背景：在本地<code>localhost</code>搭建了一个Httpserver，监听在<code>4000</code>端口，现在想通过<code>eth0</code>在不改动代码的情况下对外发布服务。</p>

<p>最先想到的就是端口映射，<code>rinetd</code>服务，使用也很简单，直接配置外部ip到环回地址的映射就可以了:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">root</span><span class="nd">@lfgphicpra39095</span><span class="o">:/</span><span class="n">usr1</span><span class="o">/</span><span class="err">#</span> <span class="n">cat</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">rinetd</span><span class="o">.</span><span class="na">conf</span>
</span><span class='line'><span class="o">......</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">forwarding</span> <span class="n">rules</span> <span class="n">come</span> <span class="n">here</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">you</span> <span class="n">may</span> <span class="n">specify</span> <span class="n">allow</span> <span class="n">and</span> <span class="n">deny</span> <span class="n">rules</span> <span class="n">after</span> <span class="n">a</span> <span class="n">specific</span> <span class="n">forwarding</span> <span class="n">rule</span>
</span><span class='line'><span class="err">#</span> <span class="n">to</span> <span class="n">apply</span> <span class="n">to</span> <span class="n">only</span> <span class="n">that</span> <span class="n">forwarding</span> <span class="n">rule</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span> <span class="n">bindadress</span>    <span class="n">bindport</span>  <span class="n">connectaddress</span>  <span class="n">connectport</span>
</span><span class='line'>
</span><span class='line'><span class="o">**</span><span class="mf">10.252</span><span class="o">.</span><span class="mf">64.154</span>  <span class="mi">4000</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="mi">4000</span><span class="o">**</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样一来，一旦eth0的地址发生了改变，就需要再修改配置文件。</p>

<p>另一种方法就是通过iptables就行重定向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">iptables</span> <span class="o">-</span><span class="n">t</span> <span class="n">nat</span> <span class="o">-</span><span class="n">A</span> <span class="n">PREROUTING</span> <span class="o">-</span><span class="n">i</span> <span class="n">eth0</span> <span class="o">-</span><span class="n">p</span> <span class="n">tcp</span> <span class="o">--</span><span class="n">dport</span> <span class="mi">4000</span> <span class="o">-</span><span class="n">j</span> <span class="n">DNAT</span> <span class="o">--</span><span class="n">to</span><span class="o">-</span><span class="n">destination</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置后，外部访问不通，通过抓包分析，协议栈没有回复<code>syc+ack</code>报文，看来是路由的问题。</p>

<p>内核协议栈会丢弃路由 对于源地址或目的地址为<code>loopback</code>地址的，内核协议栈的认为这是一个<code>martian packet</code>，直接丢弃。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">route_localnet</span> <span class="err">–</span> <span class="nl">BOOLEAN:</span> <span class="n">Do</span> <span class="n">not</span> <span class="n">consider</span> <span class="n">loopback</span> <span class="n">addresses</span> <span class="n">as</span> <span class="n">martian</span> <span class="n">source</span> <span class="n">or</span> <span class="n">destination</span> <span class="k">while</span> <span class="n">routing</span><span class="o">.</span> <span class="n">This</span> <span class="n">enables</span> <span class="n">the</span> <span class="n">use</span> <span class="n">of</span> <span class="mi">127</span><span class="o">/</span><span class="mi">8</span> <span class="k">for</span> <span class="n">local</span> <span class="n">routing</span> <span class="nf">purposes</span> <span class="o">(</span><span class="k">default</span> <span class="n">FALSE</span><span class="o">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个特性是对每个网卡设备生效的，所以只需要在<code>eth0</code>上开启环回地址路由就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">echo</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">net</span><span class="o">/</span><span class="n">ipv4</span><span class="o">/</span><span class="n">conf</span><span class="o">/</span><span class="n">eth0</span><span class="o">/</span><span class="n">route_localnet</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux sysctl.conf 优化]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/linux-sysctl-dot-conf-you-hua/"/>
    <updated>2018-04-27T09:32:43+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/linux-sysctl-dot-conf-you-hua</id>
    <content type="html"><![CDATA[<p>可以通过/etc/sysctl.conf控制和配置Linux内核及网络设置。</p>

<ul>
<li>避免放大攻击</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">icmp_echo_ignore_broadcasts</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启恶意icmp错误消息保护</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">icmp_ignore_bogus_error_responses</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启SYN洪水攻击保护</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_syncookies</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启并记录欺骗，源路由和重定向包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">log_martians</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">log_martians</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>处理无源路由的包</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">accept_source_route</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_source_route</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启反向路径过滤</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">rp_filter</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">rp_filter</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>确保无人能修改路由表</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">accept_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">secure_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">secure_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不充当路由器</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">ip_forward</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">all</span><span class="o">.</span><span class="na">send_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">send_redirects</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开启execshild</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">exec</span><span class="o">-</span><span class="n">shield</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">randomize_va_space</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>IPv6设置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">router_solicitations</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_rtr_pref</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_pinfo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">accept_ra_defrtr</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">autoconf</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">dad_transmits</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv6</span><span class="o">.</span><span class="na">conf</span><span class="o">.</span><span class="na">default</span><span class="o">.</span><span class="na">max_addresses</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>优化LB使用的端口</p></li>
<li><p>增加系统文件描述符限制</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">fs</span><span class="o">.</span><span class="na">file</span><span class="o">-</span><span class="n">max</span> <span class="o">=</span> <span class="mi">65535</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>允许更多的PIDs (减少滚动翻转问题); may break some programs 32768</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">kernel</span><span class="o">.</span><span class="na">pid_max</span> <span class="o">=</span> <span class="mi">65536</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加系统IP端口限制</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">ip_local_port_range</span> <span class="o">=</span> <span class="mi">2000</span> <span class="mi">65000</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加TCP最大缓冲区大小</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_rmem</span> <span class="o">=</span> <span class="mi">4096</span> <span class="mi">87380</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_wmem</span> <span class="o">=</span> <span class="mi">4096</span> <span class="mi">87380</span> <span class="mi">8388608</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加Linux自动调整TCP缓冲区限制</li>
<li>最小，默认和最大可使用的字节数</li>
<li><p>最大值不低于4MB，如果你使用非常高的BDP路径可以设置得更高</p></li>
<li><p>Tcp窗口等</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">rmem_max</span> <span class="o">=</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">wmem_max</span> <span class="o">=</span> <span class="mi">8388608</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">netdev_max_backlog</span> <span class="o">=</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">net</span><span class="o">.</span><span class="na">ipv4</span><span class="o">.</span><span class="na">tcp_window_scaling</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Tips to Push Your Git Skills to the Next Level]]></title>
    <link href="http://iskey.github.io/blog/2018/04/26/10-tips-to-push-your-git-skills-to-the-next-level/"/>
    <updated>2018-04-26T23:38:05+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/26/10-tips-to-push-your-git-skills-to-the-next-level</id>
    <content type="html"><![CDATA[<p>Recently we published a couple of tutorials to get you familiar with Git basics and using Git in a team environment. The commands that we discussed were about enough to help a developer survive in the Git world. In this post, we will try to explore how to manage your time effectively and make full use of the features that Git provides.</p>

<p>Note: Some commands in this article include part of the command in square brackets (e.g. git add -p [file_name]). In those examples, you would insert the necessary number, identifier, etc. without the square brackets.</p>

<h3>1.  Git Auto Completion</h3>

<p>If you run Git commands through the command line, it’s a tiresome task to type in the commands manually every single time. To help with this, you can enable auto completion of Git commands within a few minutes.
To get the script, run the following in a Unix system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">cd</span> <span class="o">~</span>
</span><span class='line'><span class="n">curl</span> <span class="nl">https</span><span class="p">:</span><span class="c1">//raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, add the following lines to your ~/.bash_profile file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="o">-</span><span class="n">f</span> <span class="o">~/</span><span class="p">.</span><span class="n">git</span><span class="o">-</span><span class="n">completion</span><span class="p">.</span><span class="n">bash</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="p">.</span> <span class="o">~/</span><span class="p">.</span><span class="n">git</span><span class="o">-</span><span class="n">completion</span><span class="p">.</span><span class="n">bash</span>
</span><span class='line'><span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although I have mentioned this earlier, I can not stress it enough: If you want to use the features of Git fully, you should definitely shift to the command line interface!</p>

<h3>2.  Ignoring Files in Git</h3>

<p>Are you tired of compiled files (like .pyc) appearing in your Git repository? Or are you so fed up that you have added them to Git? Look no further, there is a way through which you can tell Git to ignore certain files and directories altogether. Simply create a file with the name .gitignore and list the files and directories that you don’t want Git to track. You can make exceptions using the exclamation mark(!).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">*</span><span class="p">.</span><span class="n">pyc</span>
</span><span class='line'><span class="o">*</span><span class="p">.</span><span class="n">exe</span>
</span><span class='line'><span class="n">my_db_config</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>!main.pyc</p>

<h3>3.  Who Messed With My Code?</h3>

<p>It’s the natural instinct of human beings to blame others when something goes wrong. If your production server is broke, it’s very easy to find out the culprit — just do a git blame. This command shows you the author of every line in a file, the commit that saw the last change in that line, and the timestamp of the commit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">blame</span> <span class="p">[</span><span class="n">file_name</span><span class="p">]</span>
</span><span class='line'><span class="n">git</span> <span class="n">blame</span> <span class="n">demonstration</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in the screenshot below, you can see how this command would look on a bigger repository:</p>

<p>git blame on the ATutor repository</p>

<h3>4. Review History of the Repository</h3>

<p>We had a look at the use of git log in a previous tutorial, however, there are three options that you should know about.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">--</span><span class="n">oneline</span> <span class="err">–</span> <span class="n">Compresses</span> <span class="n">the</span> <span class="n">information</span> <span class="n">shown</span> <span class="n">beside</span> <span class="n">each</span> <span class="n">commit</span> <span class="n">to</span> <span class="n">a</span> <span class="n">reduced</span> <span class="n">commit</span> <span class="n">hash</span> <span class="n">and</span> <span class="n">the</span> <span class="n">commit</span> <span class="n">message</span><span class="p">,</span> <span class="n">all</span> <span class="n">shown</span> <span class="n">in</span> <span class="n">a</span> <span class="n">single</span> <span class="n">line</span><span class="p">.</span>
</span><span class='line'><span class="o">--</span><span class="n">graph</span> <span class="err">–</span> <span class="n">This</span> <span class="n">option</span> <span class="n">draws</span> <span class="n">a</span> <span class="n">text</span><span class="o">-</span><span class="n">based</span> <span class="n">graphical</span> <span class="n">representation</span> <span class="n">of</span> <span class="n">the</span> <span class="n">history</span> <span class="n">on</span> <span class="n">the</span> <span class="n">left</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">of</span> <span class="n">the</span> <span class="n">output</span><span class="p">.</span> <span class="n">It</span><span class="err">’</span><span class="n">s</span> <span class="n">of</span> <span class="n">no</span> <span class="n">use</span> <span class="k">if</span> <span class="n">you</span> <span class="n">are</span> <span class="n">viewing</span> <span class="n">the</span> <span class="n">history</span> <span class="k">for</span> <span class="n">a</span> <span class="n">single</span> <span class="n">branch</span><span class="p">.</span>
</span><span class='line'><span class="o">--</span><span class="n">all</span> <span class="err">–</span> <span class="n">Shows</span> <span class="n">the</span> <span class="n">history</span> <span class="n">of</span> <span class="n">all</span> <span class="n">branches</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here’s what a combination of the options looks like:
Use of git log with all, graph and oneline</p>

<h3>5. Never Lose Track of a Commit</h3>

<p>Let’s say you committed something you didn’t want to and ended up doing a hard reset to come back to your previous state. Later, you realize you lost some other information in the process and want to get it back, or at least view it. This is where git reflog can help.</p>

<p>A simple git log shows you the latest commit, its parent, its parent’s parent, and so on. However, git reflog is a list of commits that the head was pointed to. Remember that it’s local to your system; it’s not a part of your repository and not included in pushes or merges.</p>

<p>If I run git log, I get the commits that are a part of my repository:</p>

<p>Project history</p>

<p>However, a git reflog shows a commit (b1b0ee9 – HEAD@{4}) that was lost when I did a hard reset:</p>

<p>Git reflog</p>

<h3>6. Staging Parts of a Changed File for a Commit</h3>

<p>It is generally a good practice to make feature-based commits, that is, each commit must represent a feature or a bug fix. Consider what would happen if you fixed two bugs, or added multiple features without committing the changes. In such a situation situation, you could put the changes in a single commit. But there is a better way: Stage the files individually and commit them separately.</p>

<p>Let’s say you’ve made multiple changes to a single file and want them to appear in separate commits. In that case, we add files by prefixing -p to our add commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">-</span><span class="n">p</span> <span class="p">[</span><span class="n">file_name</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s try to demonstrate the same. I have added three new lines to file_name and I want only the first and third lines to appear in my commit. Let’s see what a git diff shows us.</p>

<p>Changes in repo</p>

<p>And let’s see what happes when we prefix a -p to our add command.</p>

<p>Running add with -p</p>

<p>It seems that Git assumed that all the changes were a part of the same idea, thereby grouping it into a single hunk. You have the following options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Enter</span> <span class="n">y</span> <span class="n">to</span> <span class="n">stage</span> <span class="n">that</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">n</span> <span class="n">to</span> <span class="n">not</span> <span class="n">stage</span> <span class="n">that</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">e</span> <span class="n">to</span> <span class="n">manually</span> <span class="n">edit</span> <span class="n">the</span> <span class="n">hunk</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">d</span> <span class="n">to</span> <span class="n">exit</span> <span class="n">or</span> <span class="n">go</span> <span class="n">to</span> <span class="n">the</span> <span class="n">next</span> <span class="n">file</span><span class="p">.</span>
</span><span class='line'><span class="n">Enter</span> <span class="n">s</span> <span class="n">to</span> <span class="n">split</span> <span class="n">the</span> <span class="n">hunk</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our case, we definitely want to split it into smaller parts to selectively add some and ignore the rest.</p>

<p>Adding all hunks</p>

<p>As you can see, we have added the first and third lines and ignored the second. You can then view the status of the repository and make a commit.</p>

<p>Repository after selectively adding a file</p>

<h3>7. Squash Multiple Commits</h3>

<p>When you submit your code for review and create a pull request (which happens often in open source projects), you might be asked to make a change to your code before it’s accepted. You make the change, only to be asked to change it yet again in the next review. Before you know it, you have a few extra commits. Ideally, you could squash them into one using the rebase command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="n">HEAD</span><span class="o">~</span><span class="p">[</span><span class="n">number_of_commits</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to squash the last two commits, the command that you run is the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>On running this command, you are taken to an interactive interface listing the commits and asking you which ones to squash. Ideally, you pick the latest commit and squash the old ones.</p>

<p>Git squash interactive</p>

<p>You are then asked to provide a commit message to the new commit. This process essentially re-writes your commit history.</p>

<p>Adding a commit message</p>

<h3>8. Stash Uncommitted Changes</h3>

<p>Let’s say you are working on a certain bug or a feature, and you are suddenly asked to demonstrate your work. Your current work is not complete enough to be committed, and you can’t give a demonstration at this stage (without reverting the changes). In such a situation, git stash comes to the rescue. Stash essentially takes all your changes and stores them for further use. To stash your changes, you simply run the following-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check the list of stashes, you can run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stash list</p>

<p>If you want to un-stash and recover the uncommitted changes, you apply the stash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the last screenshot, you can see that each stash has an indentifier, a unique number (although we have only one stash in this case). In case you want to apply only selective stashes, you add the specific identifier to the apply command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After un-stashing changes</p>

<h3>9. Check for Lost Commits</h3>

<p>Although reflog is one way of checking for lost commits, it’s not feasible in large repositories. That is when the fsck (file system check) command comes into play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">fsck</span> <span class="o">--</span><span class="n">lost</span><span class="o">-</span><span class="n">found</span>
</span></code></pre></td></tr></table></div></figure>


<p>Git fsck results</p>

<p>Here you can see a lost commit. You can check the changes in the commit by running git show [commit_hash] or recover it by running git merge [commit_hash].</p>

<p>git fsck has an advantage over reflog. Let’s say you deleted a remote branch and then cloned the repository. With fsck you can search for and recover the deleted remote branch.</p>

<h3>10. Cherry Pick</h3>

<p>I have saved the most elegant Git command for the last. The cherry-pick command is by far my favorite Git command, because of its literal meaning as well as its utility!</p>

<p>In the simplest of terms, cherry-pick is picking a single commit from a different branch and merging it with your current one. If you are working in a parallel fashion on two or more branches, you might notice a bug that is present in all branches. If you solve it in one, you can cherry pick the commit into the other branches, without messing with other files or commits.</p>

<p>Let’s consider a scenario where we can apply this. I have two branches and I want to cherry-pick the commit b20fd14: Cleaned junk into another one.</p>

<p>Before cherry pick</p>

<p>I switch to the branch into which I want to cherry-pick the commit, and run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">git</span> <span class="n">cherry</span><span class="o">-</span><span class="n">pick</span> <span class="p">[</span><span class="n">commit_hash</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>After cherry pick</p>

<p>Although we had a clean cherry-pick this time, you should know that this command can often lead to conflicts, so use it with care.
Conclusion</p>

<p>With this, we come to the end of our list of tips that I think can help you take your Git skills to a new level. Git is the best out there and it can accomplish anything you can imagine. Therefore, always try to challenge yourself with Git. Chances are, you will end up learning something new!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell文件描述符操作]]></title>
    <link href="http://iskey.github.io/blog/2018/04/24/shell-fds/"/>
    <updated>2018-04-24T10:39:25+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/24/shell-fds</id>
    <content type="html"><![CDATA[<p>shell在产生一个新进程后，新进程的前三个文件描述符都默认指向三个相关文件。
这三个文件描述符对应的数组下标分别为<strong>0，1，2</strong>。</p>

<pre><code>- 0  对应的文件叫做标准输入（stdin）
- 1  对应的文件叫做标准输出（stdout）
- 2  对应的文件叫做标准报错(stderr)
</code></pre>

<p>但是实际上，默认跟人交互的<strong>输入是键盘、鼠标，输出是显示器屏幕</strong>，这些硬件设备对于程序来说都是不认识的，所以操作系统借用了原来“终端”的概念，将键盘鼠标显示器都表现成一个终端文件。于是<strong>stdin、stdout和stderr</strong>就最重都指向了这所谓的终端文件上。</p>

<p>于是，从键盘输入的内容，进程可以从标准输入的0号文件描述符读取，正常的输出内容从1号描述符写出，报错信息被定义为从2号描述符写出。这就是标准输入、标准输出和标准报错对应的描述符编号是0、1、2的原因。这也是为什么对报错进行重定向要使用2>的原因(其实1>也是可以用的)。</p>

<p>明白了以上内容之后，很多重定向的数字魔法就好理解了，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">docker</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">sudoers</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">lvm</span><span class="o">/</span><span class="n">cache</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="n">openpgp</span><span class="o">-</span><span class="n">revocs</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="kd">private</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="n">v1</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">polkit</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">rules</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于只看报错信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="mi">2</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="k">default</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pam</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>这相当于只看正确输出信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="o">&amp;&gt;</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="kc">null</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有输出都不看，也可以写成”>&amp;”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">find</span> <span class="o">/</span><span class="n">etc</span> <span class="o">-</span><span class="n">name</span> <span class="n">passwd</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="k">default</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">docker</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pam</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">sudoers</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">lvm</span><span class="o">/</span><span class="n">cache</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="n">openpgp</span><span class="o">-</span><span class="n">revocs</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pacman</span><span class="o">.</span><span class="na">d</span><span class="o">/</span><span class="n">gnupg</span><span class="o">/</span><span class="kd">private</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="n">v1</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="nl">find:</span> <span class="err">‘</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">polkit</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">rules</span><span class="o">.</span><span class="na">d</span><span class="err">’</span><span class="o">:</span> <span class="n">Permission</span> <span class="n">denied</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span></code></pre></td></tr></table></div></figure>


<p>将标准报错输出的，重定向到标准输出再输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">echo</span> <span class="n">hello</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="n">hello</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">echo</span> <span class="n">hello2</span> <span class="o">&gt;&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span><span class='line'><span class="n">hello</span>
</span><span class='line'><span class="n">hello2</span>
</span></code></pre></td></tr></table></div></figure>


<p>“>>”表示追加重定向。</p>

<p>相信大家对<strong>&amp;>>、1>&amp;2、？2>&amp;3、6>&amp;8、>>file 2>&amp;1</strong>这样的写法应该也都能理解了。
进程可以打开多个文件，多个描述符之间都可以进行重定向。当然，输入也可以，比如：3&lt;表示从描述符3读取。</p>

<p>下面我们罗列一下其他重定向符号和用法：
Here Document：
语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;&lt;[-]</span><span class="n">word</span>
</span><span class='line'>    <span class="n">here</span><span class="o">-</span><span class="n">document</span>
</span><span class='line'><span class="n">delimiter</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一种特殊的输入重定向，重定向的内容并不是来自于某个文件，而是从当前输入读取，直到输入中写入了delimiter字符标记结束。用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">hello</span> <span class="n">world</span><span class="o">!</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">I</span> <span class="n">am</span> <span class="n">zorro</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">sadfsdf</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">ertert</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">eof</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">hello</span> <span class="n">world</span><span class="o">!</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">zorro</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">sadfsdf</span>
</span><span class='line'><span class="n">ertert</span>
</span><span class='line'><span class="n">eof</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子可以看到，最后cat输出的内容都是在上面写入的内容，而且内容中不包括EOF，因为EOF是标记输入结束的字符串。这个功能在脚本中通常可以用于需要交互式处理的某些命令的输入和文件编辑，比如想在脚本中使用fdisk命令新建一个分区：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">root</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="err">#</span> <span class="n">cat</span> <span class="n">fdisk</span><span class="o">.</span><span class="na">sh</span>
</span><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="n">fdisk</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">n</span>
</span><span class='line'><span class="n">p</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">w</span>
</span><span class='line'><span class="n">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然这个脚本大家千万不要乱执行，可能会修改你的分区表。其中要输入的内容，相信熟悉fdisk命令的人应该都能明白，我就不多解释了。
Here strings：
语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;&lt;&lt;</span><span class="n">word</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">prime</span><span class="o">]</span><span class="n">$</span> <span class="n">cat</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">asdasdasd</span>
</span><span class='line'><span class="n">asdasdasd</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实就是将&lt;&lt;&lt;符号后面的字符串当成要输入的内容给cat，而不是定向一个文件描述符。这样是不是就相当于把cat当echo用了？</p>

<ul>
<li>文件描述符的复制：</li>
</ul>


<p><strong>复制输入文件描述符：[n]&lt;&amp;word</strong></p>

<p>如果n没有指定数字，则默认复制0号文件描述符。
word一般写一个已经打开的并且用来作为输入的描述符数字，表示将制订的n号描述符在制定的描述符上复制一个。
如果word写的是“-”符号，则表示关闭这个文件描述符。如果word指定的不是一个用来输入的文件描述符，则会报错。</p>

<p><strong>复制输出文件描述符：[n]>&amp;word</strong></p>

<p>复制一个输出的描述符，字段描述参考上面的输入复制，例子上面已经讲过了。这里还需要知道的就是1>&amp;-表示关闭1号描述符。</p>

<ul>
<li>文件描述符的移动：</li>
</ul>


<p><strong>移动输入描述符：[n]&lt;&amp;digit-</strong>
<strong>移动输出描述符：[n]>&amp;digit-</strong></p>

<p>这两个符号的意思都是将原有描述符在新的描述符编号上打开，并且关闭原有描述符。</p>

<ul>
<li>描述符新建：</li>
</ul>


<p><strong>新建一个用来输入的描述符：[n]&lt;word</strong>
<strong>新建一个用来输出的描述符：[n]>word</strong>
<strong>新建一个用来输入和输出的描述符：[n]&lt;>word</strong></p>

<p>word都应该写一个文件路径，用来表示这个文件描述符的关联文件是谁。</p>

<p>下面我们来看相关的编程例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">example</span> <span class="mi">1</span>
</span><span class='line'><span class="err">#</span><span class="n">打开3号fd用来输入</span><span class="err">，</span><span class="n">关联文件为</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&lt;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span>
</span><span class='line'><span class="err">#</span><span class="n">让3号描述符成为标准输入</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">0</span><span class="o">&lt;&amp;</span><span class="mi">3</span>
</span><span class='line'><span class="err">#</span><span class="n">此时cat的输入将是</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span><span class="err">，</span><span class="n">会在屏幕上显示出</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd的内容</span><span class="err">。</span>
</span><span class='line'><span class="n">cat</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">关闭3号描述符</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;&amp;-</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="n">example</span> <span class="mi">2</span>
</span><span class='line'><span class="err">#</span><span class="n">打开3号和4号描述符作为输出</span><span class="err">，</span><span class="n">并且分别关联文件</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stdout</span>
</span><span class='line'>
</span><span class='line'><span class="n">exec</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stderr</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">将标准输入关联到3号描述符</span><span class="err">，</span><span class="n">关闭原来的1号fd</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">1</span><span class="o">&gt;&amp;</span><span class="mi">3</span><span class="o">-</span>
</span><span class='line'><span class="err">#</span><span class="n">将标准报错关联到4号描述符</span><span class="err">，</span><span class="n">关闭原来的2号fd</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">4</span><span class="o">-</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">这个find命令的所有正常输出都会写到</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stdout文件中</span><span class="err">，</span><span class="n">错误输出都会写到</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">stderr文件中</span><span class="err">。</span>
</span><span class='line'><span class="n">find</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span> <span class="o">-</span><span class="n">name</span> <span class="s">&quot;passwd&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="n">关闭两个描述符</span><span class="err">。</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">3</span><span class="o">&gt;&amp;-</span>
</span><span class='line'><span class="n">exec</span> <span class="mi">4</span><span class="o">&gt;&amp;-</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上脚本要注意的地方是，一般输入输出重定向都是放到命令后面作为后缀使用，所以如果单纯改变脚本的描述符，需要在前面加exec命令。这种用法也叫做描述符魔术。某些特殊符号还有一些特殊用法，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">bash</span><span class="o">]</span><span class="n">$</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示清空文件，当然也可以写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">zorro</span><span class="nd">@zorrozou</span><span class="o">-</span><span class="n">pc0</span> <span class="n">bash</span><span class="o">]</span><span class="n">$</span> <span class="o">:&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为”:”是一个内建命令，跟true是同样的功能，所以没有任何输出，所以这个命令清空文件的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[建立IP隧道]]></title>
    <link href="http://iskey.github.io/blog/2018/03/08/ip-tunnel/"/>
    <updated>2018-03-08T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2018/03/08/ip-tunnel</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>  有2个相互隔离的网络，拓扑见下图。ServerA想直接访问到ServerB连接的私有网络</p>

<pre><code>                    |
1.1.1.1               2.2.2.2       |
+---------+  Public   +---------+   | Private
| ServerA +-----------+ ServerB +-------+
+---------+  Network  +---------+   | Network
                    |
                    | 192.168.1.0/24 
</code></pre>

<h2>实现</h2>

<p>  通过ip tunnel建立ipip隧道，再通过iptables进行nat，便可以实现。</p>

<h3>Step 1. 建立ip隧道</h3>

<p>  ServerA配置iptunnel,并给tunnel接口配置上ip</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#ip tunnel add a2b mode ipip remote 2.2.2.2 local 1.1.1.1
</span><span class='line'>
</span><span class='line'>#ifconfig a2b 192.168.2.1 netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>  ServerB配置iptunnel,并给tunnel接口配置上ip</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#ip tunnel add a2b mode ipip remote 1.1.1.1 local 2.2.2.2
</span><span class='line'>
</span><span class='line'>#ifconfig a2b 192.168.2.2 netmask 255.255.255.0</span></code></pre></td></tr></table></div></figure>


<p>  隧道配置完成后，请在ServerA上192.168.2.2，看是否可以ping通，ping通则继续，ping不通需要再看一下上面的命令执行是否有报错</p>

<h3>Step 2. 添加路由和nat</h3>

<p>  ServerA上，添加到192.168.1.0/24的路由</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#/sbin/route add -net 192.168.1.0/24 gw 192.168.2.2</span></code></pre></td></tr></table></div></figure>


<p>  ServerB上，添加iptables nat，将ServerA过了访问192.168.1.0/24段的包进行NAT，并开启ip foward功能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#iptables -t nat -A POSTROUTING -s 192.168.2.1 -d 192.168.1.0/24 -j MASQUERADE
</span><span class='line'>
</span><span class='line'>#sysctl -w net.ipv4.ip_forward=1
</span><span class='line'>
</span><span class='line'>#sed -i '/net.ipv4.ip_forward/ s/0/1/'  /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure>


<p>  至此，完成了两端的配置，ServerA可以直接访问ServerB 所接的私网了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TODO]]></title>
    <link href="http://iskey.github.io/blog/2018/03/07/TODO/"/>
    <updated>2018-03-07T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2018/03/07/TODO</id>
    <content type="html"><![CDATA[<h3>TODO</h3>

<p><a href="http://www.adminsehow.com/2011/09/iptables-packet-traverse-map">Netfilter</a></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/tables_traverse.jpg" alt="1" /></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/packet_flow9.png" alt="2" /></p>

<hr />

<p><img src="http://www.adminsehow.com/wp-content/uploads/2011/09/iptables.png" alt="3" /></p>

<hr />

<p><a href="http://liu2lin600.github.io/2016/07/23/iptables%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/">http://liu2lin600.github.io/2016/07/23/iptables%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/</a></p>

<p><a href="http://www.brendangregg.com/overview.html">http://www.brendangregg.com/overview.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Mode Linux]]></title>
    <link href="http://iskey.github.io/blog/2017/03/06/user_mode_linux/"/>
    <updated>2017-03-06T21:12:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/03/06/user_mode_linux</id>
    <content type="html"><![CDATA[<p>以前研究内核，总是要依靠开发板或者自己编译内核．近来留意到了ＵＭＬ，才发现linux可以像进程一样跑起来，而且跑起来不不难，深感惭愧，以下是简单的使用方法介绍．</p>

<h2>简介</h2>

<p>用户模式Linux（User ModeLinux，UML）不同于其他Linux虚拟化项目，UML尽量将它自己作为一个普通的程序。从Linux2.6.9版本起，用户模式Linux（User mode Linux,UML）已随Linux内核源代码一起发布，它存放于arch/um目录下。编译好UML的内核之后，可直接用gdb运行编译好的内核并进行调试。</p>

<p>参考：<a href="http://uml.devloop.org.uk/howto.html">http://uml.devloop.org.uk/howto.html</a></p>

<h2>编译内核</h2>

<h3>以-O2编译内核</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=um defconfig
</span><span class='line'>make menuconfig ARCH=um
</span><span class='line'>make ARCH=um</span></code></pre></td></tr></table></div></figure>


<p><a href="http://user-mode-linux.sourceforge.net/source.html">参考</a></p>

<h3>以-O0编译内核</h3>

<p><a href="http://blog.chinaunix.net/uid-234303-id-2425015.html">参考</a></p>

<h2>根文件系统</h2>

<ul>
<li><p><a href="http://fs.devloop.org.uk/">下载现成的根文件系统</a></p></li>
<li><p><a href="http://fancymore.com/reading/linux-kernel-debugging.html">制作根文件系统</a></p></li>
</ul>


<h2>调试</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gdb ./linux   
</span><span class='line'>(gdb) handle SIGSEGV pass nostop noprint   
</span><span class='line'>(gdb) handle SIGUSR1 pass nostop noprint 
</span><span class='line'>(gdb) start ubd0=/root/srcpkg/filesystem/CentOS6.x-x86-root_fs mem=256m</span></code></pre></td></tr></table></div></figure>


<p><code>http://blog.csdn.net/ztz0223/article/details/7874759</code></p>

<p>五、常见问题</p>

<p>1、
<a href="http://moodlearchive.epfl.ch/2010-2011/mod/forum/discuss.php?d=108781">http://moodlearchive.epfl.ch/2010-2011/mod/forum/discuss.php?d=108781</a></p>

<p>2、
<a href="http://www.lenky.info/archives/2012/04/1471">http://www.lenky.info/archives/2012/04/1471</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netfilter Example]]></title>
    <link href="http://iskey.github.io/blog/2017/03/02/netfilter_example/"/>
    <updated>2017-03-02T21:42:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/03/02/netfilter_example</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    #include &lt;linux/module.h&gt;
</span><span class='line'>    #include &lt;linux/kernel.h&gt;
</span><span class='line'>    #include &lt;linux/init.h&gt;
</span><span class='line'>    #include &lt;linux/types.h&gt;
</span><span class='line'>    #include &lt;linux/netdevice.h&gt;
</span><span class='line'>    #include &lt;linux/skbuff.h&gt;
</span><span class='line'>    #include &lt;linux/netfilter_ipv4.h&gt;
</span><span class='line'>    #include &lt;linux/inet.h&gt;
</span><span class='line'>    #include &lt;linux/in.h&gt;
</span><span class='line'>    #include &lt;linux/ip.h&gt;
</span><span class='line'>    
</span><span class='line'>    MODULE_LICENSE("GPL");
</span><span class='line'>    #define NIPQUAD(addr) \
</span><span class='line'>      ((unsigned char *)&addr)[0], \
</span><span class='line'>      ((unsigned char *)&addr)[1], \
</span><span class='line'>      ((unsigned char *)&addr)[2], \
</span><span class='line'>      ((unsigned char *)&addr)[3]
</span><span class='line'>    
</span><span class='line'>    static unsigned int sample(
</span><span class='line'>    unsigned int hooknum,
</span><span class='line'>    struct sk_buff * skb,
</span><span class='line'>    const struct net_device *in,
</span><span class='line'>    const struct net_device *out,
</span><span class='line'>    int (*okfn) (struct sk_buff *))
</span><span class='line'>    {
</span><span class='line'>        __be32 sip,dip;
</span><span class='line'>     if(skb){
</span><span class='line'>       struct sk_buff *sb = NULL;
</span><span class='line'>       sb = skb;
</span><span class='line'>       struct iphdr *iph;
</span><span class='line'>       iph  = ip_hdr(sb);
</span><span class='line'>       sip = iph-&gt;saddr;
</span><span class='line'>       dip = iph-&gt;daddr;
</span><span class='line'>       printk("Packet for source address: %d.%d.%d.%d\n destination address: %d.%d.%d.%d\n ", NIPQUAD(sip), NIPQUAD(dip));
</span><span class='line'>        }
</span><span class='line'>     return NF_ACCEPT;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     struct nf_hook_ops sample_ops = {
</span><span class='line'>       .list =  {NULL,NULL},
</span><span class='line'>       .hook = sample,
</span><span class='line'>       .pf = PF_INET,
</span><span class='line'>       .hooknum = NF_INET_PRE_ROUTING,
</span><span class='line'>       .priority = NF_IP_PRI_FILTER+2
</span><span class='line'>     };
</span><span class='line'>    
</span><span class='line'>    static int __init sample_init(void) {
</span><span class='line'>      nf_register_hook(&sample_ops);
</span><span class='line'>      return 0;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>    static void __exit sample_exit(void) {
</span><span class='line'>      nf_unregister_hook(&sample_ops);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>     module_init(sample_init);
</span><span class='line'>     module_exit(sample_exit);
</span><span class='line'>     MODULE_AUTHOR("chenkangrui");
</span><span class='line'>     MODULE_DESCRIPTION("sample");  
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c.tom of SourceInsight for Kernel]]></title>
    <link href="http://iskey.github.io/blog/2017/01/02/ctom_of_SourceInsight_for_kernel/"/>
    <updated>2017-01-02T15:32:00+00:00</updated>
    <id>http://iskey.github.io/blog/2017/01/02/ctom_of_SourceInsight_for_kernel</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>;For Linux Kernel Code
</span><span class='line'>SYSCALL_DEFINE0(name) long sys_##name(void)
</span><span class='line'>SYSCALL_DEFINE1(name, t1, v1) long sys_##name(t1 v1)
</span><span class='line'>SYSCALL_DEFINE2(name, t1, v1, t2, v2) long sys_##name(t1 v1, t2 v2)
</span><span class='line'>SYSCALL_DEFINE3(name, t1, v1, t2, v2, t3, v3) long sys_##name(t1 v1, t2 v2, t3 v3)
</span><span class='line'>SYSCALL_DEFINE4(name, t1, v1, t2, v2, t3, v3, t4, v4) long sys_##name(t1 v1, t2 v2, t3 v3, t4 v4)
</span><span class='line'>SYSCALL_DEFINE5(name, t1, v1, t2, v2, t3, v3, t4, v4, t5, v5) long sys_##name(t1 v1, t2 v2, t3 v3, t4 v4, t5 v5)
</span><span class='line'>__init
</span><span class='line'>__initdata
</span><span class='line'>__initconst
</span><span class='line'>__exitdata
</span><span class='line'>__exit_call
</span><span class='line'>__ref
</span><span class='line'>__refdata
</span><span class='line'>__refconst
</span><span class='line'>__init_refok
</span><span class='line'>__initdata_refok
</span><span class='line'>__exit_refok
</span><span class='line'>__exitused
</span><span class='line'>__exit
</span><span class='line'>__devinit
</span><span class='line'>__devinitdata
</span><span class='line'>__devinitconst
</span><span class='line'>__devexit
</span><span class='line'>__devexitdata
</span><span class='line'>__devexitconst
</span><span class='line'>__used
</span><span class='line'>__must_check
</span><span class='line'>__compiler_offsetof(a,b)
</span><span class='line'>__always_inline
</span><span class='line'>__attribute__
</span><span class='line'>__user
</span><span class='line'>__kernel
</span><span class='line'>__safe
</span><span class='line'>__force
</span><span class='line'>__nocast
</span><span class='line'>__iomem
</span><span class='line'>__chk_user_ptr(x)
</span><span class='line'>__chk_io_ptr(x)
</span><span class='line'>__builtin_warning
</span><span class='line'>__acquires(x)
</span><span class='line'>__releases(x)
</span><span class='line'>__acquire(x)
</span><span class='line'>__release(x)
</span><span class='line'>__cond_lock(x,c)
</span><span class='line'>__percpu
</span><span class='line'>likely(x)
</span><span class='line'>unlikely(x)
</span><span class='line'>__read_mostly
</span><span class='line'>____cacheline_aligned
</span><span class='line'>____cacheline_aligned_in_smp
</span><span class='line'>__cacheline_aligned
</span><span class='line'>__cacheline_aligned_in_smp
</span><span class='line'>____cacheline_internodealigned_in_smp
</span><span class='line'>__cacheline_internodealigned_in_smp
</span><span class='line'>__rcu
</span><span class='line'>__refconst
</span><span class='line'>__refdata
</span><span class='line'>__reg_oper0
</span><span class='line'>__reg_oper1
</span><span class='line'>__bitwise
</span><span class='line'>__bitwise__
</span><span class='line'>__aligned_u64
</span><span class='line'>__aligned_be64
</span><span class='line'>__aligned_le64
</span><span class='line'>__naked
</span><span class='line'>__noreturn
</span><span class='line'>__pure
</span><span class='line'>__always_inline
</span><span class='line'>DRIVER_ATTR(_name, _mode, _show, _store) struct driver_attribute driver_attr_##_name
</span><span class='line'>CLASS_ATTR(_name, _mode, _show, _store) struct class_attribute class_attr_##_name
</span><span class='line'>LIST_HEAD(name) struct list_head name
</span><span class='line'>DEFINE_MUTEX(mutexname) struct mutex mutexname
</span><span class='line'>DEFINE_TIMER(_name, _function, _expires, _data) struct timer_list _name
</span><span class='line'>DECLARE_WORK(n, f) struct work_struct n
</span><span class='line'>DEFINE_SPINLOCK(x) spinlock_t x
</span><span class='line'>EXPORT_SYMBOL(sym)
</span><span class='line'>EXPORT_SYMBOL_GPL(sym)
</span><span class='line'>EXPORT_SYMBOL_GPL_FUTURE(sym)
</span><span class='line'>DEFINE_IDA(name) struct ida name
</span><span class='line'>DECLARE_RWSEM(name) struct rw_semaphore name
</span><span class='line'>DECLARE_BITMAP(name,bits) unsigned long name[bits/32]
</span><span class='line'>DEFINE_RWLOCK(x) rwlock_t x
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel Defines for ARM]]></title>
    <link href="http://iskey.github.io/blog/2016/06/18/Kernel_Defines_for_ARM/"/>
    <updated>2016-06-18T20:21:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/06/18/Kernel_Defines_for_ARM</id>
    <content type="html"><![CDATA[<h2>Initial definitions</h2>

<p>The following symbol definitions rely on you knowing the translation that
<code>__virt_to_phys()</code> does for your machine.  This macro converts the passed
virtual address to a physical address.  Normally, it is simply:</p>

<pre><code>    phys = virt - PAGE_OFFSET + PHYS_OFFSET
</code></pre>

<h2>Decompressor Symbols</h2>

<hr />

<h4>ZTEXTADDR</h4>

<pre><code>Start address of decompressor.  There's no point in talking about
virtual or physical addresses here, since the MMU will be off at
the time when you call the decompressor code.  You normally call
the kernel at this address to start it booting.  This doesn't have
to be located in RAM, it can be in flash or other read-only or
read-write addressable medium.
</code></pre>

<h4>ZBSSADDR</h4>

<pre><code>Start address of zero-initialised work area for the decompressor.
This must be pointing at RAM.  The decompressor will zero initialise
this for you.  Again, the MMU will be off.
</code></pre>

<h4>ZRELADDR</h4>

<pre><code>This is the address where the decompressed kernel will be written,
and eventually executed.  The following constraint must be valid:

    __virt_to_phys(TEXTADDR) == ZRELADDR

The initial part of the kernel is carefully coded to be position
independent.
</code></pre>

<h4>INITRD_PHYS</h4>

<pre><code>Physical address to place the initial RAM disk.  Only relevant if
you are using the bootpImage stuff (which only works on the old
struct param_struct).
</code></pre>

<h4>INITRD_VIRT</h4>

<pre><code>Virtual address of the initial RAM disk.  The following  constraint
must be valid:

    __virt_to_phys(INITRD_VIRT) == INITRD_PHYS
</code></pre>

<h4>PARAMS_PHYS</h4>

<pre><code>Physical address of the struct param_struct or tag list, giving the
kernel various parameters about its execution environment.
</code></pre>

<h2>Kernel Symbols</h2>

<hr />

<h4>PHYS_OFFSET</h4>

<pre><code>Physical start address of the first bank of RAM.
</code></pre>

<h4>PAGE_OFFSET</h4>

<pre><code>Virtual start address of the first bank of RAM.  During the kernel
boot phase, virtual address PAGE_OFFSET will be mapped to physical
address PHYS_OFFSET, along with any other mappings you supply.
This should be the same value as TASK_SIZE.
</code></pre>

<h4>TASK_SIZE</h4>

<pre><code>The maximum size of a user process in bytes.  Since user space
always starts at zero, this is the maximum address that a user
process can access+1.  The user space stack grows down from this
address.

Any virtual address below TASK_SIZE is deemed to be user process
area, and therefore managed dynamically on a process by process
basis by the kernel.  I'll call this the user segment.

Anything above TASK_SIZE is common to all processes.  I'll call
this the kernel segment.

(In other words, you can't put IO mappings below TASK_SIZE, and
hence PAGE_OFFSET).
</code></pre>

<h4>TEXTADDR</h4>

<pre><code>Virtual start address of kernel, normally PAGE_OFFSET + 0x8000.
This is where the kernel image ends up.  With the latest kernels,
it must be located at 32768 bytes into a 128MB region.  Previous
kernels placed a restriction of 256MB here.
</code></pre>

<h4>DATAADDR</h4>

<pre><code>Virtual address for the kernel data segment.  Must not be defined
when using the decompressor.
</code></pre>

<h4>VMALLOC_START</h4>

<h4>VMALLOC_END</h4>

<pre><code>Virtual addresses bounding the vmalloc() area.  There must not be
any static mappings in this area; vmalloc will overwrite them.
The addresses must also be in the kernel segment (see above).
Normally, the vmalloc() area starts VMALLOC_OFFSET bytes above the
last virtual RAM address (found using variable high_memory).
</code></pre>

<h4>VMALLOC_OFFSET</h4>

<pre><code>Offset normally incorporated into VMALLOC_START to provide a hole
between virtual RAM and the vmalloc area.  We do this to allow
out of bounds memory accesses (eg, something writing off the end
of the mapped memory map) to be caught.  Normally set to 8MB.
</code></pre>

<h2>Architecture Specific Macros</h2>

<hr />

<h4>BOOT_MEM(pram,pio,vio)</h4>

<pre><code>`pram' specifies the physical start address of RAM.  Must always
be present, and should be the same as PHYS_OFFSET.

`pio' is the physical address of an 8MB region containing IO for
use with the debugging macros in arch/arm/kernel/debug-armv.S.

`vio' is the virtual address of the 8MB debugging region.

It is expected that the debugging region will be re-initialised
by the architecture specific code later in the code (via the
MAPIO function).
</code></pre>

<h4>BOOT_PARAMS</h4>

<pre><code>Same as, and see PARAMS_PHYS.
</code></pre>

<h4>FIXUP(func)</h4>

<pre><code>Machine specific fixups, run before memory subsystems have been
initialised.
</code></pre>

<h4>MAPIO(func)</h4>

<pre><code>Machine specific function to map IO areas (including the debug
region above).
</code></pre>

<h4>INITIRQ(func)</h4>

<pre><code>Machine specific function to initialise interrupts.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何修改运行程序的环境变量]]></title>
    <link href="http://iskey.github.io/blog/2016/05/13/change-env-for-running-program/"/>
    <updated>2016-05-13T20:31:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/05/13/change-env-for-running-program</id>
    <content type="html"><![CDATA[<p>linux修改环境变量的API有<code>putenv()</code>,<code>getenv()</code>,<code>setenv()</code>。如果在程序已经运行的情况下，尝试修改环境可以通过gdb来实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) attach process_id
</span><span class='line'>(gdb) call putenv ("LD_PRELOAD=/mylib.so")
</span><span class='line'>(gdb) detach</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中断零宽断言-正则环视]]></title>
    <link href="http://iskey.github.io/blog/2016/04/22/vim-regax/"/>
    <updated>2016-04-22T20:36:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/22/vim-regax</id>
    <content type="html"><![CDATA[<h2>转载》vim中断零宽断言-正则环视</h2>

<p>vim与perl的零宽断言表达式相比，(?换成了\@，并且这个符号应该跟在匹配模式的后边。
vim Perl 意义</p>

<h3>\@=   (?= 顺序环视</h3>

<pre><code>eg:查找后面是sql的my： /my\(sql\)\@=
</code></pre>

<h3>\@!   (?! 顺序否定环视</h3>

<pre><code>eg:查找后面不是sql的my： /my\(sql\)\@!
</code></pre>

<h3>\@&lt;=   (?&lt;= 逆序环视</h3>

<pre><code>eg: 查找前面是my的sql： /\(my\)\@&lt;=sql
</code></pre>

<h3>\@&lt;!   (?&lt;! 逆序否定环视</h3>

<pre><code>eg:查找前面不是my的sql： /\(my\)\@&lt;!sql
</code></pre>

<h3>\@>   (?> 固化分组</h3>

<h3>\%(atom)   (?: 非捕获型括号</h3>

<pre><code>意思是，此分组不捕获，可以理解为不算在分组信息中，eg：
:%s/\%(my\)sql\(ok\)/\1
上面的命令会将mysqlok替换为 ok ，由于my为捕获在分组中，故组中\1 为ok。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调试串口转应用串口]]></title>
    <link href="http://iskey.github.io/blog/2016/04/22/debug-serial-to-general/"/>
    <updated>2016-04-22T20:36:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/22/debug-serial-to-general</id>
    <content type="html"><![CDATA[<h2>调试串口转应用串口</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include "stdio.h"
</span><span class='line'>#include "sys/ioctl.h"
</span><span class='line'>#include "fcntl.h"
</span><span class='line'>
</span><span class='line'>#include "termios.h"
</span><span class='line'>#include "unistd.h"
</span><span class='line'>
</span><span class='line'>#define ECHOFLAGS (ECHO | ECHOE | ECHOK | ECHONL)
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int fd;
</span><span class='line'>    int ret;
</span><span class='line'>    char buf[100];
</span><span class='line'>    struct termios term;
</span><span class='line'>    
</span><span class='line'>    fd= open("/dev/pts/0",O_RDONLY);
</span><span class='line'>    if(fd&lt;=0){
</span><span class='line'>        printf("Error. open /dev/pts/0.\n");
</span><span class='line'>        goto err;
</span><span class='line'>    }
</span><span class='line'>    ioctl(fd, TIOCCONS);
</span><span class='line'>    close(fd);
</span><span class='line'>
</span><span class='line'>    fd= open("/dev/ttyS0",O_RDONLY);
</span><span class='line'>    if(fd&lt;=0){
</span><span class='line'>    fd= open("/dev/ttyS0",O_RDONLY);
</span><span class='line'>    if(fd&lt;=0){
</span><span class='line'>        printf("Error. open /dev/console.\n");
</span><span class='line'>        goto err;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    ret= tcgetattr(fd, &term);
</span><span class='line'>    if(-1== ret){
</span><span class='line'>        printf("tcgetattr error.\n");
</span><span class='line'>        goto err;
</span><span class='line'>    }
</span><span class='line'>    cfmakeraw(&term);
</span><span class='line'>    term.c_lflag&= ~ECHOFLAGS;
</span><span class='line'>    tcsetattr(fd, TCSAFLUSH, &term);
</span><span class='line'>    tcsetattr(fd, TCSANOW, &term);
</span><span class='line'>    if(-1== ret){
</span><span class='line'>        printf("tcsetattr error.\n");
</span><span class='line'>        goto err;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    ret= read(fd, buf, 1);
</span><span class='line'>    if(ret== -1){
</span><span class='line'>        perror("read error.\n");    
</span><span class='line'>        goto err;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    while(*buf!='\n')
</span><span class='line'>    {
</span><span class='line'>        ret= read(fd, buf, 1);
</span><span class='line'>        if(ret== -1){
</span><span class='line'>            perror("read error1.\n");
</span><span class='line'>            goto err;
</span><span class='line'>        }
</span><span class='line'>        printf("%02x\n",*buf);
</span><span class='line'>    }
</span><span class='line'>    ioctl(fd, TIOCCONS);
</span><span class='line'>    close(fd);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>err:
</span><span class='line'>    return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨网段修改ip地址]]></title>
    <link href="http://iskey.github.io/blog/2016/04/20/Fix-ip-for-two-netmask/"/>
    <updated>2016-04-20T22:36:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/20/Fix-ip-for-two-netmask</id>
    <content type="html"><![CDATA[<p>最近有个需求，需要在windows客户端下，远程修改linux服务器的ip地址，而且要求能够跨网段修改，首先相当的，当然是组播了，下边是实际的源码。</p>

<p>windows端，在visual studio 2013上编译通过，使用方法，send [ip] [netmask],该程序会在windows上的所有网卡上发送组播报文。</p>

<p>Linux客户端，使用方法recv  [eth].</p>

<p>recv.c</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAX_LEN  1024    </span><span class="cm">/* maximum string size to send */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MIN_PORT 1024    </span><span class="cm">/* minimum port allowed */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MAX_PORT 65535   </span><span class="cm">/* maximum port allowed */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HELLO_PORT 12345</span>
</span><span class='line'><span class="cp">#define HELLO_GROUP &quot;225.0.0.37&quot;</span>
</span><span class='line'><span class="cp">#define MSGBUFSIZE 256  </span>
</span><span class='line'><span class="cp">#define RAW_DATA_LEN 250</span>
</span><span class='line'><span class="cp">#define CMD_HEAD 0x57579090</span>
</span><span class='line'><span class="cp">#define CMD_MAX_SIZE 250</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_BROADCAST_CMD_</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint16_t</span>    <span class="n">data_len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">raw_data</span><span class="p">[</span><span class="n">RAW_DATA_LEN</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">uint16_t</span>    <span class="n">crc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">BROADCAST_CMD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span><span class="p">{</span>
</span><span class='line'>  <span class="n">CMD_SET_IP</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="n">CMD_SET_NETMASK</span><span class="p">,</span>
</span><span class='line'>  <span class="n">CMD_SET_IP_NETMASK</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__IP_MASK__</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">ip</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">netmask</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAN16(val) (((uint16_t)val&amp; (uint16_t)0xff00) &gt;&gt;8 | \</span>
</span><span class='line'><span class="cp">                                     ((uint16_t)val&amp; (uint16_t)0x00ff)&lt;&lt; 8)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAIN32(val) (((uint32_t)val&amp; (uint32_t)0xff000000)&gt;&gt; 24       | \</span>
</span><span class='line'><span class="cp">                                     ((uint32_t)val&amp; (uint32_t)0x00ff0000)&gt;&gt; 8 | \</span>
</span><span class='line'><span class="cp">                                     ((uint32_t)val&amp; (uint32_t)0x0000ff00)&lt;&lt; 8 | \</span>
</span><span class='line'><span class="cp">                                     ((uint32_t)val&amp; (uint32_t)0x000000ff)&lt;&lt; 24)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAN64(val) (((uint64_t) (val) &amp; (uint64_t)(0x00000000000000ffU)) &lt;&lt; 56) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x000000000000ff00U)) &lt;&lt; 40) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x0000000000ff0000U)) &lt;&lt; 24) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x00000000ff000000U)) &lt;&lt; 8) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x000000ff00000000U)) &gt;&gt; 8) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x0000ff0000000000U)) &gt;&gt; 24) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0x00ff000000000000U)) &gt;&gt; 40) | \</span>
</span><span class='line'><span class="cp">                                     (((uint64_t)(val)&amp; (uint64_t)(0xff00000000000000U)) &gt;&gt; 56)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TO_NET16(val) INVERT_TO_BIG_ENDIAN16(val)</span>
</span><span class='line'><span class="cp">#define TO_NET32(val) INVERT_TO_BIG_ENDIAIN32(val)</span>
</span><span class='line'><span class="cp">#define TO_NET64(val) INVERT_TO_BIG_ENDIAN64(val)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">isBigEndian</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">MyUnion</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">uint8_t</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">uint16_t</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">union</span> <span class="n">MyUnion</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="n">test</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">test</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">nbytes</span><span class="p">,</span><span class="n">addrlen</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ip_mreq</span> <span class="n">mreq</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">msgbuf</span><span class="p">[</span><span class="n">MSGBUFSIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str_cmd</span><span class="p">[</span><span class="n">CMD_MAX_SIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ip</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">netmask</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">u_int</span> <span class="n">yes</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/*** MODIFICATION TO ORIGINAL */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span><span class="o">!=</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s [eth_name]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">snprintf</span><span class="p">(</span><span class="n">str_cmd</span><span class="p">,</span> <span class="n">CMD_MAX_SIZE</span><span class="p">,</span> <span class="s">&quot;route add -net 0.0.0.0 %s&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="n">str_cmd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* create what looks like an ordinary UDP socket */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">fd</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_DGRAM</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**** MODIFICATION TO ORIGINAL */</span>
</span><span class='line'>  <span class="cm">/* allow multiple sockets to use the same PORT number */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">SOL_SOCKET</span><span class="p">,</span><span class="n">SO_REUSEADDR</span><span class="p">,</span><span class="o">&amp;</span><span class="n">yes</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">yes</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Reusing ADDR failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*** END OF MODIFICATION TO ORIGINAL */</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* set up destination address */</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span> <span class="cm">/* N.B.: differs from sender */</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="n">HELLO_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* bind to receive address */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;bind&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* use setsockopt() to request that the kernel join a multicast group */</span>
</span><span class='line'>  <span class="n">mreq</span><span class="p">.</span><span class="n">imr_multiaddr</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">inet_addr</span><span class="p">(</span><span class="n">HELLO_GROUP</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mreq</span><span class="p">.</span><span class="n">imr_interface</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">IPPROTO_IP</span><span class="p">,</span><span class="n">IP_ADD_MEMBERSHIP</span><span class="p">,</span><span class="o">&amp;</span><span class="n">mreq</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">mreq</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;setsockopt&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* now just enter a read-print loop */</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">addrlen</span><span class="o">=</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">nbytes</span><span class="o">=</span><span class="n">recvfrom</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">msgbuf</span><span class="p">,</span><span class="n">MSGBUFSIZE</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">addr</span><span class="p">,(</span><span class="kt">socklen_t</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">addrlen</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">perror</span><span class="p">(</span><span class="s">&quot;recvfrom&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">BROADCAST_CMD</span> <span class="n">cmd</span><span class="p">,</span> <span class="o">*</span><span class="n">p_cmd</span> <span class="o">=</span> <span class="p">(</span><span class="n">BROADCAST_CMD</span> <span class="o">*</span><span class="p">)</span><span class="n">msgbuf</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">__IP_MASK__</span> <span class="n">ip_mask</span><span class="p">,</span> <span class="o">*</span><span class="n">p_ip_mask</span><span class="o">=</span>  <span class="p">(</span><span class="k">struct</span> <span class="n">__IP_MASK__</span><span class="o">*</span><span class="p">)(</span><span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">raw_data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ip_mask</span><span class="p">.</span><span class="n">ip</span> <span class="o">=</span> <span class="n">p_ip_mask</span><span class="o">-&gt;</span><span class="n">ip</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ip_mask</span><span class="p">.</span><span class="n">netmask</span> <span class="o">=</span> <span class="n">p_ip_mask</span><span class="o">-&gt;</span><span class="n">netmask</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isBigEndian</span><span class="p">()){</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">data_len</span> <span class="o">=</span> <span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">data_len</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">TO_NET32</span><span class="p">(</span><span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cmd</span><span class="p">.</span><span class="n">data_len</span> <span class="o">=</span> <span class="n">TO_NET16</span><span class="p">(</span><span class="n">p_cmd</span><span class="o">-&gt;</span><span class="n">data_len</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">head</span> <span class="o">==</span> <span class="n">CMD_HEAD</span><span class="p">){</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cmd head is 0x%08x.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmd</span><span class="p">.</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cmd.cmd is 0x%02x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmd</span><span class="p">.</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>          <span class="n">snprintf</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ip</span><span class="p">),</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="n">inet_ntoa</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">struct</span> <span class="n">in_addr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ip_mask</span><span class="p">.</span><span class="n">ip</span><span class="p">)));</span>
</span><span class='line'>          <span class="n">snprintf</span><span class="p">(</span><span class="n">netmask</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">netmask</span><span class="p">),</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="n">inet_ntoa</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">struct</span> <span class="n">in_addr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ip_mask</span><span class="p">.</span><span class="n">netmask</span><span class="p">)));</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ip is %s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ip</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;netmask is %s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">netmask</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">snprintf</span><span class="p">(</span><span class="n">str_cmd</span><span class="p">,</span> <span class="n">CMD_MAX_SIZE</span><span class="p">,</span> <span class="s">&quot;ifconfig %s %s netmask %s&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ip</span><span class="p">,</span> <span class="n">netmask</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cmd is %s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str_cmd</span><span class="p">);</span>
</span><span class='line'>      <span class="n">system</span><span class="p">(</span><span class="n">str_cmd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>send.c</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;   </span><span class="cm">/* for type definitions */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;winsock2.h&gt;    </span><span class="cm">/* for win socket API calls */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;ws2tcpip.h&gt;    </span><span class="cm">/* for win socket structs */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;       </span><span class="cm">/* for printf() */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;      </span><span class="cm">/* for atoi() */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;      </span><span class="cm">/* for strlen() */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;inttypes.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;stdint.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAX_LEN  1024    </span><span class="cm">/* maximum string size to send */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MIN_PORT 1024    </span><span class="cm">/* minimum port allowed */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MAX_PORT 65535   </span><span class="cm">/* maximum port allowed */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define HELLO_PORT 12345</span>
</span><span class='line'><span class="cp">#define HELLO_GROUP &quot;225.0.0.37&quot;</span>
</span><span class='line'><span class="cp">#define RAW_DATA_LEN 250</span>
</span><span class='line'><span class="cp">#define CMD_HEAD 0x57579090</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_BROADCAST_CMD_</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span>  <span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint8_t</span>   <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint16_t</span>  <span class="n">data_len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint8_t</span>   <span class="n">raw_data</span><span class="p">[</span><span class="n">RAW_DATA_LEN</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">uint16_t</span>  <span class="n">crc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">BROADCAST_CMD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span><span class="p">{</span>
</span><span class='line'>    <span class="n">CMD_SET_IP</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_SET_NETMASK</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CMD_SET_IP_NETMASK</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__IP_MASK__</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">ip</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">netmask</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAN16(val) (((uint16_t)val&amp; (uint16_t)0xff00) &gt;&gt;8 | \</span>
</span><span class='line'><span class="cp">    ((uint16_t)val&amp; (uint16_t)0x00ff) &lt;&lt; 8)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAIN32(val) (((uint32_t)val&amp; (uint32_t)0xff000000)&gt;&gt; 24       | \</span>
</span><span class='line'><span class="cp">    ((uint32_t)val&amp; (uint32_t)0x00ff0000) &gt;&gt; 8 | \</span>
</span><span class='line'><span class="cp">    ((uint32_t)val&amp; (uint32_t)0x0000ff00) &lt;&lt; 8 | \</span>
</span><span class='line'><span class="cp">    ((uint32_t)val&amp; (uint32_t)0x000000ff) &lt;&lt; 24)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define INVERT_TO_BIG_ENDIAN64(val) (((uint64_t) (val) &amp; (uint64_t)(0x00000000000000ffU)) &lt;&lt; 56) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x000000000000ff00U)) &lt;&lt; 40) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x0000000000ff0000U)) &lt;&lt; 24) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x00000000ff000000U)) &lt;&lt; 8) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x000000ff00000000U)) &gt;&gt; 8) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x0000ff0000000000U)) &gt;&gt; 24) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0x00ff000000000000U)) &gt;&gt; 40) | \</span>
</span><span class='line'><span class="cp">    (((uint64_t)(val)&amp; (uint64_t)(0xff00000000000000U)) &gt;&gt; 56)))</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define TO_NET16(val) INVERT_TO_BIG_ENDIAN16(val)</span>
</span><span class='line'><span class="cp">#define TO_NET32(val) INVERT_TO_BIG_ENDIAIN32(val)</span>
</span><span class='line'><span class="cp">#define TO_NET64(val) INVERT_TO_BIG_ENDIAN64(val)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">isBigEndian</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">union</span> <span class="n">MyUnion</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">uint8_t</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">uint16_t</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">union</span> <span class="n">MyUnion</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>    <span class="n">test</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">test</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage:</span><span class="se">\&quot;</span><span class="s">%s [ip] [netmask]</span><span class="se">\&quot;\n</span><span class="s"> </span><span class="se">\t</span><span class="s"> e.g.: %s eth0 1.1.1.1 255.255.255.0</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmd</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma comment(lib,&quot;Ws2_32.lib&quot;) </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">send_ip_set_cmd</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">local_ip</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">remote_ip</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">remote_netmask</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sock</span><span class="p">;</span>                   <span class="cm">/* socket descriptor */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">mc_addr</span><span class="p">;</span> <span class="cm">/* socket address structure */</span>
</span><span class='line'>    <span class="c1">//char* mc_addr_str;          /* multicast IP address */</span>
</span><span class='line'>    <span class="c1">//unsigned short mc_port;     /* multicast port */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">mc_ttl</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>     <span class="cm">/* time to live (hop count) */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__IP_MASK__</span> <span class="n">ip_mask</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BROADCAST_CMD</span> <span class="n">cmd</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ip_mask</span><span class="p">.</span><span class="n">ip</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">remote_ip</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ip_mask</span><span class="p">.</span><span class="n">netmask</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">remote_netmask</span><span class="p">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">isBigEndian</span><span class="p">()){</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">CMD_HEAD</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">CMD_SET_IP</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">data_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__IP_MASK__</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">TO_NET32</span><span class="p">(</span><span class="n">CMD_HEAD</span><span class="p">);</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">CMD_SET_IP</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cmd</span><span class="p">.</span><span class="n">data_len</span> <span class="o">=</span> <span class="n">TO_NET16</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__IP_MASK__</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">raw_data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ip_mask</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ip_mask</span><span class="p">));</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* create a socket for sending to the multicast address */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_DGRAM</span><span class="p">,</span> <span class="n">IPPROTO_UDP</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;socket() failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">SOCKADDR_IN</span> <span class="n">local_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">local_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">S_un</span><span class="p">.</span><span class="n">S_addr</span><span class="o">=</span><span class="n">inet_addr</span><span class="p">(</span><span class="n">local_ip</span><span class="p">);</span>
</span><span class='line'>  <span class="n">local_addr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">PF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">local_addr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="mi">15501</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span> <span class="n">bind</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="p">(</span><span class="n">SOCKADDR</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span> <span class="n">local_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SOCKADDR</span><span class="p">))){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bind error.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* set the TTL (time to live/hop count) for the send */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">,</span> <span class="n">IP_MULTICAST_TTL</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">mc_ttl</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mc_ttl</span><span class="p">)))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;setsockopt() failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* construct a multicast address structure */</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mc_addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mc_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">mc_addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mc_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">HELLO_GROUP</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mc_addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">HELLO_PORT</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sendto</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cmd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">BROADCAST_CMD</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">mc_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mc_addr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;sendto error.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;command send ok. ip addr is %s, netmask is %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">remote_ip</span><span class="p">,</span> <span class="n">remote_netmask</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="n">closesocket</span><span class="p">(</span><span class="n">sock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">szHostName</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>  <span class="n">WSADATA</span> <span class="n">wsaData</span><span class="p">;</span>            <span class="cm">/* Windows socket DLL structure */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* validate number of arguments */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ip addr is %s, netmask is %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>    <span class="c1">//mc_addr_str = argv[1];       /* arg 1: multicast IP address */</span>
</span><span class='line'>    <span class="c1">//mc_port = atoi(argv[2]); /* arg 2: multicast port number */</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* validate the port range */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">HELLO_PORT</span> <span class="o">&lt;</span> <span class="n">MIN_PORT</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">HELLO_PORT</span> <span class="o">&gt;</span> <span class="n">MAX_PORT</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Invalid port number argument %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">HELLO_PORT</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Valid range is between %d and %d.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">MIN_PORT</span><span class="p">,</span> <span class="n">MAX_PORT</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* Load Winsock 2.0 DLL */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">WSAStartup</span><span class="p">(</span><span class="n">MAKEWORD</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">wsaData</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;WSAStartup() failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">gethostname</span><span class="p">(</span><span class="n">szHostName</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Get host adresses</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">hostent</span> <span class="o">*</span> <span class="n">pHost</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pHost</span> <span class="o">=</span> <span class="n">gethostbyname</span><span class="p">(</span><span class="n">szHostName</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pHost</span><span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">pHost</span><span class="o">-&gt;</span><span class="n">h_addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="kt">char</span> <span class="o">*</span> <span class="n">eth_name</span><span class="o">=</span><span class="n">inet_ntoa</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="k">struct</span> <span class="n">in_addr</span> <span class="o">*</span><span class="p">)</span><span class="n">pHost</span><span class="o">-&gt;</span><span class="n">h_addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">send_ip_set_cmd</span><span class="p">(</span><span class="n">eth_name</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">WSACleanup</span><span class="p">();</span>  <span class="cm">/* Cleanup Winsock */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile调试方法]]></title>
    <link href="http://iskey.github.io/blog/2016/04/13/makefile-debug/"/>
    <updated>2016-04-13T09:38:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/13/makefile-debug</id>
    <content type="html"><![CDATA[<p>[TOC]</p>

<p>最近在分析一个写的比较大、混乱的makefile工程，引入包含关系比较随意，内核、进程不相干的动作杂糅在一起，难以洞察，所以网搜了一篇makefile的调试文件，觉得有些技巧，在这里整理记录一下。</p>

<h2>一些说明</h2>

<p>makefile 的调试有点像魔法。可惜，并不存在makefile 调试器之类的东西可用来查看特定规则是如何被求值的，或某个变量是如何被扩展的。相反，大部分的调试过程只是在执行输出的动作以及查看makefile。事实上，GNU make 提供了若干可以协助调试的内置函数以及命令行选项。</p>

<p>用来调试makefile 的一个最好方法就是加入调试挂钩以及使用具保护的编程技术，让你能够在事情出错时恢复原状。我将会介绍若干基本的调试技术以及我所发现的最有用的具保护能力的编码习惯。</p>

<h2>make 的调试功能</h2>

<p>warning函数非常适合用来调试难以捉摸的makefile。因为warning函数会被扩展成空字符串，所以它可以放在makefile 中的任何地方：开始的位置、工作目标或必要条件列表中以及命令脚本中。这让你能够在最方便查看变量的地方输出变量的值。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(warning A top-level warning)
</span><span class='line'>
</span><span class='line'>FOO := $(warning Right-hand side of a simple variable)bar
</span><span class='line'>BAZ = $(warning Right-hand side of a recursive variable)boo
</span><span class='line'>
</span><span class='line'>$(warning A target)target: $(warning In a prerequisite list)makefile
</span><span class='line'>$(BAZ)
</span><span class='line'>$(warning In a command script)
</span><span class='line'>ls
</span><span class='line'>$(BAZ):</span></code></pre></td></tr></table></div></figure>


<p>这会产生如下的输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make
</span><span class='line'>makefile:1: A top-level warning
</span><span class='line'>makefile:2: Right-hand side of a simple variable
</span><span class='line'>makefile:5: A target
</span><span class='line'>makefile:5: In a prerequisite list
</span><span class='line'>makefile:5: Right-hand side of a recursive variable
</span><span class='line'>makefile:8: Right-hand side of a recursive variable
</span><span class='line'>makefile:6: In a command script
</span><span class='line'>ls
</span><span class='line'>makefile</span></code></pre></td></tr></table></div></figure>


<p>请注意，warning函数的求值方式是按照make标准的立即和延后求值算法。虽然对BAZ的赋值动作中包含了一个warning函数，但是直到BAZ在必要条件列表中被求值后，这个信息才会被输出来。</p>

<p>“可以在任何地方安插warning调用”的这个特性，让它能够成为一个基本的调试工具。</p>

<h2>命令行选项</h2>

<p>我找到了三个最适合用来调试的命令行选项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--just-print（-n）
</span><span class='line'>--print-database（-p）
</span><span class='line'>--warn-undefined-variables。</span></code></pre></td></tr></table></div></figure>


<h3>&ndash;just-print</h3>

<p>在一个新的makefile 工作目标上，我所做的第一个测试就是以&ndash;just-print（-n）选项来调用make。这会使得make读进makefile并且输出它更新工作目标时将会执行的命令，但是不会真的执行它们。GNU make 有一个方便的功能，就是允许你为将被输出的命令标上安静模式修饰符（@）。</p>

<p>这个选项被假设可以抑制所有命令的执行动作，然而这只在特定的状况下为真。实际上，你必须小心以对。尽管make不会运行命令脚本，但是在立即的语境之中，它会对shell函数调用进行求值动作。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REQUIRED_DIRS = ...
</span><span class='line'>_MKDIRS := $(shell for d in $(REQUIRED_DIRS); \
</span><span class='line'>             do \
</span><span class='line'>                 [[ -d $$d ]] || mkdir -p $$d; \
</span><span class='line'>             done)
</span><span class='line'>
</span><span class='line'>$(objects) : $(sources)</span></code></pre></td></tr></table></div></figure>


<p>正如我们之前所见，_MKDIRS 简单变量的目的是触发必要目录的创建动作。如果这个makefile 是以&ndash;just-print 选项的方式运行的，那么当make 读进makefile 时，shell命令将会一如往常般被执行。然后，make 将会输出（但不会执行）更新$(objects)文件列表所需要进行的每个编译命令。</p>

<h3>&ndash;print-data-base</h3>

<p>&ndash;print-data-base（-p）是另一个你常会用到的选项。它会运行makefile，显示GNU版权信息以及make 所运行的命令，然后输出它的内部数据库。数据库里的数据将会依种类划分</p>

<p>成以下几个组：variables、directories、implicit rules、pattern-specific variables、files（explicit rules）以及vpath earch path。如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># GNU Make 3.80
</span><span class='line'># Copyright (C) 2002 Free Software Foundation, Inc.
</span><span class='line'># This is free software; see the source for copying conditions.
</span><span class='line'># There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
</span><span class='line'># PARTICULAR PURPOSE.</span></code></pre></td></tr></table></div></figure>


<p>正常的命令将会在此处执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Make data base, printed on Thu Apr 29 20:58:13 2004
</span><span class='line'># Variables
</span><span class='line'>...
</span><span class='line'># Directories
</span><span class='line'>...
</span><span class='line'># Implicit Rules
</span><span class='line'>...
</span><span class='line'># Pattern-specific variable values
</span><span class='line'>...
</span><span class='line'># Files
</span><span class='line'>...
</span><span class='line'># VPATH Search Paths</span></code></pre></td></tr></table></div></figure>


<p>让我们更详细地查看以上这几个区段。
变量区段（variable）将会列出每个变量以及具描述性的注释：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># automatic
</span><span class='line'># environment
</span><span class='line'>EMACS_DIR = C:/usr/emacs-21.3.50.7
</span><span class='line'># default
</span><span class='line'>CWEAVE = cweave
</span><span class='line'># makefile (from `../mp3_player/makefile', line 35)
</span><span class='line'>CPPFLAGS = $(addprefix -I ,$(include_dirs))
</span><span class='line'># makefile (from `../ch07-separate-binaries/makefile', line 44)
</span><span class='line'>RM := rm -f
</span><span class='line'># makefile (from `../mp3_player/makefile', line 14)
</span><span class='line'>define make-library
</span><span class='line'>    libraries += $1
</span><span class='line'>    sources += $2
</span><span class='line'>
</span><span class='line'>    $1: $(call source-to-object,$2)
</span><span class='line'>$(AR) $(ARFLAGS) $$@ $$^
</span><span class='line'>endef</span></code></pre></td></tr></table></div></figure>


<p>自动变量不会被显示出来，但是通过它们可以方便变量的获得，像$()在一个文件中，则会在注释中指出其文件名以及该定义所在的行号。简单变量和递归变量的差别在于赋值运算符。简单变量的值将会被显示成右边部分被求值的形式。</p>

<p>下一个区段标示为Directories，它对make 开发人员比对make 用户有用。它列出了将会被make 检查的目录，包括可能会存在的SCCS 和RCS 子目录，但它们通常不存在。对每个目录来说，make会显示实现细节，比如设备编号、inode 以及文件名模式匹配的统计数据。</p>

<p>接着是Implicit Rules 区段。这个区段包含了make 数据库中所有的内置的和用户自定义的模式规则。此外，对于那些定义在文件中的规则，它们的注释将会指出文件名以及行号</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>：
</span><span class='line'>
</span><span class='line'>%.c %.h: %.y
</span><span class='line'># commands to execute (from `../mp3_player/makefile', line 73):
</span><span class='line'>$(YACC.y) --defines $&lt;
</span><span class='line'>$(MV) y.tab.c $*.c
</span><span class='line'>$(MV) y.tab.h $*.h
</span><span class='line'>
</span><span class='line'>%: %.c
</span><span class='line'># commands to execute (built-in):
</span><span class='line'>$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@
</span><span class='line'>
</span><span class='line'>%.o: %.c
</span><span class='line'># commands to execute (built-in):
</span><span class='line'>$(COMPILE.c) $(OUTPUT_OPTION) $&lt;
</span></code></pre></td></tr></table></div></figure>


<p>查看这个区段，是让你能够熟悉make 内置规则的变化和结构的最佳方法。当然，并非所有的内置规则都会被实现成模式规则。如果你没有找到你想要的规则，可以查看Files区段，旧式后缀规则就列在该处。</p>

<p>下一个区段被标示为Pattern-specific variables，此处所列出的是定义在makefile 里的模式专属变量。所谓模式专属变量，就是变量定义的有效范围被限定在相关的模式规则执行的时候。例如，模式变量YYLEXFLAG 被定义成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%.c %.h: YYLEXFLAG := -d
</span><span class='line'>%.c %.h: %.y
</span><span class='line'>$(YACC.y) --defines $&lt;
</span><span class='line'>$(MV) y.tab.c $*.c
</span><span class='line'>$(MV) y.tab.h $*.h</span></code></pre></td></tr></table></div></figure>


<p>将会被显示成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Pattern-specific variable values
</span><span class='line'>%.c :
</span><span class='line'># makefile (from `Makefile', line 1)
</span><span class='line'># YYLEXFLAG := -d
</span><span class='line'># variable set hash-table stats:
</span><span class='line'># Load=1/16=6%, Rehash=0, Collisions=0/1=0%
</span><span class='line'>%.h :
</span><span class='line'># makefile (from `Makefile', line 1)
</span><span class='line'># YYLEXFLAG := -d
</span><span class='line'># variable set hash-table stats:
</span><span class='line'># Load=1/16=6%, Rehash=0, Collisions=0/1=0%
</span><span class='line'># 2 pattern-specific variable values</span></code></pre></td></tr></table></div></figure>


<p>接着是Files 区段，此处所列出的都是与特定文件有关的自定义和后缀规则：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Not a target:
</span><span class='line'>.p.o:
</span><span class='line'># Implicit rule search has not been done.
</span><span class='line'># Modification time never checked.
</span><span class='line'># File has not been updated.
</span><span class='line'># commands to execute (built-in):
</span><span class='line'>$(COMPILE.p) $(OUTPUT_OPTION) $&lt;
</span><span class='line'>
</span><span class='line'>lib/ui/libui.a: lib/ui/ui.o
</span><span class='line'># Implicit rule search has not been done.
</span><span class='line'># Last modified 2004-04-01 22:04:09.515625
</span><span class='line'># File has been updated.
</span><span class='line'># Successfully updated.
</span><span class='line'># commands to execute (from `../mp3_player/lib/ui/module.mk', line 3):
</span><span class='line'>ar rv $@ $^
</span><span class='line'>
</span><span class='line'>lib/codec/codec.o: ../mp3_player/lib/codec/codec.c ../mp3_player/lib/codec/codec.c ../mp3_player/include/codec/codec.h
</span><span class='line'># Implicit rule search has been done.
</span><span class='line'># Implicit/static pattern stem: `lib/codec/codec'
</span><span class='line'># Last modified 2004-04-01 22:04:08.40625
</span><span class='line'># File has been updated.
</span><span class='line'># Successfully updated.
</span><span class='line'># commands to execute (built-in):
</span><span class='line'>$(COMPILE.c) $(OUTPUT_OPTION) $&lt;</span></code></pre></td></tr></table></div></figure>


<p>中间文件与后缀规则会被标示为Notatarget，其余是工作目标。每个文件将会包含注释，用以指出make是如何处理此规则的。被找到的文件在被显示的时候将会通过标准的vpath 搜索来找出其路径。</p>

<p>最后一个区段被标示为VPATH Search Paths，列出了VPATH 的值以及所有的vpath模式。</p>

<p>对于大规模使用eval 以及用户自定义函数来建立复杂的变量和规则的makefile 来说，查看它们的输出结果通常是确认宏是否已被扩展成预期值的唯一方法。</p>

<h3>&ndash;warn-undefined-variables</h3>

<p>这个选项会使得make在未定义的变量被扩展时显示警告信息。因为未定义的变量会被扩展成空字符串，这常见于变量名称打错而且很长一段时间未被发现到。这个选项有个问题，这也是为什么我很少使用这个选项的原因，那就是许多内置规则都会包含未定义的变量以作为用户自定义值的挂钩。所以使用这个选项来运行make必然会产生许多不是错误的警告信息，而且对用户的makefile 没有什么用处。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make --warn-undefined-variables -n
</span><span class='line'>makefile:35: warning: undefined variable MAKECMDGOALS
</span><span class='line'>makefile:45: warning: undefined variable CFLAGS
</span><span class='line'>makefile:45: warning: undefined variable TARGET_ARCH
</span><span class='line'>...
</span><span class='line'>makefile:35: warning: undefined variable MAKECMDGOALS
</span><span class='line'>make: warning: undefined variable CFLAGS
</span><span class='line'>make: warning: undefined variable TARGET_ARCH
</span><span class='line'>make: warning: undefined variable CFLAGS
</span><span class='line'>make: warning: undefined variable TARGET_ARCH
</span><span class='line'>...
</span><span class='line'>make: warning: undefined variable LDFLAGS
</span><span class='line'>make: warning: undefined variable TARGET_ARCH
</span><span class='line'>make: warning: undefined variable LOADLIBES
</span><span class='line'>make: warning: undefined variable LDLIBS</span></code></pre></td></tr></table></div></figure>


<p>不过，此命令在需要捕获此类错误的某些场合上可能非常有用。</p>

<h3>&ndash;debug 选项</h3>

<p>当你需要知道make 如何分析你的依存图时，可以使用&ndash;debug 选项。除了运行调试器，这个选项是让你获得最详细信息的另一个方法。你有五个调试选项以及一个修饰符可用，分别是：basic、verbose、implicit、jobs、all 以及makefile。</p>

<p>如果调试选项被指定成&ndash;debug，就是在进行basic调试；如果调试选项被指定成-d，就是在进行all调试；如果要使用选项的其他组合，则可以使用&ndash;debug=option1,option2 这个以逗号为分隔符的列表，此处的选项可以是下面任何一个单词（实际上，make 只会查看第一个字母）：</p>

<h3>basic</h3>

<p>这是所提供的信息最不详细的基本调试功能。启用时，make会输出被发现尚未更新的工作目标并更新动作的状态。它的输出会像下面这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File all does not exist.
</span><span class='line'>File app/player/play_mp3 does not exist.
</span><span class='line'>File app/player/play_mp3.o does not exist.
</span><span class='line'>Must remake target app/player/play_mp3.o.
</span><span class='line'>gcc ... ../mp3_player/app/player/play_mp3.c
</span><span class='line'>Successfully remade target file app/player/play_mp3.o.</span></code></pre></td></tr></table></div></figure>


<h3>verbose</h3>

<p>这个选项会设定basic选项，以及提供关于“哪些文件被分析、哪些必要条件不需要重建等”的额外信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File all does not exist.
</span><span class='line'>Considering target file app/player/play_mp3.
</span><span class='line'>File app/player/play_mp3 does not exist.
</span><span class='line'>Considering target file app/player/play_mp3.o.
</span><span class='line'>File app/player/play_mp3.o does not exist.
</span><span class='line'>Pruning file ../mp3_player/app/player/play_mp3.c.
</span><span class='line'>Pruning file ../mp3_player/app/player/play_mp3.c.
</span><span class='line'>Pruning file ../mp3_player/include/player/play_mp3.h.
</span><span class='line'>Finished prerequisites of target file app/player/play_mp3.o.
</span><span class='line'>Must remake target app/player/play_mp3.o.
</span><span class='line'>gcc ... ../mp3_player/app/player/play_mp3.c
</span><span class='line'>Successfully remade target file app/player/play_mp3.o.
</span><span class='line'>Pruning file app/player/play_mp3.o.
</span><span class='line'>
</span><span class='line'>3.3 implicit
</span><span class='line'>这个选项会设定basic 选项，以及提供关于“为每个工作目标搜索隐含规则”的额外信息：
</span><span class='line'>
</span><span class='line'>File all does not exist.
</span><span class='line'>File app/player/play_mp3 does not exist.
</span><span class='line'>Looking for an implicit rule for app/player/play_mp3.
</span><span class='line'>Trying pattern rule with stem play_mp3.
</span><span class='line'>Trying implicit prerequisite app/player/play_mp3.o.
</span><span class='line'>Found an implicit rule for app/player/play_mp3.
</span><span class='line'>File app/player/play_mp3.o does not exist.
</span><span class='line'>Looking for an implicit rule for app/player/play_mp3.o.
</span><span class='line'>Trying pattern rule with stem play_mp3.
</span><span class='line'>Trying implicit prerequisite app/player/play_mp3.c.
</span><span class='line'>Found prerequisite app/player/play_mp3.c as VPATH ../mp3_player/app/
</span><span class='line'>player/play_mp3.c
</span><span class='line'>Found an implicit rule for app/player/play_mp3.o.
</span><span class='line'>Must remake target app/player/play_mp3.o.
</span><span class='line'>gcc ... ../mp3_player/app/player/play_mp3.c
</span><span class='line'>Successfully remade target file app/player/play_mp3.o.</span></code></pre></td></tr></table></div></figure>


<h3>jobs</h3>

<p>这个选项会输出被make 调用的子进程的细节，它不会启用basic 选项的功能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Got a SIGCHLD; 1 unreaped children.
</span><span class='line'>gcc ... ../mp3_player/app/player/play_mp3.c
</span><span class='line'>Putting child 0x10033800 (app/player/play_mp3.o) PID 576 on the chain.
</span><span class='line'>Live child 0x10033800 (app/player/play_mp3.o) PID 576
</span><span class='line'>Got a SIGCHLD; 1 unreaped children.
</span><span class='line'>Reaping winning child 0x10033800 PID 576
</span><span class='line'>Removing child 0x10033800 PID 576 from chain.</span></code></pre></td></tr></table></div></figure>


<h3>all</h3>

<p>这会启用前面的所有选项，当你使用-d 选项时，默认会启用此功能。</p>

<h3>makefile</h3>

<p>它不会启用调试信息，直到makefile 被更新—— 这包括更新任何的引入文件。如果使用此修饰符，make 会在重编译makefile 以及引入文件的时候，输出被选择的信息。这个选项会启用basic 选项，all 选项也会启用此选项。</p>

<h2>编写用于调试的代码</h2>

<p>如你所见，并没有太多的工具可用来调试makefile，你只有几个方法可以输出若干可能有用的信息。当这些方法都不管用时，你就得将makefile编写成可以尽量减少错误发生的机会，或是可以为自己提供一个舞台来协助你进行调试。</p>

<p>这一节所提供的建议被我（有点随意地）分类成：良好的编码习惯、具保护功能的编码以及调试技术等部分。然而一些特殊的项目，像是检查命令的结束状态，可能会被放在良好的编码习惯中或是具保护功能的编码中，做这样的分类适当地反映出了趋势所在。将焦点好好地放在makefile上，尽量避免简单行事。采用具保护的编码以避免makefile被非预期的事件和环境状态所影响。最后，当缺陷出现时，使用你可以找到的用来压制它们的每个诀窍。</p>

<p>“简洁就是美”<code>（Keep It Simple）</code>的原则<code>（http://www.catb.org/~esr/jargon/html/K/KISSPrinciple.html）</code>是所有良好设计的核心所在。正如你在前面几章所看到的，makefile 马上就会变得很复杂——即使是一般的工作，比如依存关系的产生。要对抗“在你的编译系统中加入越来越多的功能”的潮流，你将会失败，但如果你只是不经思索地加入你所发现的每个功能，失败并不会比你这么做的后果还糟。</p>

<h3>良好的编码习惯</h3>

<p>以我的经验来说，大部分的程序员都不会把makefile作为程序来写，因此，他们不会像编写C++或Java时那样细心。事实上，make语言是一个完整的非程序语言。如果可靠性和可维护性对你的编译系统来说很重要，那么请小心编写你的makefile，并且尽量遵守良好的编码习惯。</p>

<p>编码健全的makefile的重点之一就是检查命令的返回状态。当然，make将会自动检查简单的命令，但是makefile 通常会使用可能不会处理失败状态的复合命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>do:
</span><span class='line'>cd i-dont-exist; \
</span><span class='line'>echo *.c</span></code></pre></td></tr></table></div></figure>


<p>运行时，此makefile并不会因为有错误发生而终止运行，尽管这是一个必然会发生的错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make
</span><span class='line'>cd i-dont-exist; \
</span><span class='line'>echo *.c
</span><span class='line'>/bin/sh: line 1: cd: i-dont-exist: No such file or directory
</span><span class='line'>*.c</span></code></pre></td></tr></table></div></figure>


<p>此外，当文件名匹配表达式（globbingexpression）找不到任何的.c文件时，它会不动声色地返回文件名匹配表达式。一个比较好的做法，就是在你编码此命令脚本时，使用shell 的功能来检查以及防止错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SHELL = /bin/bash
</span><span class='line'>do:
</span><span class='line'>cd i-dont-exist && \
</span><span class='line'>shopt -s nullglob &&
</span><span class='line'>echo *.c</span></code></pre></td></tr></table></div></figure>


<p>现在cd 的错误会被正确传送到make，所以echo 命令不会被执行，而且make 会因为有错误发生而终止运行。此外，设定bash的nullglob选项，将会使得文件名匹配模式在找不到文件时返回空字符串。（当然，你的应用程序可能比较喜欢文件名匹配模式。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make
</span><span class='line'>cd i-dont-exist && \
</span><span class='line'>echo *.c
</span><span class='line'>/bin/sh: line 1: cd: i-dont-exist: No such file or directory
</span><span class='line'>make: *** [do] Error 1</span></code></pre></td></tr></table></div></figure>


<p>另一个良好的编码习惯，就是将你的代码编排成最具可读性的形式。我所看过的makefile，多半编排得很差，这必然会造成难以阅读的情况。下面这两段代码哪一个比较容易阅读</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>？
</span><span class='line'>
</span><span class='line'>_MKDIRS := $(shell for d in $(REQUIRED_DIRS); do [[ -d $$d \
</span><span class='line'>]] || mkdir -p $$d; done)
</span></code></pre></td></tr></table></div></figure>


<p>或：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_MKDIRS := $(shell                             \
</span><span class='line'>             for d in $(REQUIRED_DIRS);        \
</span><span class='line'>             do                                \
</span><span class='line'>                 [[ -d $$d ]] || mkdir -p $$d; \
</span><span class='line'>             done)
</span></code></pre></td></tr></table></div></figure>


<p>如果你像大部分人那样，你将会觉得第一段代码比较难分析，不容易找到分号，很难计算有几句语句。这些都是必须注意到的地方。在命令脚本中，你会遇到的语法错误，多半是由于漏掉了分号、反斜线或是其他的分隔符，比如管道（pipe）和逻辑运算符。</p>

<p>此外请注意，并非任何分隔符被漏掉都会产生错误。例如，下面的错误都不会产生shell的语法错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TAGS:
</span><span class='line'>cd src \
</span><span class='line'>ctags --recurse
</span><span class='line'>
</span><span class='line'>disk_free:
</span><span class='line'>echo "Checking free disk space..." \
</span><span class='line'>df . | awk '{ print $$4 }'</span></code></pre></td></tr></table></div></figure>


<p>把命令编排得具有可读性，将会让以上所提到的错误很容易被发现。编排用户自定义函数的时候可以采用内缩的做法。有时候，宏扩展后的结果中，额外的空格将会造成问题。如果是这样，你可以将它的编排结果封装在strip 函数的调用中。编排一长串值时，你可以让每个值自成一行。在每个工作目标的前面加上注释，可以提供简介以及说明参数列表。</p>

<p>下一个良好的编码习惯就是大量使用变量来保存常用的值。如同在程序中一样，过度使用文字值将会造成重复的程序代码，以及导致维护困难与缺陷。变量的另一个优点是在执行期间，你可以基于调试的目的，让make把它们给显示出来。稍后你将会在“调试技术”一节中看到一个不错的命令行界面。</p>

<h3>具保护功能的编码</h3>

<p>具保护功能的代码，就是如果你的假设或预计有一个是错误的（if 测试结果永远为假、assert 函数决不会失败或追踪代码）才会执行的代码，这让你能够查看make 内部工作的状态。</p>

<p>事实上，你已经在本书其他地方看到过此类代码，不过为了方便起见，此处会重复加以描述。</p>

<p>确认检查就是具保护功能代码的最佳范例。如下的代码范例可用来确认当前所运行的make 版本是否为3.80：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NEED_VERSION := 3.80
</span><span class='line'>$(if $(filter $(NEED_VERSION),$(MAKE_VERSION)),, \
</span><span class='line'>$(error You must be running make version $(NEED_VERSION).))</span></code></pre></td></tr></table></div></figure>


<p>对Java 应用程序来说，它可用来检查CLASSPATH 中的文件。</p>

<p>进行确认的代码还可以用来确认某个东西是否为真，比如前一节用来创建目录的代码就是这样。</p>

<p>另一个重要的具保护功能的编码技术，就是使用“流程控制”一节所定义的assert 函数。下面是其中的若干版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># $(call assert,condition,message)
</span><span class='line'>define assert
</span><span class='line'>    $(if $1,,$(error Assertion failed: $2))
</span><span class='line'>endef
</span><span class='line'>
</span><span class='line'># $(call assert-file-exists,wildcard-pattern)
</span><span class='line'>define assert-file-exists
</span><span class='line'>    $(call assert,$(wildcard $1),$1 does not exist)
</span><span class='line'>endef
</span><span class='line'>
</span><span class='line'># $(call assert-not-null,make-variable)
</span><span class='line'>define assert-not-null
</span><span class='line'>    $(call assert,$($1),The variable "$1" is null)
</span><span class='line'>endef</span></code></pre></td></tr></table></div></figure>


<p>我发现在makefile 中到处声明assert的调用，是找出漏掉和打错的参数以及违反其他假定的既便宜又有效的方法。</p>

<p>我曾在第四章中编写了一对可用来追踪用户自定义函数扩展过程的函数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># $(debug-enter)
</span><span class='line'>debug-enter = $(if $(debug_trace),\
</span><span class='line'>              $(warning Entering $0($(echo-args))))
</span><span class='line'>
</span><span class='line'># $(debug-leave)
</span><span class='line'>debug-leave = $(if $(debug_trace),$(warning Leaving $0))
</span><span class='line'>
</span><span class='line'>comma := ,
</span><span class='line'>echo-args = $(subst ' ','$(comma) ',\
</span><span class='line'>            $(foreach a,1 2 3 4 5 6 7 8 9,'$($a)'))</span></code></pre></td></tr></table></div></figure>


<p>你可以把这些宏调用到自己的函数里，并让它们处在停用状态，直到你需要进行调试。要启用它们时，请将debug_trace 设定成任何非空值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make debug_trace=1</span></code></pre></td></tr></table></div></figure>


<p>正如第四章所说，这些追踪宏本身存在一些问题，不过仍然可用来追踪缺陷。</p>

<p>最后要介绍的具保护功能的编码技术，就是通过make变量让@命令修饰符的禁用更容易进行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>QUIET := @
</span><span class='line'>...
</span><span class='line'>target:
</span><span class='line'>$(QUIET) some command</span></code></pre></td></tr></table></div></figure>


<p>使用此技术时，如果想看到安静模式命令的执行，你可以在命令行上以如下的方式重新定义QUIET：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make QUIET=</span></code></pre></td></tr></table></div></figure>


<h2>调试技术</h2>

<p>这一节将会探讨一般的调试技术与相关主题。最后你会觉得，调试就好像是一个装了各种你需要的东西的幸运袋。这些技术对我来说都很实用，即使是最简单的makefile问题，我也是靠着它们来进行调试的，或许它们也能协助你。</p>

<p>3.80版中一个非常恼人的缺陷是，当make汇报makefile中的问题时还会包含一个行号，我发现那个行号通常是错的。我并未调查出是否此问题是由于引入文件、多行变量赋值或用户自定义宏的关系，但是它的确是存在的。make 所汇报的行号通常会比实际的行号还大，在复杂的makefile 中，我发现行号差了20 行之多。</p>

<p>通常，查看make 变量值的最简单方法，就是在工作目标的执行期间输出它。尽管使用warning加入输出语句很简单，而为了在长期运行中节省时间你会想要加入通用的debug工作目标，但是必须多费一番工夫。下面是一个简单的debug 工作目标：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>debug:
</span><span class='line'>$(for v,$(V), \
</span><span class='line'>$(warning $v = $($v)))</span></code></pre></td></tr></table></div></figure>


<p>要使用此功能，只需要在命令行上将一份需要输出的变量的列表赋值给变量V以及指定debug 工作目标：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make V="USERNAME SHELL" debug
</span><span class='line'>makefile:2: USERNAME = Owner
</span><span class='line'>makefile:2: SHELL = /bin/sh.exe
</span><span class='line'>make: debug is up to date.</span></code></pre></td></tr></table></div></figure>


<p>如果你觉得这样很麻烦，只要使用MAKECMDGOALS就可以避免对变量V进行赋值的动作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>debug:
</span><span class='line'>$(for v,$(V) $(MAKECMDGOALS), \
</span><span class='line'>$(if $(filter debug,$v),,$(warning $v = $($v))))</span></code></pre></td></tr></table></div></figure>


<p>现在，你只需要在命令行上直接指定需要输出的变量即可。但是我并不建议使用这个技术，因为当make的警告信息指出它不知道如何更新变量时（因为它们是以工作目标的形式出现在命令行上的），你可能会产生混淆：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make debug PATH SHELL
</span><span class='line'>makefile:2: USERNAME = Owner
</span><span class='line'>makefile:2: SHELL = /bin/sh.exe
</span><span class='line'>make: debug is up to date.
</span><span class='line'>make: *** No rule to make target USERNAME. Stop.</span></code></pre></td></tr></table></div></figure>


<p>我在第十章曾简单提到过，使用开启调试功能的shell可协助我们了解make在后台所进行的活动。尽管make在执行命令之前会输出命令脚本中的命令，但是它并不会输出shell函数中所执行的命令。通常这些命令是既微妙且复杂的，尤其是因为它们可能会被立即执行或是延后执行（如果它们出现在递归变量中）。查看这些命令如何执行的一个方法，就是要求subshell 启用调试的功能：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DATE := $(shell date +%F)
</span><span class='line'>OUTPUT_DIR = out-$(DATE)
</span><span class='line'>
</span><span class='line'>make-directories := $(shell [ -d $(OUTPUT_DIR) ] || mkdir -p
</span><span class='line'>$(OUTPUT_DIR))
</span><span class='line'>
</span><span class='line'>all: ;</span></code></pre></td></tr></table></div></figure>


<p>如果运行时指定了sh 的调试选项，我们将会看到：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make SHELL="sh -x"
</span><span class='line'>+ date +%F
</span><span class='line'>+ '[' -d out-2004-05-11 ']'
</span><span class='line'>+ mkdir -p out-2004-05-11</span></code></pre></td></tr></table></div></figure>


<p>这么做，你不仅可以看到make的警告信息，也可以看到额外的调试信息，因为开启调试功能的shell 还会显示变量和表达式的值。</p>

<p>本书所举过的许多范例都用到了嵌套层极深的表达式，比如下面这个用来在Windows/Cygwin 系统上检查PATH 变量的表达式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(if $(findstring /bin/,                             \
</span><span class='line'>     $(firstword                                     \
</span><span class='line'>     $(wildcard                                      \
</span><span class='line'>     $(addsuffix /sort$(if $(COMSPEC),.exe),         \
</span><span class='line'>     $(subst :, ,$(PATH)))))),,                      \
</span><span class='line'>$(error Your PATH is wrong, c:/usr/cygwin/bin should \
</span><span class='line'>  precede c:/WINDOWS/system32))</span></code></pre></td></tr></table></div></figure>


<p>要对这些表达式进行调试并没有什么好办法。一个可行的办法就是将它们拆开，输出每个子表达式（subexpression）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(warning $(subst :, ,$(PATH)))
</span><span class='line'>$(warning /sort$(if $(COMSPEC),.exe))
</span><span class='line'>$(warning $(addsuffix /sort$(if $(COMSPEC),.exe), \
</span><span class='line'>          $(subst :, ,$(PATH))))
</span><span class='line'>
</span><span class='line'>$(warning $(wildcard \
</span><span class='line'>$(addsuffix /sort$(if $(COMSPEC),.exe), \
</span><span class='line'>                 $(subst :, ,$(PATH)))))</span></code></pre></td></tr></table></div></figure>


<p>尽管这有点烦人，但是在没有调试器可用的状况下，这或许是确定各个子表达式值的最好办法（有时是唯一的办法）。</p>

<h2>常见的错误信息</h2>

<p>3.81 版的GNU make 在线使用手册列有make的错误信息以及它们产生的原因。我们在此只会介绍若干最常见的错误。此处所提到的问题中的部分并非完全是make 的错误，比如命令脚本中的语法错误，但是它们仍然是开发人员常会遇到的问题。至于完整的make 错误列表，请参考make 在线使用手册。</p>

<p>make 所输出的错误信息具有如下的标准格式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makefile:n: *** message. Stop.</span></code></pre></td></tr></table></div></figure>


<p>或：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make:n: *** message. Stop.</span></code></pre></td></tr></table></div></figure>


<p>makefile 部分是发生错误的makefile或引入文件的名称，下一个部分是发生错误的行号，接着是三个星号，最后是错误信息。</p>

<p>请注意，make的工作就是运行其他的程序，如果发生错误，即使问题出在你的makefile上，也非常可能会让人觉得错误是来自其他程序。例如，shell发生错误有可能是命令脚本</p>

<p>形式不正确的结果，编译器发生错误有可能是因为命令行参数不正确。找出错误信息产生自哪个程序，是你解决此问题时所必须进行的第一项工作。幸好，make 的错误信息相当具有说明性。</p>

<h3>语法错误</h3>

<p>这些通常是打字上的错误：漏掉圆括号、以空格代替跳格等。</p>

<p>make 的新用户最常会遇到的一个错误，就是漏掉变量名称的圆括号：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foo:
</span><span class='line'>for f in $SOURCES; \
</span><span class='line'>do \
</span><span class='line'>     ... \
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>这可能会使得make 把$S 扩展成空无一物，而且shell 只会以值为OURCES 的f 执行循环一次。你可能会看到如下适当的shell 错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OURCES: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>不过也可能看不到任何信息，这取决于你处理f的方式。所以，别忘了为你的make 变量加上圆括号。</p>

<h4>missing separator</h4>

<p>如下的错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makefile:2:missing separator. Stop.</span></code></pre></td></tr></table></div></figure>


<p>或：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makefile:2:missing separator (did you mean TAB instead of 8 spaces?). Stop.</span></code></pre></td></tr></table></div></figure>


<p>通常代表你的命令脚本以空格代替了跳格。以文字来解释的话，就是make想要查找一个make分隔符，比如:、=或一个跳格符，但是找不到。它所找到的是它不了解的东西。</p>

<h4>commands commence before first target</h4>

<p>跳格符的问题又出现了！</p>

<p>此信息首次出现在“分析命令”一节中。当命令脚本之外的文本行以一个跳格符开头时，此错误似乎通常会出现在makefile的中间。make将会尽可能消除此模糊不清的状态，但如果该文本行无法被确定为变量赋值、条件表达式或多行宏定义，make 就会认为这代表命令放错地方了。</p>

<h4>unterminated variable reference</h4>

<p>这是一个简单但常见的错误，代表你没有为变量引用或函数调用加上适当数目的右圆括号。当函数调用和变量引用嵌套很多层时，make 文件看起来很像Lisp！使用能够检查圆括号是否完整的编辑器，比如Emacs，是避免此类错误最可靠的方法。</p>

<h3>命令脚本中的错误</h3>

<p>脚本中有三种常见的错误：在多行命令中漏掉一个分号，一个不完整或不正确的路径变量，或是一个“执行时会遇到问题的”命令。</p>

<p>我们已经在“良好的编码习惯”一节中探讨过漏掉分号的问题，所以此处不再做进一步的说明。</p>

<p>当shell 无法找到foo 命令时，将会显示如下的典型错误信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash: foo: command not found</span></code></pre></td></tr></table></div></figure>


<p>这表示shell 已经搜索过PATH变量中的每个变量，但是找不到相符的可执行文件。要修正此错误，你必须更新你的PATH变量，它通常被放在你的.profile 文件（Bourne shell）、.bashrc 文件（bash）或.cshrc 文件（C shell）中。当然，它也有可能设定在makefile文件中的PATH变量里，并且从make 导出PATH 变量。</p>

<p>最后，当shell命令执行失败的时候，它会以非零的结束状态终止执行。在此状况下，make将会以如下的信息汇报此错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make
</span><span class='line'>touch /foo/bar
</span><span class='line'>touch: creating /foo/bar: No such file or directory
</span><span class='line'>make: *** [all] Error 1</span></code></pre></td></tr></table></div></figure>


<p>此处执行失败的命令是touch，它会输出自己的错误信息以说明此状态。下一行是make的错误摘要。执行失败的makefile工作目标会被显示在中括号里，后面还会跟着运行失败的程序的结束值。如果程序结束运行是因为信号的缘故，make 将会输出比较详细的信息，而不会只显示非零的结束状态。</p>

<p>并请注意，因为@ 修饰符而安静执行的命令也会执行失败。在此状况下，所显示的错误信息好像到处都是。</p>

<p>不管是以上哪种状况，错误信息皆来自make 所运行的程序，而不是make 本身。</p>

<h4>No Rule to Make Target</h4>

<p>此信息有两种形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make: *** No rule to make target XXX. Stop.</span></code></pre></td></tr></table></div></figure>


<p>以及：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make: *** No rule to make target XXX, needed by YYY. Stop.</span></code></pre></td></tr></table></div></figure>


<p>这代表make 判断文件XXX需要更新，但是make找不到执行此工作的任何规则。在放弃和输出此信息之前，make 将会在它的数据库中搜索所有的隐含和具体规则。</p>

<p>此项错误的理由可能有三个：</p>

<ul>
<li>你的makefile 漏掉了更新此文件所需要的一个规则。在此状况下，你必须加入描述如何建立此工作目标的规则。</li>
<li>在makefile 中打错了字。不是make找错了文件，就是更新此文件的规则指定了错误的文件。因为make变量的使用，你很难在makefile中发现打错字的问题。有时候，要确定复杂文件名的值是否正确唯有将它输出：你可以直接输出变量，或是查看make 的内部数据库。</li>
<li>这个文件应该存在，但是make就是找不到它，可能是因为把它漏掉了，或是因为make不知道要到哪里找它。当然，有时make是绝对正确的，文件缺失的原因或许是你忘了将它从CVS调出。较常见的状况是，make找不到源文件只是因为文件放错地方了。有时是因为源文件放在独立的源文件树中，或是文件产生自另一个程序且所产生的文件放在二进制文件树中。</li>
</ul>


<h4>Overriding Commands for Target</h4>

<p>make只允许一个工作目标拥有一个命令脚本（双冒号规则除外，但是很少使用）。如果一个工作目标被指定了一个以上的命令脚本，make将会输出如下的警告信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makefile:5: warning: overriding commands for target foo</span></code></pre></td></tr></table></div></figure>


<p>它也可能会显示如下的警告信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>makefile:2: warning: ignoring old commands for target foo</span></code></pre></td></tr></table></div></figure>


<p>第一个警告信息指出，make在第5行找到了第二个命令脚本；第二个警告信息指出，位于第2 行的最初命令脚本被覆盖掉了。</p>

<p>在复杂的makefile 中，一个工作目标通常会被定义许多次，每一次都会加入它自己的必要条件。这些工作目标中通常会有一个被指定命令脚本，但是在开发或调试期间，你很容易会加入另一个命令脚本而忘记这么做会覆盖掉现有的命令脚本。</p>

<p>例如，我们可能会在一个引入文件中定义一个通用的工作目标：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 建立一个jar 文件。
</span><span class='line'>$(jar_file):
</span><span class='line'>$(JAR) $(JARFLAGS) -f $@ $^</span></code></pre></td></tr></table></div></figure>


<p>这使得其他的makefile可以加入自己的必要条件。然后我们可能会在某个makefile 文件中这么做：</p>

<p><strong>为jar 的建立设定工作目标并且加入必要条件</strong></p>

<pre><code>jar_file = parser.jar
$(jar_file): $(class_files)
</code></pre>

<p>如果我们不小心将一个命令脚本加入此makefile，make可能会产生overriding的警告信</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile常用函数]]></title>
    <link href="http://iskey.github.io/blog/2016/04/12/Makefile-Functions/"/>
    <updated>2016-04-12T10:10:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/12/Makefile-Functions</id>
    <content type="html"><![CDATA[<p>[TOC]</p>

<h1>Makefile常用函数</h1>

<hr />

<h2>字符串处理函数</h2>

<h3>字符串替换函数-subst</h3>

<ul>
<li>cmd：<code>$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</code></li>
<li>功能：把<code>&lt;text&gt;</code>中的<code>&lt;from&gt;</code>替换为<code>&lt;to&gt;</code></li>
</ul>


<h3>模式字符串替换函数-patsubst</h3>

<ul>
<li>cmd：<code>$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</code></li>
<li>例子：<code>$(patsubst %.c,%.o,c.c a.c)</code></li>
<li>说明：与<code>$(var:&lt;pattern&gt;=&lt;replacement&gt;)</code>相同</li>
</ul>


<h3>去空格格函数-strip</h3>

<ul>
<li>cmd：<code>$(strip &lt;string&gt;)</code></li>
<li>例子：<code>$(strip a b c)</code></li>
</ul>


<h3>查找字符串函数-findstring</h3>

<ul>
<li>cmd：<code>$(findstring &lt;find&gt;,&lt;in&gt;)</code></li>
<li>功能：在字符串<code>&lt;in&gt;</code>中查找<code>&lt;find&gt;</code></li>
<li>返回：如果找到则返回<code>&lt;find&gt;</code>,否则返回空字符串</li>
</ul>


<h3>过滤函数-filter</h3>

<ul>
<li>cmd：<code>$(filter &lt;pattern...&gt;,&lt;text&gt;)</code></li>
<li>功能：以<code>&lt;pattern&gt;</code>模式过滤<code>&lt;text&gt;</code>字符串中的单词，保留符合<code>&lt;pattern&gt;</code>的单词，可以有多个模式</li>
<li>返回：返回符合模式<code>&lt;pattern&gt;</code>的字符串</li>
<li>例子：
      sources:=foo.c bar.c baz.s ugh.h
      foo:$(sources)
      cc $(filter %.c %.s,$(sources)) -o foo</li>
</ul>


<h3>反过滤函数-filter-out</h3>

<ul>
<li>cmd：<code>$(filter-out &lt;pattern...&gt;,&lt;text&gt;)</code></li>
<li>功能：以<code>&lt;pattern&gt;</code>模式过滤<code>&lt;text&gt;</code>字符串的单词，去除符合模式<code>&lt;pattern&gt;</code>的单词，可以有多个模式</li>
<li>返回：返回不符合模式<code>&lt;pattern&gt;</code>的字符串</li>
<li><p>示例：
      objects= main1.o main2.o foo.o bar.o
      mains= main1.o main2.o</p>

<pre><code>  $(filter-out $(mains),$(objects))
</code></pre></li>
</ul>


<h3>排序函数-sort</h3>

<ul>
<li>cmd：<code>$(sort &lt;list&gt;)</code></li>
<li>功能：给字符串<code>&lt;list&gt;</code>中的单词排序（升序）</li>
<li>返回：返回排序后的字符串</li>
<li>示例：<code>$(sort foo bar lose)</code></li>
<li>备注：sort函数会去除<code>&lt;list&gt;</code>中相同的单词</li>
</ul>


<h3>取单词函数-word</h3>

<ul>
<li>cmd：<code>$(word &lt;n&gt;,&lt;text&gt;)</code></li>
<li>功能：取字符串<code>&lt;text&gt;</code>中的第<code>&lt;n&gt;</code>个单词</li>
<li>返回：返回第<code>&lt;n&gt;</code>个字符串，如果<code>&lt;n&gt;</code>比<code>&lt;text&gt;</code>的单词个数大，则返回空字符串</li>
</ul>


<h3>取单词串函数-wordlist</h3>

<ul>
<li>cmd：<code>$(wordlist &lt;s&gt;,&lt;e&gt;,&lt;text&gt;)</code></li>
<li>功能：从<code>&lt;text&gt;</code>中取从<code>&lt;s&gt;</code>到<code>&lt;e&gt;</code>的单词串，<code>&lt;s&gt;</code>和<code>&lt;e&gt;</code>是一个数字</li>
<li>返回：如果<code>&lt;s&gt;</code>大于<code>&lt;text&gt;</code>的长度，则返回空字符串</li>
<li>示例：<code>$(worllist 2,3,foo bar baz)</code></li>
</ul>


<h3>单词个数统计函数-words</h3>

<ul>
<li>cmd：<code>$(words &lt;text&gt;)</code></li>
<li>功能：统计<code>&lt;text&gt;</code>中字符串中的单词个数</li>
</ul>


<h2>文件名操作函数</h2>

<h3>取目录函数-dir</h3>

<ul>
<li>cmd：<code>$(dir &lt;names...&gt;)</code></li>
<li>功能：从文件名序列<code>&lt;names&gt;</code>中取出目录部分</li>
</ul>


<h3>取文件函数-notdir</h3>

<ul>
<li>cmd：<code>$(notdir &lt;names...&gt;)</code></li>
<li>功能：从文件名序列<code>&lt;names&gt;</code>中取出文件名部分</li>
</ul>


<h3>取后缀函数-suffix</h3>

<ul>
<li>cmd：<code>$(suffix &lt;names&gt;)</code></li>
<li>功能：从文件名序列<code>&lt;names...&gt;</code>中取出各个文件名的后缀</li>
</ul>


<h3>取前缀函数-basename</h3>

<ul>
<li>cmd：<code>$(basename &lt;names&gt;)</code></li>
<li>功能：从文件名序列<code>&lt;names...&gt;</code>中取出各个文件名的前缀</li>
<li>返回：返回各个文件前缀，如果文件没有前缀，则返回空字符串</li>
</ul>


<h3>加后缀函数-addsuffix</h3>

<ul>
<li>cmd：<code>$(addsuffix &lt;suffix&gt;,&lt;names...&gt;)</code></li>
<li>功能：把后缀<code>&lt;suffix&gt;</code>加到<code>&lt;names&gt;</code>中的每个单词后面</li>
</ul>


<h3>加前缀函数-addprefrix</h3>

<ul>
<li>cmd：<code>$(addprefix &lt;prefix&gt;,&lt;names...&gt;)</code></li>
<li>功能：把前缀<code>&lt;prefix&gt;</code>加到<code>&lt;names&gt;</code>中的每个单词前面</li>
</ul>


<h3>连接函数-join</h3>

<ul>
<li>cmd：<code>$(join &lt;list1&gt;,&lt;list2&gt;)</code></li>
<li>功能：把<code>&lt;list1&gt;</code>中的单词对应的加到<code>&lt;list2&gt;</code>的单词后面</li>
</ul>


<h3>取目录文件函数-wildcard</h3>

<ul>
<li>cmd：<code>$(wildcard &lt;pattern&gt;)</code></li>
<li>功能：取目录下所有匹配<code>&lt;pattern&gt;</code>的文件，生成一个以空格间隔的文件名列表</li>
<li>示例：<code>$(wildcard *.c ./foo/*.c)</code></li>
</ul>


<h2>foreach函数</h2>

<ul>
<li>cmd：<code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</code></li>
<li>功能：把参数<code>&lt;list&gt;</code>中的单词逐一取出放到参数<code>&lt;var&gt;</code>所指定的变量中，然后再执行<code>&lt;text&gt;</code>所包含的表达式</li>
<li>示例：
      names=a b c d
      files:=$(foreach iskey,$(names),$(iskey).o)</li>
</ul>


<h2>if函数</h2>

<ul>
<li>cmd：<code>$(if &lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)</code></li>
<li>功能：与GNU的make所支持的条件语句ifeq相似</li>
<li>返回：如果<code>&lt;condition&gt;</code>为真，则返回<code>&lt;then-part&gt;</code>部分，否则返回<code>&lt;else-part&gt;</code>部分</li>
</ul>


<h2>call函数</h2>

<ul>
<li>cmd：<code>$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)</code></li>
<li>功能：当make执行这个函数时，<code>$(1),$(2),$(3)</code>等，会被参数<code>$(parm1),$(parm2),$(parm3)</code>替换</li>
<li>示例：
      reverse=$(1) $(2)
      foo= $(call reverse,a,b)</li>
</ul>


<h2>origin函数</h2>

<ul>
<li>cmd：<code>$(origin &lt;variable&gt;)</code></li>
<li>功能：检查变量是在哪里定义的</li>
</ul>


<h2>shell函数</h2>

<ul>
<li>cmd：<code>$(Shell cat a.txt)</code></li>
<li>功能：执行shell命令</li>
</ul>


<h2>makefile自定义函数</h2>

<pre><code>define make_target_dirs
    @mkdir -p　$(dir $2)
endef

all：
    $(call make_target_dirs,a,b,c)
</code></pre>

<h2>使用shell命令</h2>

<ul>
<li>shell脚本在target中才有效，其它地方都被忽略掉了</li>
<li>make把每一行shell脚本当做一个独立的单元，他们在单独的进程中运行</li>
<li>make在调用shell之前先进行预处理，会展开所有的Makefile变量和函数，这些变量和函数都以$开头</li>
<li>make预处理时，所有以$开头的，它都不会放过，要想使用shell自己的变量，应该以$$开头，另外需要注意，shell自己的变量不需要括号</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Netlink通讯]]></title>
    <link href="http://iskey.github.io/blog/2016/04/07/linux-netlink-conn/"/>
    <updated>2016-04-07T13:12:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/07/linux-netlink-conn</id>
    <content type="html"><![CDATA[<p>最近需要使用netlink来完成内核层和用户层的通讯，搜集了一个网上的例子，暂时摘抄在此，并计划再接下来再补充一些东西：</p>

<p><strong>ToDoList:</strong></p>

<blockquote><ul>
<li>[x] 重写netlink内核实现，把处理函数放在内核线程里。</li>
<li>[ ] 使用net_namespace机制下的general netlink接口写一个列子。</li>
</ul>
</blockquote>

<h1>摘录版本</h1>

<hr />

<h2>内核代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/timer.h&gt;
</span><span class='line'>#include &lt;linux/time.h&gt;
</span><span class='line'>#include &lt;linux/types.h&gt;
</span><span class='line'>#include &lt;net/sock.h&gt;
</span><span class='line'>#include &lt;net/netlink.h&gt;
</span><span class='line'>
</span><span class='line'>#define NETLINK_TEST 25
</span><span class='line'>#define MAX_MSGSIZE 1024
</span><span class='line'>int stringlength(char *s);
</span><span class='line'>void sendnlmsg(int pid, char * message);
</span><span class='line'>int err;
</span><span class='line'>struct sock *nl_sk = NULL;
</span><span class='line'>
</span><span class='line'>void sendnlmsg(int pid, char *message)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *skb_1;
</span><span class='line'>    struct nlmsghdr *nlh;
</span><span class='line'>    int len = NLMSG_SPACE(MAX_MSGSIZE);
</span><span class='line'>    int slen = 0;
</span><span class='line'>    if(!message || !nl_sk)
</span><span class='line'>    {
</span><span class='line'>        return ;
</span><span class='line'>    }
</span><span class='line'>    skb_1 = alloc_skb(len,GFP_KERNEL);
</span><span class='line'>    if(!skb_1)
</span><span class='line'>    {
</span><span class='line'>        printk(KERN_ERR "my_net_link:alloc_skb_1 error\n");
</span><span class='line'>    }
</span><span class='line'>    slen = stringlength(message);
</span><span class='line'>    nlh = nlmsg_put(skb_1,0,0,0,MAX_MSGSIZE,0);
</span><span class='line'>
</span><span class='line'>    NETLINK_CB(skb_1).pid = 0;
</span><span class='line'>    NETLINK_CB(skb_1).dst_group = 0;
</span><span class='line'>
</span><span class='line'>    message[slen]= '\0';
</span><span class='line'>    memcpy(NLMSG_DATA(nlh),message,slen+1);
</span><span class='line'>    printk("my_net_link:send message '%s'.\n",(char *)NLMSG_DATA(nlh));
</span><span class='line'>
</span><span class='line'>    netlink_unicast(nl_sk,skb_1,pid,MSG_DONTWAIT);
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int stringlength(char *s)
</span><span class='line'>{
</span><span class='line'>    int slen = 0;
</span><span class='line'>
</span><span class='line'>    for(; *s; s++){
</span><span class='line'>        slen++;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return slen;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void nl_data_ready(struct sk_buff *__skb)
</span><span class='line'> {
</span><span class='line'>    struct sk_buff *skb;
</span><span class='line'>    struct nlmsghdr *nlh;
</span><span class='line'>    char str[100];
</span><span class='line'>    struct completion cmpl;
</span><span class='line'>    int i=2;
</span><span class='line'>    skb = skb_get(__skb);
</span><span class='line'>    if(skb-&gt;len &gt;= NLMSG_SPACE(0))
</span><span class='line'>    {
</span><span class='line'>        nlh = nlmsg_hdr(skb);
</span><span class='line'>
</span><span class='line'>        memcpy(str, NLMSG_DATA(nlh), sizeof(str));
</span><span class='line'>        printk("Message received from pid-%d:%s\n",nlh-&gt;nlmsg_pid, str) ;
</span><span class='line'>        while(i--)
</span><span class='line'>        {
</span><span class='line'>            init_completion(&cmpl);
</span><span class='line'>            wait_for_completion_timeout(&cmpl,3 * HZ);
</span><span class='line'>            sendnlmsg(nlh-&gt;nlmsg_pid, "I am from kernel!");
</span><span class='line'>        }
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'>// Initialize netlink
</span><span class='line'>int netlink_init(void)
</span><span class='line'>{
</span><span class='line'>    nl_sk = netlink_kernel_create(&init_net, NETLINK_TEST, 1,
</span><span class='line'>                                 nl_data_ready, NULL, THIS_MODULE);
</span><span class='line'>
</span><span class='line'>    if(!nl_sk){
</span><span class='line'>        printk(KERN_ERR "my_net_link: create netlink socket error.\n");
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    printk("my_net_link_3: create netlink socket ok.\n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void netlink_exit(void)
</span><span class='line'>{
</span><span class='line'>    if(nl_sk != NULL){
</span><span class='line'>        sock_release(nl_sk-&gt;sk_socket);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    printk("my_net_link: self module exited\n");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(netlink_init);
</span><span class='line'>module_exit(netlink_exit);
</span><span class='line'>
</span><span class='line'>MODULE_AUTHOR("frankzfz");
</span><span class='line'>MODULE_LICENSE("GPL");</span></code></pre></td></tr></table></div></figure>


<h2>　用户空间代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/stat.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;sys/socket.h&gt;
</span><span class='line'>#include &lt;sys/types.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;asm/types.h&gt;
</span><span class='line'>#include &lt;linux/netlink.h&gt;
</span><span class='line'>#include &lt;linux/socket.h&gt;
</span><span class='line'>#include &lt;errno.h&gt;
</span><span class='line'>
</span><span class='line'>#define NETLINK_TEST 25
</span><span class='line'>#define MAX_PAYLOAD 1024 // maximum payload size
</span><span class='line'>
</span><span class='line'>int main(int argc, char* argv[])
</span><span class='line'>{
</span><span class='line'>    int state;
</span><span class='line'>    struct sockaddr_nl src_addr, dest_addr;
</span><span class='line'>    struct nlmsghdr *nlh = NULL;
</span><span class='line'>    struct iovec iov;
</span><span class='line'>    struct msghdr msg;
</span><span class='line'>    int sock_fd, retval;
</span><span class='line'>    int state_smg = 0;
</span><span class='line'>    
</span><span class='line'>    // Create a socket
</span><span class='line'>    sock_fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_TEST);
</span><span class='line'>    if(sock_fd == -1){
</span><span class='line'>        printf("error getting socket: %s", strerror(errno));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // To prepare binding
</span><span class='line'>    memset(&msg,0,sizeof(msg));
</span><span class='line'>    memset(&src_addr, 0, sizeof(src_addr));
</span><span class='line'>    src_addr.nl_family = AF_NETLINK;
</span><span class='line'>    src_addr.nl_pid = getpid(); // self pid
</span><span class='line'>    src_addr.nl_groups = 0; // multi cast
</span><span class='line'>
</span><span class='line'>    retval = bind(sock_fd, (struct sockaddr*)&src_addr, sizeof(src_addr));
</span><span class='line'>    if(retval &lt; 0){
</span><span class='line'>        printf("bind failed: %s", strerror(errno));
</span><span class='line'>        close(sock_fd);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // To prepare recvmsg
</span><span class='line'>    nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD));
</span><span class='line'>    if(!nlh){
</span><span class='line'>        printf("malloc nlmsghdr error!\n");
</span><span class='line'>        close(sock_fd);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    memset(&dest_addr,0,sizeof(dest_addr));
</span><span class='line'>    dest_addr.nl_family = AF_NETLINK;
</span><span class='line'>    dest_addr.nl_pid = 0;
</span><span class='line'>    dest_addr.nl_groups = 0;
</span><span class='line'>
</span><span class='line'>    nlh-&gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);
</span><span class='line'>    nlh-&gt;nlmsg_pid = getpid();
</span><span class='line'>    nlh-&gt;nlmsg_flags = 0;
</span><span class='line'>    strcpy(NLMSG_DATA(nlh),"Hello you iskey!");
</span><span class='line'>
</span><span class='line'>    iov.iov_base = (void *)nlh;
</span><span class='line'>    iov.iov_len = NLMSG_SPACE(MAX_PAYLOAD);
</span><span class='line'>//    iov.iov_len = nlh-&gt;nlmsg_len;
</span><span class='line'>
</span><span class='line'>    memset(&msg, 0, sizeof(msg));
</span><span class='line'>    msg.msg_name = (void *)&dest_addr;
</span><span class='line'>    msg.msg_namelen = sizeof(dest_addr);
</span><span class='line'>    msg.msg_iov = &iov;
</span><span class='line'>    msg.msg_iovlen = 1;
</span><span class='line'>
</span><span class='line'>    state_smg = sendmsg(sock_fd,&msg,0);
</span><span class='line'>    if(state_smg == -1)
</span><span class='line'>    {
</span><span class='line'>        printf("get error sendmsg = %s\n",strerror(errno));
</span><span class='line'>    }
</span><span class='line'>    printf("send netlink message ok.\n");
</span><span class='line'>
</span><span class='line'>    memset(nlh,0,NLMSG_SPACE(MAX_PAYLOAD));   
</span><span class='line'>    // Read message from kernel
</span><span class='line'>    while(1){
</span><span class='line'>        printf("In while recvmsg\n");
</span><span class='line'>        state = recvmsg(sock_fd, &msg, 0);
</span><span class='line'>        if(state&lt;0)
</span><span class='line'>        {
</span><span class='line'>            printf("state&lt;1");
</span><span class='line'>        }
</span><span class='line'>        printf("Received message: %s\n",(char *) NLMSG_DATA(nlh));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    close(sock_fd);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>内核线程版本</h1>

<hr />

<h2>内核代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/timer.h&gt;
</span><span class='line'>#include &lt;linux/time.h&gt;
</span><span class='line'>#include &lt;linux/types.h&gt;
</span><span class='line'>#include &lt;net/sock.h&gt;
</span><span class='line'>#include &lt;net/netlink.h&gt;
</span><span class='line'>#include "linux/list.h"
</span><span class='line'>#include &lt;linux/kthread.h&gt;
</span><span class='line'>
</span><span class='line'>#define NETLINK_TEST 25
</span><span class='line'>#define MAX_MSGSIZE 1024
</span><span class='line'>int stringlength(char *s);
</span><span class='line'>void sendnlmsg(int pid, char * message);
</span><span class='line'>int err;
</span><span class='line'>struct sock *nl_sk = NULL;
</span><span class='line'>
</span><span class='line'>struct _my_user_client_{
</span><span class='line'>    int pid;
</span><span class='line'>    unsigned char *msg;
</span><span class='line'>    struct list_head list; 
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>//struct list_head client_head;
</span><span class='line'>LIST_HEAD(client_head);
</span><span class='line'>spinlock_t g_cli_list_lock= SPIN_LOCK_UNLOCKED;
</span><span class='line'>struct task_struct *g_thread[10];
</span><span class='line'>
</span><span class='line'>int client_thread(void *data)
</span><span class='line'>{
</span><span class='line'>    struct list_head *plist, *list_n;
</span><span class='line'>    struct _my_user_client_ *my_client;
</span><span class='line'>    struct completion cmpl;
</span><span class='line'>    
</span><span class='line'>    init_completion(&cmpl);
</span><span class='line'>    daemonize("iskey_cli");
</span><span class='line'>
</span><span class='line'>    while(!kthread_should_stop())
</span><span class='line'>    //while(1)
</span><span class='line'>    {        
</span><span class='line'>        spin_lock(&g_cli_list_lock);
</span><span class='line'>        list_for_each_safe(plist, list_n, &client_head){
</span><span class='line'>            my_client= (struct _my_user_client_ *)list_entry(plist, struct _my_user_client_, list);
</span><span class='line'>            printk(KERN_ERR "kernel received msg:%s pid:%d.\n", my_client-&gt;msg, my_client-&gt;pid);
</span><span class='line'>            sendnlmsg(my_client-&gt;pid, "I am from kernel!");
</span><span class='line'>            list_del(plist);
</span><span class='line'>            kfree(my_client);
</span><span class='line'>        }
</span><span class='line'>        spin_unlock(&g_cli_list_lock);
</span><span class='line'>        schedule_timeout_interruptible(msecs_to_jiffies(1));
</span><span class='line'>        wait_for_completion_timeout(&cmpl,3 * HZ);
</span><span class='line'>    }
</span><span class='line'>    printk(KERN_ERR "### thread end.\n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void sendnlmsg(int pid, char *message)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *skb_1;
</span><span class='line'>    struct nlmsghdr *nlh;
</span><span class='line'>    int len = NLMSG_SPACE(MAX_MSGSIZE);
</span><span class='line'>    int slen = 0;
</span><span class='line'>    if(!message || !nl_sk)
</span><span class='line'>    {
</span><span class='line'>        return ;
</span><span class='line'>    }
</span><span class='line'>    skb_1 = alloc_skb(len,GFP_KERNEL);
</span><span class='line'>    if(!skb_1)
</span><span class='line'>    {
</span><span class='line'>        printk(KERN_ERR "my_net_link:alloc_skb_1 error\n");
</span><span class='line'>    }
</span><span class='line'>    slen = stringlength(message);
</span><span class='line'>    nlh = nlmsg_put(skb_1,0,0,0,MAX_MSGSIZE,0);
</span><span class='line'>
</span><span class='line'>    NETLINK_CB(skb_1).pid = 0;
</span><span class='line'>    NETLINK_CB(skb_1).dst_group = 0;
</span><span class='line'>
</span><span class='line'>    message[slen]= '\0';
</span><span class='line'>    memcpy(NLMSG_DATA(nlh),message,slen+1);
</span><span class='line'>    printk("my_net_link:send message '%s' pid:%d.\n",(char *)NLMSG_DATA(nlh), pid);
</span><span class='line'>
</span><span class='line'>    netlink_unicast(nl_sk,skb_1,pid,MSG_DONTWAIT);
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int stringlength(char *s)
</span><span class='line'>{
</span><span class='line'>    int slen = 0;
</span><span class='line'>
</span><span class='line'>    for(; *s; s++){
</span><span class='line'>        slen++;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return slen;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void nl_data_ready(struct sk_buff *__skb)
</span><span class='line'> {
</span><span class='line'>    struct sk_buff *skb;
</span><span class='line'>    struct nlmsghdr *nlh;
</span><span class='line'>    char str[100];
</span><span class='line'>    struct completion cmpl;
</span><span class='line'>    int i=2;
</span><span class='line'>    skb = skb_get(__skb);
</span><span class='line'>    if(skb-&gt;len &gt;= NLMSG_SPACE(0))
</span><span class='line'>    {
</span><span class='line'>        nlh = nlmsg_hdr(skb);
</span><span class='line'>
</span><span class='line'>        memcpy(str, NLMSG_DATA(nlh), sizeof(str));
</span><span class='line'>
</span><span class='line'>        struct _my_user_client_ *client= kmalloc(sizeof(struct _my_user_client_), GFP_KERNEL);
</span><span class='line'>        unsigned char *t_data= kmalloc(sizeof(str),GFP_KERNEL);
</span><span class='line'>        memcpy(t_data, str, sizeof(str));
</span><span class='line'>        client-&gt;msg= t_data;
</span><span class='line'>        client-&gt;pid= nlh-&gt;nlmsg_pid;
</span><span class='line'>        spin_lock(&g_cli_list_lock);
</span><span class='line'>        list_add(&(client-&gt;list),&client_head);
</span><span class='line'>        spin_unlock(&g_cli_list_lock);
</span><span class='line'>        
</span><span class='line'>        printk("Message received from pid-%d:%s\n",nlh-&gt;nlmsg_pid, str) ;
</span><span class='line'>//        while(i--)
</span><span class='line'>//        {
</span><span class='line'>//            init_completion(&cmpl);
</span><span class='line'>//            wait_for_completion_timeout(&cmpl,3 * HZ);
</span><span class='line'>//            sendnlmsg(nlh-&gt;nlmsg_pid, "I am from kernel!");
</span><span class='line'>//        }
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'> }
</span><span class='line'>
</span><span class='line'>// Initialize netlink
</span><span class='line'>int netlink_init(void)
</span><span class='line'>{
</span><span class='line'>    nl_sk = netlink_kernel_create(&init_net, NETLINK_TEST, 1,
</span><span class='line'>                                 nl_data_ready, NULL, THIS_MODULE);
</span><span class='line'>
</span><span class='line'>    if(!nl_sk){
</span><span class='line'>        printk(KERN_ERR "my_net_link: create netlink socket error.\n");
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    int cpu=0;
</span><span class='line'>    
</span><span class='line'>//    for_each_present_cpu(cpu){
</span><span class='line'>        printk(KERN_ERR "cpu id is %d.\n", cpu);
</span><span class='line'>        g_thread[cpu]= kthread_create(client_thread, &cpu, "netlink_thread%d", cpu);
</span><span class='line'>        if(IS_ERR(g_thread[cpu])){
</span><span class='line'>            printk(KERN_ERR "client_thread start error.\n");
</span><span class='line'>            return 2;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        printk(KERN_ERR "netlink_thread :%s\n", g_thread[0]-&gt;comm);
</span><span class='line'>        
</span><span class='line'>        wake_up_process(g_thread[cpu]);
</span><span class='line'>//    }
</span><span class='line'>    
</span><span class='line'>    printk("my_net_link_3: create netlink socket ok.\n");
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void netlink_exit(void)
</span><span class='line'>{
</span><span class='line'>    if(nl_sk != NULL){
</span><span class='line'>        sock_release(nl_sk-&gt;sk_socket);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    int cpu= 0;
</span><span class='line'>//    for_each_present_cpu(cpu){
</span><span class='line'>        kthread_stop(g_thread[cpu]);
</span><span class='line'>//    }
</span><span class='line'>    
</span><span class='line'>    printk("my_net_link: self module exited\n");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(netlink_init);
</span><span class='line'>module_exit(netlink_exit);
</span><span class='line'>
</span><span class='line'>MODULE_AUTHOR("frankzfz");
</span><span class='line'>MODULE_LICENSE("GPL");</span></code></pre></td></tr></table></div></figure>


<h2>　用户空间代码</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;sys/stat.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;sys/socket.h&gt;
</span><span class='line'>#include &lt;sys/types.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;asm/types.h&gt;
</span><span class='line'>#include &lt;linux/netlink.h&gt;
</span><span class='line'>#include &lt;linux/socket.h&gt;
</span><span class='line'>#include &lt;errno.h&gt;
</span><span class='line'>
</span><span class='line'>#define NETLINK_TEST 25
</span><span class='line'>#define MAX_PAYLOAD 1024 // maximum payload size
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int main(int argc, char* argv[])
</span><span class='line'>{
</span><span class='line'>    int state;
</span><span class='line'>    struct sockaddr_nl src_addr, dest_addr;
</span><span class='line'>    struct nlmsghdr *nlh = NULL;
</span><span class='line'>    struct iovec iov;
</span><span class='line'>    struct msghdr msg;
</span><span class='line'>    int sock_fd, retval;
</span><span class='line'>    int state_smg = 0;
</span><span class='line'>    
</span><span class='line'>    // Create a socket
</span><span class='line'>    sock_fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_TEST);
</span><span class='line'>    if(sock_fd == -1){
</span><span class='line'>        printf("error getting socket: %s", strerror(errno));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // To prepare binding
</span><span class='line'>    memset(&msg,0,sizeof(msg));
</span><span class='line'>    memset(&src_addr, 0, sizeof(src_addr));
</span><span class='line'>    src_addr.nl_family = AF_NETLINK;
</span><span class='line'>    src_addr.nl_pid = getpid(); // self pid
</span><span class='line'>    src_addr.nl_groups = 0; // multi cast
</span><span class='line'>
</span><span class='line'>    retval = bind(sock_fd, (struct sockaddr*)&src_addr, sizeof(src_addr));
</span><span class='line'>    if(retval &lt; 0){
</span><span class='line'>        printf("bind failed: %s", strerror(errno));
</span><span class='line'>        close(sock_fd);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // To prepare recvmsg
</span><span class='line'>    nlh = (struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD));
</span><span class='line'>    if(!nlh){
</span><span class='line'>        printf("malloc nlmsghdr error!\n");
</span><span class='line'>        close(sock_fd);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    memset(&dest_addr,0,sizeof(dest_addr));
</span><span class='line'>    dest_addr.nl_family = AF_NETLINK;
</span><span class='line'>    dest_addr.nl_pid = 0;
</span><span class='line'>    dest_addr.nl_groups = 0;
</span><span class='line'>
</span><span class='line'>    nlh-&gt;nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);
</span><span class='line'>    nlh-&gt;nlmsg_pid = getpid();
</span><span class='line'>    nlh-&gt;nlmsg_flags = 0;
</span><span class='line'>    strcpy(NLMSG_DATA(nlh),"Hello you iskey!");
</span><span class='line'>
</span><span class='line'>    iov.iov_base = (void *)nlh;
</span><span class='line'>    iov.iov_len = NLMSG_SPACE(MAX_PAYLOAD);
</span><span class='line'>//    iov.iov_len = nlh-&gt;nlmsg_len;
</span><span class='line'>
</span><span class='line'>    memset(&msg, 0, sizeof(msg));
</span><span class='line'>    msg.msg_name = (void *)&dest_addr;
</span><span class='line'>    msg.msg_namelen = sizeof(dest_addr);
</span><span class='line'>    msg.msg_iov = &iov;
</span><span class='line'>    msg.msg_iovlen = 1;
</span><span class='line'>
</span><span class='line'>    state_smg = sendmsg(sock_fd,&msg,0);
</span><span class='line'>    if(state_smg == -1)
</span><span class='line'>    {
</span><span class='line'>        printf("[user] get error sendmsg = %s\n",strerror(errno));
</span><span class='line'>    }
</span><span class='line'>    printf("[user] send netlink message ok.\n");
</span><span class='line'>
</span><span class='line'>    memset(nlh,0,NLMSG_SPACE(MAX_PAYLOAD));   
</span><span class='line'>    // Read message from kernel
</span><span class='line'>    //while(1){
</span><span class='line'>        printf("[user] receiving netlink msg...\n");
</span><span class='line'>        state = recvmsg(sock_fd, &msg, 0);
</span><span class='line'>        if(state&lt;0)
</span><span class='line'>        {
</span><span class='line'>            printf("[user] state&lt;1");
</span><span class='line'>        }
</span><span class='line'>        printf("[user] Received message: %s\n",(char *) NLMSG_DATA(nlh));
</span><span class='line'>    //}
</span><span class='line'>
</span><span class='line'>    close(sock_fd);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
