<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工具 | Iskey's Blog]]></title>
  <link href="http://iskey.github.io/blog/categories/gong-ju/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2019-05-29T00:16:48+08:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[远程数据同步及操作方法]]></title>
    <link href="http://iskey.github.io/blog/2016/03/28/sync-data/"/>
    <updated>2016-03-28T23:44:31+00:00</updated>
    <id>http://iskey.github.io/blog/2016/03/28/sync-data</id>
    <content type="html"><![CDATA[<h1>python fabric</h1>

<pre><code>待补充
</code></pre>

<h1>Winscp远程同步数据脚本</h1>

<pre><code># winscp.exe /console /script=sample.txt 

# Automatically answer all prompts negatively not to stall
# the script on errors
# option echo  on|off
option echo off

# option batch on|off|abort|continue
option batch on

# option confirm  on|off
option confirm off

# option transfer  binary|ascii|automatic
# option synchdelete  on|off
# option exclude clear | &lt;mask&gt;[;&lt;mask2&gt;...]
# option include clear | &lt;mask&gt;[;&lt;mask2&gt;...]

# open [ sftp|ftp|scp:// ][ &lt;user&gt; [ :password ] @ ] &lt;host&gt; [ :&lt;port&gt; ]
# open user:password@example.com
# Connect   FTP地址
open sftp://root:password#@42.xx.xx.xxx:22

# Change remote directory
cd /root/iskey/work/enzo2   
#如果同步到远程FTP时,可用此命令转到远程某个目录下.

# Change local directory
# set to Self's working dir  设置需要同步到远程FTP的本地文件目录
lcd F:\vms\vagrant_work\Django\enzo

# Force binary mode transfer
option transfer ascii

# Download file to the local directory d:\
# get examplefile.txt d:\

# option synchdelete  on|off
option synchdelete off

# option include clear | &lt;mask&gt;[;&lt;mask2&gt;...]
synchronize remote -filemask="|*.pyc; .git\; .idea\; .cache\; .autojump\; .\idea\; .local\; .ipython\; venv\"


# synchronize local|remote|both [ &lt;local directory&gt; [ &lt;remote directory&gt; ] ]  从远程同步到本地用Local;从本地同步到远程用Remote
#synchronize remote  

# Disconnect
close

# Exit WinSCP
exit
</code></pre>

<ul>
<li>使用命令：
<code>C:\...\winscp577\WinSCP.exe /console /script=C:\...\enzo2.txt</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Svn源码树快照生成工具]]></title>
    <link href="http://iskey.github.io/blog/2015/10/06/svn-snapshot/"/>
    <updated>2015-10-06T01:49:12+00:00</updated>
    <id>http://iskey.github.io/blog/2015/10/06/svn-snapshot</id>
    <content type="html"><![CDATA[<p>项目的源码管理工具使用的是SVN，由于涉及的项目组众多，源码库功能模块分散在众多小的源码库中，最终的项目源码发布需要从各个源码库中抓取分支，然后版本发布。</p>

<p>这就给版本管理员带来了麻烦，发布版本的时候，需要从各个源码库抓取源码，然后进行编译，调试过程中出现问题，就在需要更新出问题的源码分支，甚至有可能会临时的修改源码中的某一些文件。</p>

<p>开发人员如果想要使用某一个版本的源码，一般把版本管理员发布的源码包下载下来，然后在进行Bug定位和跟踪，由于源码量比较大，所以造成了很大的不方便。</p>

<p>所以编写了下边的源码快照工具，有以下功能：</p>

<ul>
<li>遍历所有的源码库，获取并记录所有的源码库当前版本号</li>
<li>记录当前源码库中，新修改提交的文件版本号。（svn 只更新提交了的个别文件）</li>
<li>记录当前临时修改，但没有提交的代码，并生成patch文件放到patches/目录。</li>
<li>对于无法生成patch的二进制文件，则拷贝到patches/目录。</li>
<li>生成snapshot.sh脚本，这个脚本包含了当前svn源码树的快照信息。</li>
</ul>


<p>在任意的项目SVN源码树，把前边输出的snapshot.sh和patches/目录放到这个源码树的根目录，执行snapshot.就可以恢复到相应的快照状态。</p>

<pre><code>#/bin/sh

### exec this scripts in root directory.
### the snapshot of the work copy will be saved to $OUT.

OUT=$(pwd)/snapshot.sh
PATCH_DIR=$(pwd)/patches
EAT=$(pwd)/eat
patch_idx=0
mime_file_idx=0

echo "### V3.02.20 svn snapshot scripts ###" &gt;$OUT
echo "PATCH_DIR=\$(pwd)/patches" &gt;&gt;$OUT

echo -e "\ncheck_svn_tree()
{
f_temp=\$1
f_temp=\${f_temp%/*}
if ! test -d \$f_temp
then
    while( ! test -d  \${f_temp%/*})
    do
        f_last=\$f_temp
        f_temp=\${f_temp%/*}
        if [ \"\$f_last\" = \"\$f_temp\" ]
        then
            break
        fi
    done
    echo \"will update \$f_temp\"
    svn update \$f_temp
fi
}\n" &gt;&gt;$OUT

#Prepare eat program for svn diff.
touch $EAT
chmod a+x $EAT

rm $PATCH_DIR -fr
mkdir -p $PATCH_DIR

#Find svn repositories.
#svn_repos=$(find ./ -name '*.svn' -type d -print)
svn_repos="./ "
svn_repos+=$(svn status | grep ^Perf | cut -d\' -f 2)
for svn_repo in $svn_repos
do
    #svn_dir=${svn_repo%/*}
    svn_dir=$svn_repo
    cd $svn_dir
    #Get svn local copy's revision.
    REV=$(svn info . | sed -n '/Revision:/p' | awk '{print $2}')
    echo "cd $svn_dir"
    echo "cd $svn_dir" &gt;&gt;$OUT
    echo "echo Cleaning: $svn_dir" &gt;&gt;$OUT
    echo "svn st | grep '^?' | awk '{print $2}' | xargs -I{} rm -rf '{}'" &gt;&gt;$OUT
    echo "svn st --no-ignore | grep '^I' | awk '{print $2}' | xargs -I{} rm -rf '{}'" &gt;&gt;$OUT
    echo "echo Reverting: $svn_dir" &gt;&gt;$OUT
    echo "svn cleanup" &gt;&gt;$OUT
    echo "svn revert . -R" &gt;&gt;$OUT
    echo "svn update . -r $REV" &gt;&gt;$OUT
    echo "svn revert . -R" &gt;&gt;$OUT

    #Get svn local copy's changed files.
    M_LIST=$(svn diff -r BASE:COMMITTED --diff-cmd $EAT | sed -n '/Index:/p' | awk '{print $2}')
    for svn_file in $M_LIST
    do
        echo "  Changed File: "$svn_file
        #Get changed file's revision.
        file_rev=$(svn info $svn_file | sed -n '/Last Changed Rev:/p' | awk '{print $4}')
        echo "#----------" &gt;&gt;$OUT
        echo "svn revert $svn_file &gt;/dev/null 2&gt;&amp;1" &gt;&gt;$OUT
        echo "check_svn_tree $svn_file" &gt;&gt;$OUT
        echo "svn update -r $file_rev $svn_file" &gt;&gt;$OUT
        echo "svn revert $svn_file" &gt;&gt;$OUT
    done

    #Clean again after revert.
    echo "svn st | grep '^?' | awk '{print $2}' | xargs -I{} rm -rf '{}'" &gt;&gt;$OUT
    echo "svn st --no-ignore | grep '^I' | awk '{print $2}' | xargs -I{} rm -rf '{}'" &gt;&gt;$OUT

    #Get temporary patches
    PATCH_FILES=$(svn diff . --diff-cmd $EAT | sed -n '/Index:/p' | awk '{print $2}')
    if [ ""x != "$PATCH_FILES"x ];then
        let patch_idx+=1
        echo "#==========" &gt;&gt;$OUT
        svn diff . &gt;$PATCH_DIR/$patch_idx.patch
        echo "patch -p0 &lt;\$PATCH_DIR/$patch_idx.patch" &gt;&gt;$OUT
    fi

    for mime_file in $PATCH_FILES
    do
        mime_type=$(svn pl $mime_file | sed -n '/svn:mime-type/p')
        if [ ""x != "$mime_type"x ];then
            let mime_file_idx+=1
            cp $mime_file $PATCH_DIR/${mime_file_idx}_${mime_file##*/} -fr
            echo "#==========" &gt;&gt;$OUT
            echo "cp \$PATCH_DIR/${mime_file_idx}_${mime_file##*/} $mime_file -f" &gt;&gt;$OUT
        fi
    done

    echo "cd -&gt;/dev/null" &gt;&gt; $OUT
    echo "" &gt;&gt;$OUT
    echo "###############"&gt;&gt; $OUT
    echo "" &gt;&gt;$OUT
    cd - &gt; /dev/null
done
</code></pre>
]]></content>
  </entry>
  
</feed>
