<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iptables | Iskey's Blog]]></title>
  <link href="http://iskey.github.io/blog/categories/iptables/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2020-07-05T13:10:18+00:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iptables Examples]]></title>
    <link href="http://iskey.github.io/blog/2019/12/26/iptables-examples-port-forward/"/>
    <updated>2019-12-26T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2019/12/26/iptables-examples-port-forward</id>
    <content type="html"><![CDATA[<!-- TOC -->


<ul>
<li><a href="#1-iptables%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B">1. iptables命令简介</a></li>
<li><a href="#2-%E8%AF%AD%E6%B3%95">2. 语法</a>

<ul>
<li><a href="#21-%E9%80%89%E9%A1%B9">2.1. 选项</a></li>
<li><a href="#22-%E5%91%BD%E4%BB%A4%E8%A7%A3%E9%87%8A">2.2. 命令解释</a>

<ul>
<li><a href="#221-%E8%A1%A8%E5%90%8D">2.2.1. 表名</a></li>
</ul>
</li>
<li><a href="#23-%E5%A4%87%E4%BB%BD%E7%B3%BB%E7%BB%9F%E7%8E%B0%E6%9C%89%E7%9A%84%E8%A7%84%E5%88%99">2.3. 备份系统现有的规则</a></li>
<li><a href="#24-%E6%81%A2%E5%A4%8D%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E7%9A%84%E8%A7%84%E5%88%99">2.4. 恢复系统备份的规则</a></li>
<li><a href="#25-%E4%BF%9D%E5%AD%98%E8%A7%84%E5%88%99">2.5. 保存规则</a></li>
<li><a href="#26-%E5%BC%80%E6%94%BE%E6%89%80%E6%9C%89%E7%AB%AF%E5%8F%A3">2.6. 开放所有端口</a></li>
</ul>
</li>
</ul>


<!-- /TOC -->


<p>linux命令之iptables</p>

<h1>1. iptables命令简介</h1>

<p>iptables命令是Linux上常用的防火墙软件，是netfilter项目的一部分。可以直接配置，也可以通过许多前端和图形界面配置。它可以用来过滤、阻塞不需要的流量，允许正常的网络流浪通行。</p>

<h1>2. 语法</h1>

<p>iptables(选项)(参数)</p>

<h2>2.1. 选项</h2>

<pre><code>-t&lt;表&gt;：指定要操纵的表；
-A：向规则链中添加条目；
-D：从规则链中删除条目；
-i：向规则链中插入条目；
-R：替换规则链中的条目；
-L：显示规则链中已有的条目；
-F：清楚规则链中已有的条目；
-Z：清空规则链中的数据包计算器和字节计数器；
-N：创建新的用户自定义规则链；
-P：定义规则链中的默认目标；
-h：显示帮助信息；
-p：指定要匹配的数据包协议类型；
-s：指定要匹配的数据包源ip地址；
-j&lt;目标&gt;：指定要跳转的目标；
-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；
-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。
</code></pre>

<h2>2.2. 命令顺序</h2>

<pre><code>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作
</code></pre>

<h2>2.2. 命令解释</h2>

<h3>2.2.1. 表名</h3>

<pre><code>raw：高级功能，如：网址过滤。
mangle：数据包修改（QOS），用于实现服务质量。
net：地址转换，用于网关路由器。
filter：包过滤，用于防火墙规则。
</code></pre>

<h3>2.3.2. 规则链名</h3>

<pre><code>INPUT链：处理输入数据包。
OUTPUT链：处理输出数据包。
PORWARD链：处理转发数据包。
PREROUTING链：用于目标地址转换（DNAT）。
POSTOUTING链：用于源地址转换（SNAT）。
</code></pre>

<h3>2.3.3. 动作</h3>

<pre><code>accept：接收数据包。
drop：丢弃数据包。
redirct：重定向、映射、透明代理。
snat：源地址转换。
dnat：目标地址转换。
masquerade：IP伪装（NAT），用于ADSL。
log：日志记录。
</code></pre>

<h1>3. 常用命令</h1>

<h2>3.1. 开放指定的端口</h2>

<pre><code>iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT               #允许本地回环接口(即运行本机访问本机)
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT    #允许已建立的或相关连的通行
iptables -A OUTPUT -j ACCEPT         #允许所有本机向外的访问
iptables -A INPUT -p tcp --dport 22 -j ACCEPT    #允许访问22端口
iptables -A INPUT -p tcp --dport 80 -j ACCEPT    #允许访问80端口
iptables -A INPUT -p tcp --dport 21 -j ACCEPT    #允许ftp服务的21端口
iptables -A INPUT -p tcp --dport 20 -j ACCEPT    #允许FTP服务的20端口
iptables -A INPUT -j reject       #禁止其他未允许的规则访问
iptables -A FORWARD -j REJECT     #禁止其他未允许的规则访问
</code></pre>

<h2>3.2. 屏蔽IP</h2>

<pre><code>iptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令
iptables -I INPUT -s 123.0.0.0/8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令
iptables -I INPUT -s 124.45.0.0/16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令
iptables -I INPUT -s 123.45.6.0/24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令是
</code></pre>

<h2>3.3. 查看已添加的iptables规则</h2>

<pre><code>iptables -L -n -v

Chain INPUT (policy DROP 48106 packets, 2690K bytes)
 pkts bytes target     prot opt in     out     source               destination         
 5075  589K ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           
 191K   90M ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0           tcp dpt:22
1499K  133M ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0           tcp dpt:80
4364K 6351M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED
 6256  327K ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0           

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 3382K packets, 1819M bytes)
 pkts bytes target     prot opt in     out     source               destination         
 5075  589K ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0  
</code></pre>

<h2>3.4. 删除已添加的iptables规则</h2>

<p>将所有iptables以序号标记显示，执行：
<code>
iptables -L -n --line-numbers
</code>
比如要删除INPUT里序号为8的规则，执行：
<code>
iptables -D INPUT 8
</code></p>

<h2>2.3. 备份系统现有的规则</h2>

<pre><code>iptables-save &gt; iptables.rules
</code></pre>

<h2>2.4. 恢复系统备份的规则</h2>

<pre><code>iptables-restore &lt; iptables.rules
</code></pre>

<h2>2.5. 保存规则</h2>

<pre><code>service iptables save
</code></pre>

<h2>2.6. 开放所有端口</h2>

<pre><code>iptables -P INPUT ACCEPT   
iptables -P OUTPUT ACCEPT  
</code></pre>

<h2>3.9. 端口转发</h2>

<h3>3.9.1. 同一端口转发</h3>

<p>(192.168.0.132上开通1521端口访问 iptables -A RH-Firewall-1-INPUT -m state &ndash;state NEW -m tcp -p tcp &ndash;dport 1521 -j ACCEPT)
<code>
iptables -t nat -I PREROUTING -p tcp --dport 1521 -j DNAT --to 192.168.0.211
iptables -t nat -I POSTROUTING -p tcp --dport 1521 -j MASQUERADE
</code></p>

<h3>3.9.2. 不同端口转发</h3>

<p>(192.168.0.132上开通21521端口访问 iptables -A RH-Firewall-1-INPUT -m state &ndash;state NEW -m tcp -p tcp &ndash;dport 21521 -j ACCEPT)
<code>
iptables -t nat -A PREROUTING -p tcp -m tcp --dport21521 -j DNAT --to-destination192.168.0.211:1521
iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132
</code></p>

<h3>3.9.3. 以上两条等价配置(更简单[指定网卡]):</h3>

<pre><code>iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 31521 -j DNAT --to 192.168.0.211:1521
iptables -t nat -A POSTROUTING -j MASQUERADE
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables Packets Flow]]></title>
    <link href="http://iskey.github.io/blog/2019/07/13/iptables-packets-flow/"/>
    <updated>2019-07-13T12:32:33+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/13/iptables-packets-flow</id>
    <content type="html"><![CDATA[<p>之前在网上看到一张iptables的数据包路径决策图,在这里收藏一下,原始地址找不到了^-^,这里就不写转载链接了,如果作者看到,可以提醒我一下,多谢</p>

<p><img src="https://raw.githubusercontent.com/iskey/iskey.github.io/source/source/images/blogs/iptables_packet_flow.png" alt="iptables_packets_flow" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables时间规则匹配]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/iptables-with-time/"/>
    <updated>2018-04-27T11:25:48+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/iptables-with-time</id>
    <content type="html"><![CDATA[<p>1、每天固定时间段匹配</p>

<pre><code class="java">
iptables -I FORWARD -s 172.17.1.132 -d 192.168.1.119 -m time --timestart 09:40 --timestop 09:59 -j DROP
</code></pre>

<p>2、按周固定时间段匹配</p>

<pre><code>iptables -I FORWARD -s 172.17.1.132 -d 192.168.1.119 -m time --timestart 09:40 --timestop 09:59 --weekdays Wed,Thu -j DROP
</code></pre>

<p>3、按固定日期匹配，注这里比较特殊，可以看见下面的时间是17点不是9点，是因为时区的原因，要差8小时。</p>

<pre><code>iptables -I FORWARD -s 172.17.1.132 -d 192.168.1.119 -m time --datestart 2014-3-19T17:40:08 --datestop 2014-3-19T17:59:50 -j DROP
</code></pre>

<p>附上帮助说明：</p>

<pre><code>time match options:
    --datestart time     Start and stop time, to be given in ISO 8601
    --datestop time      (YYYY[-MM[-DD[Thh[:mm[:ss]]]]])
    --timestart time     Start and stop daytime (hh:mm[:ss])
    --timestop time      (between 00:00:00 and 23:59:59)
[!] --monthdays value    List of days on which to match, separated by comma
                         (Possible days: 1 to 31; defaults to all)
[!] --weekdays value     List of weekdays on which to match, sep. by comma
                         (Possible days: Mon,Tue,Wed,Thu,Fri,Sat,Sun or 1 to 7
                         Defaults to all weekdays.)
    --localtz/--utc      Time is interpreted as UTC/local time
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重定向外部连接到本地环回地址]]></title>
    <link href="http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost/"/>
    <updated>2018-04-27T09:12:37+00:00</updated>
    <id>http://iskey.github.io/blog/2018/04/27/redirect-extern-request-to-localhost</id>
    <content type="html"><![CDATA[<p>背景：在本地<code>localhost</code>搭建了一个Httpserver，监听在<code>4000</code>端口，现在想通过<code>eth0</code>在不改动代码的情况下对外发布服务。</p>

<p>最先想到的就是端口映射，<code>rinetd</code>服务，使用也很简单，直接配置外部ip到环回地址的映射就可以了:</p>

<pre><code class="java">root@lfgphicpra39095:/usr1/# cat /etc/rinetd.conf
......
#
# forwarding rules come here
#
# you may specify allow and deny rules after a specific forwarding rule
# to apply to only that forwarding rule
#
# bindadress    bindport  connectaddress  connectport

**10.252.64.154  4000 127.0.0.1 4000**
</code></pre>

<p>但是这样一来，一旦eth0的地址发生了改变，就需要再修改配置文件。</p>

<p>另一种方法就是通过iptables就行重定向：</p>

<pre><code>iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 4000 -j DNAT --to-destination 127.0.0.1
</code></pre>

<p>配置后，外部访问不通，通过抓包分析，协议栈没有回复<code>syc+ack</code>报文，看来是路由的问题。</p>

<p>内核协议栈会丢弃路由 对于源地址或目的地址为<code>loopback</code>地址的，内核协议栈的认为这是一个<code>martian packet</code>，直接丢弃。</p>

<pre><code>route_localnet – BOOLEAN: Do not consider loopback addresses as martian source or destination while routing. This enables the use of 127/8 for local routing purposes (default FALSE).
</code></pre>

<p>这个特性是对每个网卡设备生效的，所以只需要在<code>eth0</code>上开启环回地址路由就可以了</p>

<pre><code>echo 1 &gt; /proc/sys/net/ipv4/conf/eth0/route_localnet
</code></pre>
]]></content>
  </entry>
  
</feed>
