<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Iskey's Blog]]></title>
  <link href="http://iskey.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2019-05-29T00:12:35+08:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell文件描述符操作]]></title>
    <link href="http://iskey.github.io/blog/2018/04/24/shell-fds/"/>
    <updated>2018-04-24T10:39:25+08:00</updated>
    <id>http://iskey.github.io/blog/2018/04/24/shell-fds</id>
    <content type="html"><![CDATA[<p>shell在产生一个新进程后，新进程的前三个文件描述符都默认指向三个相关文件。
这三个文件描述符对应的数组下标分别为<strong>0，1，2</strong>。</p>

<pre><code>- 0  对应的文件叫做标准输入（stdin）
- 1  对应的文件叫做标准输出（stdout）
- 2  对应的文件叫做标准报错(stderr)
</code></pre>

<p>但是实际上，默认跟人交互的<strong>输入是键盘、鼠标，输出是显示器屏幕</strong>，这些硬件设备对于程序来说都是不认识的，所以操作系统借用了原来“终端”的概念，将键盘鼠标显示器都表现成一个终端文件。于是<strong>stdin、stdout和stderr</strong>就最重都指向了这所谓的终端文件上。</p>

<p>于是，从键盘输入的内容，进程可以从标准输入的0号文件描述符读取，正常的输出内容从1号描述符写出，报错信息被定义为从2号描述符写出。这就是标准输入、标准输出和标准报错对应的描述符编号是0、1、2的原因。这也是为什么对报错进行重定向要使用2>的原因(其实1>也是可以用的)。</p>

<p>明白了以上内容之后，很多重定向的数字魔法就好理解了，比如：</p>

<pre><code class="java">[zorro@zorrozou-pc0 prime]$ find /etc -name passwd &gt; /dev/null 
find: ‘/etc/docker’: Permission denied
find: ‘/etc/sudoers.d’: Permission denied
find: ‘/etc/lvm/cache’: Permission denied
find: ‘/etc/pacman.d/gnupg/openpgp-revocs.d’: Permission denied
find: ‘/etc/pacman.d/gnupg/private-keys-v1.d’: Permission denied
find: ‘/etc/polkit-1/rules.d’: Permission denied
</code></pre>

<p>这相当于只看报错信息。</p>

<pre><code>[zorro@zorrozou-pc0 prime]$ find /etc -name passwd 2&gt; /dev/null 
/etc/default/passwd
/etc/pam.d/passwd
/etc/passwd
</code></pre>

<p>这相当于只看正确输出信息。</p>

<pre><code>[zorro@zorrozou-pc0 prime]$ find /etc -name passwd &amp;&gt; /dev/null
</code></pre>

<p>所有输出都不看，也可以写成”>&amp;”。</p>

<pre><code>[zorro@zorrozou-pc0 prime]$ find /etc -name passwd 2&gt;&amp;1
/etc/default/passwd
find: ‘/etc/docker’: Permission denied
/etc/pam.d/passwd
find: ‘/etc/sudoers.d’: Permission denied
find: ‘/etc/lvm/cache’: Permission denied
find: ‘/etc/pacman.d/gnupg/openpgp-revocs.d’: Permission denied
find: ‘/etc/pacman.d/gnupg/private-keys-v1.d’: Permission denied
find: ‘/etc/polkit-1/rules.d’: Permission denied
/etc/passwd
</code></pre>

<p>将标准报错输出的，重定向到标准输出再输出。</p>

<pre><code>[zorro@zorrozou-pc0 prime]$ echo hello &gt; /tmp/out 
[zorro@zorrozou-pc0 prime]$ cat /tmp/out
hello
[zorro@zorrozou-pc0 prime]$ echo hello2 &gt;&gt; /tmp/out 
[zorro@zorrozou-pc0 prime]$ cat /tmp/out
hello
hello2
</code></pre>

<p>“>>”表示追加重定向。</p>

<p>相信大家对<strong>&amp;>>、1>&amp;2、？2>&amp;3、6>&amp;8、>>file 2>&amp;1</strong>这样的写法应该也都能理解了。
进程可以打开多个文件，多个描述符之间都可以进行重定向。当然，输入也可以，比如：3&lt;表示从描述符3读取。</p>

<p>下面我们罗列一下其他重定向符号和用法：
Here Document：
语法：</p>

<pre><code>&lt;&lt;[-]word
    here-document
delimiter
</code></pre>

<p>这是一种特殊的输入重定向，重定向的内容并不是来自于某个文件，而是从当前输入读取，直到输入中写入了delimiter字符标记结束。用法：</p>

<pre><code>[zorro@zorrozou-pc0 prime]$ cat &lt;&lt; EOF
&gt; hello world!
&gt; I am zorro
&gt; 
&gt; 
&gt; 
&gt; sadfsdf
&gt; ertert
&gt; eof
&gt; EOF
hello world!
I am zorro



sadfsdf
ertert
eof
</code></pre>

<p>这个例子可以看到，最后cat输出的内容都是在上面写入的内容，而且内容中不包括EOF，因为EOF是标记输入结束的字符串。这个功能在脚本中通常可以用于需要交互式处理的某些命令的输入和文件编辑，比如想在脚本中使用fdisk命令新建一个分区：</p>

<pre><code>[root@zorrozou-pc0 prime]# cat fdisk.sh 
#!/bin/bash

fdisk /dev/sdb &lt;&lt; EOF
n
p


w
EOF
</code></pre>

<p>当然这个脚本大家千万不要乱执行，可能会修改你的分区表。其中要输入的内容，相信熟悉fdisk命令的人应该都能明白，我就不多解释了。
Here strings：
语法：</p>

<pre><code>&lt;&lt;&lt;word
</code></pre>

<p>使用方式：
<code>
[zorro@zorrozou-pc0 prime]$ cat &lt;&lt;&lt; asdasdasd
asdasdasd
</code></p>

<p>其实就是将&lt;&lt;&lt;符号后面的字符串当成要输入的内容给cat，而不是定向一个文件描述符。这样是不是就相当于把cat当echo用了？</p>

<ul>
<li>文件描述符的复制：</li>
</ul>


<p><strong>复制输入文件描述符：[n]&lt;&amp;word</strong></p>

<p>如果n没有指定数字，则默认复制0号文件描述符。
word一般写一个已经打开的并且用来作为输入的描述符数字，表示将制订的n号描述符在制定的描述符上复制一个。
如果word写的是“-”符号，则表示关闭这个文件描述符。如果word指定的不是一个用来输入的文件描述符，则会报错。</p>

<p><strong>复制输出文件描述符：[n]>&amp;word</strong></p>

<p>复制一个输出的描述符，字段描述参考上面的输入复制，例子上面已经讲过了。这里还需要知道的就是1>&amp;-表示关闭1号描述符。</p>

<ul>
<li>文件描述符的移动：</li>
</ul>


<p><strong>移动输入描述符：[n]&lt;&amp;digit-</strong>
<strong>移动输出描述符：[n]>&amp;digit-</strong></p>

<p>这两个符号的意思都是将原有描述符在新的描述符编号上打开，并且关闭原有描述符。</p>

<ul>
<li>描述符新建：</li>
</ul>


<p><strong>新建一个用来输入的描述符：[n]&lt;word</strong>
<strong>新建一个用来输出的描述符：[n]>word</strong>
<strong>新建一个用来输入和输出的描述符：[n]&lt;>word</strong></p>

<p>word都应该写一个文件路径，用来表示这个文件描述符的关联文件是谁。</p>

<p>下面我们来看相关的编程例子：</p>

<pre><code>    #!/bin/bash

    # example 1
    #打开3号fd用来输入，关联文件为/etc/passwd
    exec 3&lt; /etc/passwd
    #让3号描述符成为标准输入
    exec 0&lt;&amp;3
    #此时cat的输入将是/etc/passwd，会在屏幕上显示出/etc/passwd的内容。
    cat

    #关闭3号描述符。
    exec 3&gt;&amp;-

    # example 2
    #打开3号和4号描述符作为输出，并且分别关联文件。
    exec 3&gt; /tmp/stdout

    exec 4&gt; /tmp/stderr

    #将标准输入关联到3号描述符，关闭原来的1号fd。
    exec 1&gt;&amp;3-
    #将标准报错关联到4号描述符，关闭原来的2号fd。
    exec 2&gt;&amp;4-

    #这个find命令的所有正常输出都会写到/tmp/stdout文件中，错误输出都会写到/tmp/stderr文件中。
    find /etc/ -name "passwd"

    #关闭两个描述符。
    exec 3&gt;&amp;-
    exec 4&gt;&amp;-
</code></pre>

<p>以上脚本要注意的地方是，一般输入输出重定向都是放到命令后面作为后缀使用，所以如果单纯改变脚本的描述符，需要在前面加exec命令。这种用法也叫做描述符魔术。某些特殊符号还有一些特殊用法，比如：</p>

<pre><code>zorro@zorrozou-pc0 bash]$ &gt; /tmp/out
</code></pre>

<p>表示清空文件，当然也可以写成：</p>

<pre><code>[zorro@zorrozou-pc0 bash]$ :&gt; /tmp/out
</code></pre>

<p>因为”:”是一个内建命令，跟true是同样的功能，所以没有任何输出，所以这个命令清空文件的作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Shell I/O重定向]]></title>
    <link href="http://iskey.github.io/blog/2016/04/06/linux-shell-IO-redirect/"/>
    <updated>2016-04-06T15:48:00+00:00</updated>
    <id>http://iskey.github.io/blog/2016/04/06/linux-shell-IO-redirect</id>
    <content type="html"><![CDATA[<p>在命令行中，经常会用到shell命令的重定向操作，最常用的做法是重定向到一个文件：</p>

<pre><code class="java">$ls &gt; t.txt
</code></pre>

<p>把当前目录的文件列表重定向到t.txt文件，这里的<strong>></strong>符号的意思就是把<code>ls</code>命令的标准输出重定向到t.txt文件。
熟悉linux的同学都知道，linux 有三个标准句柄，</p>

<pre><code>0: stdin
1: stdout
2: stderr
</code></pre>

<p>所以如果我们想要截获命令行的所有输出标准输出信息的话，就应该采用如下写法：</p>

<pre><code>$ls &gt;t.txt 2&gt;&amp;1
</code></pre>

<p>有次，移植python的时候，遇到些问题，需要看看configure的流程，看到了另外一种写法：</p>

<pre><code>exec 5&gt;&gt; config.log
exec 6&gt;&gt; Setup.config
echo "hello"&gt; &amp;5
echo "test config"&gt; &amp;6
</code></pre>

<p>这样就可以实现向不同的文件写入详细的过程，而不会污染configure执行过程的输出信息了。
更巧妙的是，如果你是再改造一个已经混乱不堪，输出非常乱的脚本，你可以把标准输出重定向到文件，而自己用一个重定向的句柄来接管标准输出，如下：</p>

<pre><code>echo "first I am in stdout"
exec 3&gt;&gt; t.log
exec 4&gt;&amp;1
exec 5&gt;&amp;2
exec 1&gt;&amp;3
exec 2&gt;&amp;3
echo "seconf I am not in stdout"
echo "third I am in stdout"&gt;&amp;4
echo "fourth I am in stderr"&gt;&amp;5
</code></pre>

<p>题外话：
在调试复杂脚本的时候，很难跟踪流程，可以使用trap命令来很方便的跟踪流程</p>

<pre><code>trap 'echo “before execute line:$LINENO, a=$a,b=$b,c=$c”' DEBUG
</code></pre>

<p>trap捕捉到信号之后，可以有三种反应方式：</p>

<blockquote><ol>
<li>执行一段程序来处理这一信号</li>
<li>接受信号的默认操作</li>
<li>忽视这一信号</li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux自解压文件]]></title>
    <link href="http://iskey.github.io/blog/2015/06/18/linux-self-extract/"/>
    <updated>2015-06-18T08:44:00+00:00</updated>
    <id>http://iskey.github.io/blog/2015/06/18/linux-self-extract</id>
    <content type="html"><![CDATA[<p>经常从网络上下载.run格式的安装包，直接运行就能够执行程序安装了，很简单方便，一直也没有仔细研究过，前段时间学习开源交换机ONIE的NOS安装镜像，需要自己制作一个NOS的安装镜像，于是就学习了一下。</p>

<h3>网上最常用的一种方式是通过tail命令+tar命令来实现：</h3>

<ul>
<li>首先把想要安装的文件通过tar命令进行打包，当然也可用zip、gunzip等命令</li>
</ul>


<pre><code>$ls
target

$tar -cvf target.tar target/
target/
target/t.sh
target/System.map

$ls
target.tar
</code></pre>

<ul>
<li>新建自解压脚本，本例取名self_extract.sh,可以自己修改这个脚本，添加自己的安装过程。</li>
</ul>


<pre><code>$cat self_extract.sh                                                                      
#/bin/sh

lines=%%SELF_EXTRACT_LINES%%
target_file=$(readlink -f $0)

tail $lines $target_file | tar xf -

#添加你自己的安装过程

exit 0
</code></pre>

<ul>
<li>修改这个self_extract.sh文件中的<code>%%SELF_EXTRACT_LINES%%</code>变量。</li>
</ul>


<pre><code>$LINE=$(wc -l self_extract.sh | awk -F" " '{print $1+1}')| echo $LINE | sed -i -e "s/%%SELF_EXTRACT_LINES%%/$LINE/" self_extract.sh
</code></pre>

<p>修改后的脚本文件为：</p>

<pre><code>#/bin/sh

lines=10

target_file=$(readlink -f $0)

tail -n +$lines $target_file | tar xf -

exit 0
</code></pre>

<ul>
<li>把第一步生成的target.tar文件追加到slef_extract.sh脚本。</li>
</ul>


<pre><code>$cat target.tar &gt;&gt; self_extract.sh
</code></pre>

<ul>
<li>执行最终生成的self_extract.sh后，目录下就会最终生成target目录了。</li>
</ul>


<pre><code>$./self_extract.sh 
$ls
self_extract.sh  target
</code></pre>

<h3>ONIE的做法</h3>

<ul>
<li>ONIE的做法更加简洁：</li>
</ul>


<pre><code>$cat self_extract.sh 
#/bin/sh

target_file=$(readlink -f $0)

sed -e '1,/^__exit_marker__$/d' $target_file | tar xf -

exit 0

__exit_marker__
</code></pre>

<ul>
<li>追加target.tar到self_extrac.sh文件。</li>
</ul>


<pre><code>$cat target.tar &gt;&gt; self_extract.sh
</code></pre>

<ul>
<li>执行self_extract.sh就可以了</li>
</ul>


<pre><code>$./self_extract.sh 
$ls
self_extract.sh  target
</code></pre>

<h3>ONIE格式的安装包加入校验</h3>

<pre><code>sha1=$(sed -e '1,/^__exit_marker__$/d' "$0" | sha1sum | awk '{ print $1 }')

payload_sha1=%%IMAGE_SHA1%%

if [ "$sha1" != "$payload_sha1" ] ; then
    echo
    echo "ERROR: Unable to verify archive checksum"
    echo "Expected: $payload_sha1"
    echo "Found   : $sha1"
    exit 1
fi
</code></pre>

<p>需要在把target.tar文件追加到self_extract.sh之前，先替换<code>%%IMAGS_SHA1%%</code>变量。</p>

<pre><code>$SHASUM=$(sha1sum target.tar | awk '{print $1}') | sed -i -e 's/%%IMAGE_SHA1%%/$SHASUM' self_extrac.sh
</code></pre>
]]></content>
  </entry>
  
</feed>
