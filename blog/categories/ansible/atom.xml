<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | Iskey's Blog]]></title>
  <link href="http://iskey.github.io/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2020-07-05T13:10:18+00:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible-stress]]></title>
    <link href="http://iskey.github.io/blog/2020/02/02/ansible-stress-scripts/"/>
    <updated>2020-02-02T08:00:00+00:00</updated>
    <id>http://iskey.github.io/blog/2020/02/02/ansible-stress-scripts</id>
    <content type="html"><![CDATA[<!-- TOC -->


<ul>
<li><a href="#1-%E5%88%A9%E7%94%A8ansiblestress-ng%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95">1. 利用ansible、stress-ng进行压力测试</a>

<ul>
<li><a href="#11-%E5%8E%8B%E6%B5%8B%E5%88%A9%E5%99%A8-stress-ng">1.1. 压测利器-stress-ng</a></li>
<li><a href="#12-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7-ansible">1.2. 最简单的运维工具-ansible</a></li>
<li><a href="#13-%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%8E%8B%E6%B5%8B%E8%BF%9B%E7%A8%8B-%E7%BB%99%E5%8E%8B%E6%B5%8B%E8%BF%9B%E7%A8%8B%E6%89%BE%E4%B8%AA%E7%88%B9">1.3. 如何管理压测进程-给压测进程找个爹</a></li>
<li><a href="#14-%E8%B4%9F%E8%BD%BD%E5%9C%BA%E6%99%AF%E5%89%A7%E6%9C%AC%E8%AE%BE%E8%AE%A1-playbook">1.4. 负载场景剧本设计-playbook</a></li>
<li><a href="#15-%E8%87%AA%E5%8A%A8%E9%87%8D%E8%AF%95-ansile%E7%BB%8F%E5%B8%B8%E4%B8%8D%E9%9D%A0%E8%B0%B1">1.5. 自动重试-ansile经常不靠谱</a></li>
</ul>
</li>
</ul>


<!-- /TOC -->


<h1>1. 利用ansible、stress-ng进行压力测试</h1>

<h2>1.1. 压测利器-stress-ng</h2>

<p>stress-ng是stress的加强版，完全兼容stress，并在此基础上增加了几百个参数，堪称压测工具中的瑞士军刀。</p>

<p>这里列举几个样例场景：</p>

<p>CPU密集型场景：</p>

<pre><code>stress-ng --cpu 6 --timeout 300
</code></pre>

<p>该命令会尽量占满6个CPU核</p>

<p>IO密集型场景：</p>

<pre><code>stress-ng  -i 6 --hdd 1 --timeout 300
</code></pre>

<p>该命令会开启1个worker不停的读写临时文件，同时启动6个workers不停的调用sync系统调用提交缓存，</p>

<p>进程密集型场景：</p>

<pre><code>(( proc_cnt = `nproc`*10 )); stress-ng --cpu $proc_cnt --pthread 1 timeout 300
</code></pre>

<p>该命令会启动N*10个进程，在只有N个核的系统上，会产生大量的进程切换，模拟进程间竞争CPU的场景</p>

<p>线程密集型场景：</p>

<pre><code>stress-ng --cpu `nproc` --pthread 1024 timeout 300
</code></pre>

<p>该命令会在N个CPU核的系统上，产生N个进程，每个进程1024个线程，模拟线程间竞争CPU的场景</p>

<p>其它常用样例：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    stress-ng &ndash;vm 8 &ndash;vm-bytes 80% -t 1h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;          run 8 virtual memory stressors that combined use 80% of the available memory for  1
</span><span class='line'>      hour. Thus each stressor uses 10% of the available memory.
</span><span class='line'>
</span><span class='line'>   stress-ng --cpu 4 --io 2 --vm 1 --vm-bytes 1G --timeout 60s
</span><span class='line'>
</span><span class='line'>      runs  for  60  seconds with 4 cpu stressors, 2 io stressors and 1 vm stressor using
</span><span class='line'>      1GB of virtual memory.
</span><span class='line'>
</span><span class='line'>   stress-ng --iomix 2 --iomix-bytes 10% -t 10m
</span><span class='line'>
</span><span class='line'>      runs 2 instances of the mixed I/O stressors using a total of 10% of  the  available
</span><span class='line'>      file  system  space for 10 minutes. Each stressor will use 5% of the available file
</span><span class='line'>      system space.
</span><span class='line'>
</span><span class='line'>   stress-ng  --cyclic  1  --cyclic-dist  2500  --cyclic-method  clock_ns  --cyclic-prio  100
</span><span class='line'>   --cyclic-sleep 10000 --hdd 0 -t 1m
</span><span class='line'>
</span><span class='line'>      measures  real time scheduling latencies created by the hdd stressor. This uses the
</span><span class='line'>      high resolution nanosecond clock to  measure  latencies  during  sleeps  of  10,000
</span><span class='line'>      nanoseconds.  At  the  end  of 1 minute of stressing, the latency distribution with
</span><span class='line'>      2500 ns intervals will be displayed.  NOTE:  this  must  be  run  with  super  user
</span><span class='line'>      privileges to enable the real time scheduling to get accurate measurements.
</span><span class='line'>
</span><span class='line'>   stress-ng --cpu 8 --cpu-ops 800000
</span><span class='line'>
</span><span class='line'>      runs 8 cpu stressors and stops after 800000 bogo operations.
</span><span class='line'>
</span><span class='line'>   stress-ng --sequential 2 --timeout 2m --metrics
</span><span class='line'>
</span><span class='line'>      run 2 simultaneous instances of all the stressors sequentially one by one, each for
</span><span class='line'>      2 minutes and summarise with performance metrics at the end.
</span><span class='line'>
</span><span class='line'>   stress-ng --cpu 4 --cpu-method fft --cpu-ops 10000 --metrics-brief
</span><span class='line'>
</span><span class='line'>      run 4 FFT cpu stressors, stop after 10000 bogo operations  and  produce  a  summary
</span><span class='line'>      just for the FFT results.
</span><span class='line'>
</span><span class='line'>   stress-ng --cpu 0 --cpu-method all -t 1h
</span><span class='line'>
</span><span class='line'>      run  cpu  stressors  on  all  online  CPUs  working  through  all the available CPU
</span><span class='line'>      stressors for 1 hour.
</span><span class='line'>
</span><span class='line'>   stress-ng --all 4 --timeout 5m
</span><span class='line'>
</span><span class='line'>      run 4 instances of all the stressors for 5 minutes.
</span><span class='line'>
</span><span class='line'>   stress-ng --random 64
</span><span class='line'>
</span><span class='line'>      run 64 stressors that are randomly chosen from all the available stressors.
</span><span class='line'>
</span><span class='line'>   stress-ng --cpu 64 --cpu-method all --verify -t 10m --metrics-brief
</span><span class='line'>
</span><span class='line'>      run  64  instances  of  all  the  different  cpu  stressors  and  verify  that  the
</span><span class='line'>      computations are correct for 10 minutes with a bogo operations summary at the end.
</span><span class='line'>
</span><span class='line'>   stress-ng --sequential 0 -t 10m
</span><span class='line'>
</span><span class='line'>      run  all  the  stressors one by one for 10 minutes, with the number of instances of
</span><span class='line'>      each stressor matching the number of online CPUs.
</span><span class='line'>
</span><span class='line'>   stress-ng --sequential 8 --class io -t 5m --times
</span><span class='line'>
</span><span class='line'>      run all the stressors in the io class one  by  one  for  5  minutes  each,  with  8
</span><span class='line'>      instances  of  each stressor running concurrently and show overall time utilisation
</span><span class='line'>      statistics at the end of the run.
</span><span class='line'>
</span><span class='line'>   stress-ng --all 0 --maximize --aggressive
</span><span class='line'>
</span><span class='line'>      run all the stressors (1 instance of each per  CPU)  simultaneously,  maximize  the
</span><span class='line'>      settings   (memory   sizes,   file   allocations,   etc.)   and   select  the  most
</span><span class='line'>      demanding/aggressive options.
</span><span class='line'>
</span><span class='line'>   stress-ng --random 32 -x numa,hdd,key
</span><span class='line'>
</span><span class='line'>      run 32 randomly selected stressors and exclude the numa, hdd and key stressors
</span><span class='line'>
</span><span class='line'>   stress-ng --sequential 4 --class vm --exclude bigheap,brk,stack
</span><span class='line'>
</span><span class='line'>      run 4 instances of the VM stressors one after each other,  excluding  the  bigheap,
</span><span class='line'>      brk and stack stressors
</span><span class='line'>
</span><span class='line'>   stress-ng --taskset 0,2-3 --cpu 3
</span><span class='line'>
</span><span class='line'>      run 3 instances of the CPU stressor and pin them to CPUs 0, 2 and 3.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>## 1.2. 最简单的运维工具-ansible
</span><span class='line'>
</span><span class='line'>在小规模的机器上执行命令，最简单非ansible莫属，因为ansible默认是不需要在待运维的机器上安装额外的服务，
</span><span class='line'>只要开启了ssh服务就可以了。
</span><span class='line'>
</span><span class='line'>一个简单的ansible使用样例，[simple-example-of-ansible](https://iskey.github.io/blog/2019/07/07/simple-example-of-ansible/)
</span><span class='line'>
</span><span class='line'>## 1.3. 如何管理压测进程-给压测进程找个爹
</span><span class='line'>
</span><span class='line'>使用ansible进行加压时，如果执行stress-ng命令，然后马上退出，压测工具进程也就被杀死了，这是因为压测工具默认的父进程是ansible的ssh会话
</span><span class='line'>这时候可以使用nohup、setsid命令让stress-ng命令后台执行。
</span><span class='line'>在稍微复杂的场景模拟时，stress-ng可能会启动很多的进程，并且有些时候不仅有stress-ng，而且可能还需要sys-bench等工具，
</span><span class='line'>当需要调整压力时，可能需要杀掉之前的压测进程，再启动新的压测，如果一个一个的找出来并杀掉进程，不仅操作复杂而且经常
</span><span class='line'>会产生僵尸进程。
</span><span class='line'>
</span><span class='line'>这时候就需要screen、tmux这样的会话管理工具了，通过screen来统一管理会话，所有的压测进程都被托管在screen里，这样如果需要
</span><span class='line'>关掉所有的压力时，只需要杀掉screen进程就可以了。
</span><span class='line'>
</span><span class='line'>例：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;screen -S stress -d -m stress-ng -c 1 &ndash;timeout 300</span></code></pre></td></tr></table></div></figure></p>

<h2>1.4. 负载场景剧本设计-playbook</h2>

<p>在云计算场景下，经常会需要用压测工具来模拟一些业务场景，stress-ng是最常用到的工具之一，通常ansible+stress-ng就能应付绝大多数的压测场景。
如果需要模拟的CPU、MEM、磁盘IO模型比较多，用命令行就显得不是那么方便了，这时候就可以用playbook。</p>

<p>github上已经有人写好了一个playbook，<a href="https://github.com/CSCfi/ansible-role-stress">ansible-role-stress</a>。</p>

<p>项目已经在CenstOS 7上测试过了，在Ubuntu上应该也是可以正常工作的。</p>

<p>playbook支持如下角色变量：</p>

<ul>
<li>test_duration: stress-ng 超时时间</li>
<li>不同类型压测资源的worker数量:

<ul>
<li>cpu_workers</li>
<li>vm_workers</li>
<li>hdd_workers</li>
</ul>
</li>
<li>每个worker的磁盘或内存使用量

<ul>
<li>bytes_per_hdd_worker</li>
<li>bytes_per_vm_worker</li>
</ul>
</li>
</ul>


<h2>1.5. 自动重试-ansile经常不靠谱</h2>

<p>使用playbook操作大量机器时，经常会出现机器执行命令失败，比如网络不通、网络闪断等，这时候需要对失败的机器重新执行命令，playbook可以如下命令进行重试</p>

<pre><code>ansible-playbook -i host stress.yml --extra-vars "host=all" --limit @$playbook_retry
</code></pre>

<p>其中playbook_retry文件里保存的是需要重试的IP列表,可以从执行回显中分析执行结果，通过awk找出执行失败
的IP列表，通过ansible-playbook进行重试。</p>

<pre><code>#!/bin/sh

hosts=(
"host1" 
"host2" 
"host3"
)

cpu_load=(15 15 15 15 15 15)
mem_load=(5 5 5 5 5 5)

mkdir -p tmp

host_file="./hosts"

total_result="./tmp/total_result.log"
playbook_result="./tmp/playbook_result.log"
playbook_retry="./tmp/playbook_retry.txt"

echo "" &gt; $total_result

parse_playbook_result()
{
    sed '1,/PLAY RECAP/d' $playbook_result | awk -F" *|=|\t" '
    /unreachable/{
    ip=$1
    ok_cnt=$4
    changed_cnt=$6
    unreachable_cnt=$8
    failed_cnt=$10
    if(unreachable_cnt!=0 || failed_cnt!=0 || rescued_cnt!=0){
        print ip
    }
    }' &gt; $playbook_retry
}

ansible_playbook()
{
    echo "playbook Vars: $2"
    ansible-playbook -i $host_file $1 --extra-vars "$2" &gt;$playbook_result 2&gt;&amp;1

    cat $playbook_result &gt; $total_result

    while true
    do
        parse_playbook_result
        RETRY_CNT=$(wc -l $playbook_retry | awk '{print $1}')

        if [[ $RETRY_CNT != 0 ]]; then
            echo "Some host will retry:"
            cat $playbook_retry
            ansible-playbook -i $host_file stress_stop.yml --extra-vars "$2" --limit @$playbook_retry &gt;/dev/null 2&gt;&amp;1
            ansible-playbook -i $host_file $1 --extra-vars "$2" --limit @$playbook_retry &gt;$playbook_result 2&gt;&amp;1
            cat $playbook_result &gt; $total_result
        else
            return
        fi
    done
}

for(( i=0; i&lt;${#hosts[@]}; i++ ))
do
  echo "Stress" ${hosts[i]}
  ansible_playbook "stress_start.yml" "host=${hosts[i]} cpu_load=${cpu_load[i]} mem_load=${mem_load[i]}"
done


echo "Over zzz"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Example of Ansible]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible/"/>
    <updated>2019-07-07T15:34:11+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible</id>
    <content type="html"><![CDATA[<p>Ansible 是一个自动化运维工具，相似的工具还有SaltStack、Puppet、Chef、Fabric，其中Ansible、SaltStack、Fabri都是用Python实现的，现在使用Python的同学比较多，维护起来也比较顺手，而Puppet、Chef是用ruby写的，各有各的拥趸。</p>

<p>各个工具的对比:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">工具 </th>
<th style="text-align:center;">    语言 </th>
<th style="text-align:center;">  架构 </th>
<th style="text-align:center;">  协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Puppet </td>
<td style="text-align:center;">    Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Chef </td>
<td style="text-align:center;">  Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Ansible </td>
<td style="text-align:center;">   Python </td>
<td style="text-align:center;"> 无Client </td>
<td style="text-align:center;">    SSH</td>
</tr>
<tr>
<td style="text-align:center;">Saltstack </td>
<td style="text-align:center;"> Python </td>
<td style="text-align:center;">    C/S(可无Client) </td>
<td style="text-align:center;"> SSH/ZMQ/RAET</td>
</tr>
</tbody>
</table>


<hr />

<h3>一个简单的使用ansible的例子</h3>

<p>我们的例子里，在当前目录有三个文件：<code>ansible.cfg</code>,<code>first.yml</code>,<code>hosts</code></p>

<h4>ansible.cfg</h4>

<p>其中<code>ansible.cfg</code>文件是我们例子的ansible命令的配置文件，这里主要修改inventory字段，指定我们需要使用当前目录的hosts文件作为主机列表配置文件</p>

<pre><code class="C">[defaults]

# some basic default values...

inventory      = ./hosts
#inventory      = /root/work/ansible/hosts
#library        = /usr/share/my_modules/
#remote_tmp     = $HOME/.ansible/tmp
#forks          = 5
#poll_interval  = 15
#sudo_user      = root
#ask_sudo_pass = True
#ask_pass      = True
#transport      = smart
#remote_port    = 22
#module_lang    = C
</code></pre>

<p>ansible命令执行的时候，会按照如下顺序搜索配置文件:</p>

<ul>
<li>ANSIBLE_CONFIG (an environment variable)</li>
<li>ansible.cfg (in the current directory)</li>
<li>.ansible.cfg (in the home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<h4>hosts</h4>

<p>hosts文件指定了我们需要的管理的主机列表：</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2


[host_iskey:vars]
ansible_ssh_pass='xxxxxxxx'
ansible_ssh_user='root'
</code></pre>

<h4>first.yml</h4>

<p>first.yml是我们的playbook，运行了一个很简单的命令，<code>touch /iskey</code></p>

<pre><code class="C  "># cat first.yml
- hosts: host_iskey
  gather_facts: smart
  remote_user: root
  tasks:
    - name: touch_iskey
      command: "/usr/bin/touch /iskey &amp;&amp; sleep 3"
</code></pre>

<ul>
<li>hosts:host_iskey</li>
</ul>


<p>说明要对hosts文件中的host_iskey组的主机列表进行操作</p>

<ul>
<li>gater_facts:smart</li>
</ul>


<p>ansible执行过程中，会收集远程主机的信息，如果每次都收集的话，非常浪费时间，可以设置facts缓存为smart，这样第一次收集之后，后边就不会再收集了，如果不需要收集可以直接设置为<code>no</code>来关掉主机信息收集</p>

<h4>鉴权方式</h4>

<h5>密码</h5>

<p>ansible可以使用密码方式进行鉴权，前提是需要安装<code>sshpass</code>工具，<code>apt install sshpass</code>, ssh命令本身不提供参数来支持密码登陆，一般都是通过<code>sshpass</code>工具来实现。</p>

<p>需要在hosts文件中，添加用户的密码，如下<code>host_iskey:vars</code>字段</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2

[host_iskey:vars]
ansible_ssh_pass='xxxxxxxx'
ansible_ssh_user='root'
</code></pre>

<h5>秘钥</h5>

<p>如果使用秘钥的话，可以用ssh-keygen生成秘钥，在当前目录生成名为ansible的秘钥</p>

<pre><code>ssh-keygen -f ansible
</code></pre>

<p>把生成的公钥，追加到host主机的<code>.ssh/authorized_keys</code>文件中去，</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2

[host_iskey:vars]
ansible_ssh_user='root'
ansible_ssh_private_key_file='./ansible'
</code></pre>

<p>执行ansible-playbook，</p>

<pre><code class="C"># ansible-playbook  first.yml

PLAY [host_iskey] ****************************************************************************************************************************

TASK [touch_iskey] ***************************************************************************************************************************
insufficient you can add 'warn: false' to this command task or set 'command_warnings=False' in ansible.cfg to get rid of this message.

changed: [x.x.x.1]
changed: [x.x.x.2]

PLAY RECAP ***********************************************************************************************************************************
x.x.x.1              : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
x.x.x.2               : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
****
</code></pre>

<h4>当然，可以通过ansible命令来执行一些简单的命令</h4>

<pre><code class="C">ansible -i ./hosts all -m command  -a "touch /xxxx"  --private-key=./key/ansible
</code></pre>

<p>如果密钥的权限不是700，可能会提醒如下错误</p>

<pre><code class="C"># ansible -i ./ansible/hosts all -m command  -a "touch /isno"  --private-key=./ansible/ansible
x.x.x.1 | UNREACHABLE! =&gt; {
    "changed": false,
    "msg": "Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nPermissions 0755 for './ansible' are too open.\r\nIt is required that your private key files are NOT accessible by others.\r\nThis private key will be ignored.\r\nLoad key \"./ansible\": bad permissions\r\nPermission denied (publickey,password).",
    "unreachable": true
}
x.x.x.2 | UNREACHABLE! =&gt; {
    "changed": false,
    "msg": "Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nPermissions 0755 for './ansible' are too open.\r\nIt is required that your private key files are NOT accessible by others.\r\nThis private key will be ignored.\r\nLoad key \"./ansible\": bad permissions\r\nPermission denied (publickey,password).",
    "unreachable": true
}
</code></pre>

<p>当然，如果不想用密钥的方式，也可以把密码直接写在hosts文件里。</p>
]]></content>
  </entry>
  
</feed>
