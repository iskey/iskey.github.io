<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tool | Iskey's Blog]]></title>
  <link href="http://iskey.github.io/blog/categories/tool/atom.xml" rel="self"/>
  <link href="http://iskey.github.io/"/>
  <updated>2019-07-13T11:50:33+00:00</updated>
  <id>http://iskey.github.io/</id>
  <author>
    <name><![CDATA[Iskey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Win Sshfs]]></title>
    <link href="http://iskey.github.io/blog/2019/07/13/win-sshfs/"/>
    <updated>2019-07-13T11:46:51+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/13/win-sshfs</id>
    <content type="html"><![CDATA[<h4>背景</h4>

<p>代码开发时，有时候必须要把代码拷贝到远程的主机上去执行，这时候大部分我们会用ssh登上去，用vim修改，但是如果改的代码比较多，对于不太习惯vim的同学，就会觉得比较累。这时候一般的做法是在本地用编辑器（SourceInsighet/PyCharm）等修改代码，然后再传到服务器上去。[Pycharm专业版可以上传到ssh远端哦~]</p>

<p>这里推荐一个开源的win-sshfs工具，可以利用ssh在本地建立一个远端的目录映射，将ssh远端服务器的目录映射成本地的一个目录，这样就可以直接利用本地丰富的编辑器来改代码了，改完之后，直接在远端执行就可以了。</p>

<h4>win-sshfs下载、安装</h4>

<p>首先需要下载dokan和win-sshfs，dokan提供win-sshfs需要的驱动和库文件，下载的时候一定要注意版本问题~，<a href="https://github.com/feo-cz/win-sshfs/releases">win-sshfs Releases</a>,在下载链接里一遍会标注推荐的dokan版本号。
我这里用的是<a href="https://github.com/dokan-dev/dokany/releases/tag/v1.0.5">DokanSetup_redist-1.0.5.1000</a>和<a href="https://github.com/feo-cz/win-sshfs/releases/tag/1.6.1">WinSSHFS-1.6.1.13-devel</a></p>

<h4>使用</h4>

<p>UI界面很容易看懂，mount之后，就会在本地多一个磁盘出来，操作磁盘里的文件，就相当于操作远程ssh服务器上的文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple_example_of_rabbitmq]]></title>
    <link href="http://iskey.github.io/blog/2019/07/13/simple-example-of-rabbitmq/"/>
    <updated>2019-07-13T11:45:27+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/13/simple-example-of-rabbitmq</id>
    <content type="html"><![CDATA[<p>关于python的queue介绍
关于python的队列，内置的有两种，一种是线程queue，另一种是进程queue，但是这两种queue都是只能在同一个进程下的线程间或者父进程与子进程之间进行队列通讯，并不能进行程序与程序之间的信息交换，这时候我们就需要一个中间件，来实现程序之间的通讯。</p>

<h2>RabbitMQ</h2>

<p>MQ并不是python内置的模块，而是一个需要你额外安装（ubuntu可直接apt-get其余请自行百度。）的程序，安装完毕后可通过python中内置的pika模块来调用MQ发送或接收队列请求。接下来我们就看几种python调用MQ的模式（作者自定义中文形象的模式名称）与方法。</p>

<h3>RabbitMQ设置远程链接账号密码</h3>

<p>启动rabbitmq web服务：
远程访问rabbitmq:自己增加一个用户，步骤如下：
- 创建一个admin用户：sudo rabbitmqctl add_user admin 123123
- 设置该用户为administrator角色：sudo rabbitmqctl set_user_tags admin administrator
- 设置权限：sudo rabbitmqctl  set_permissions  -p  &lsquo;/&rsquo;  admin &lsquo;.&rsquo; &lsquo;.&rsquo; &lsquo;.&rsquo;
- 重启rabbitmq服务：sudo service rabbitmq-server restart
之后就能用admin用户远程连接rabbitmq server了。</p>

<h3>轮询消费模式</h3>

<p>此模式下，发送队列的一方把消息存入mq的指定队列后，若有消费者端联入相应队列，即会获取到消息，并且队列中的消息会被消费掉。</p>

<p>若有多个消费端同时连接着队列，则会已轮询的方式将队列中的消息消费掉。</p>

<p>接下来是代码实例：</p>

<h4>producer生产者</h4>

<pre><code class="python"># !/usr/bin/env python
import pika
credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

# 声明queue
channel.queue_declare(queue='balance')

# n RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
channel.basic_publish(exchange='',
                      routing_key='balance',
                      body='Hello World!')
print(" [x] Sent 'Hello World!'")
connection.close()
</code></pre>

<p>发送过队列后，可在MQ服务器中查看队列状态</p>

<pre><code>[root@localhost ~]# rabbitmqctl list_queues
Listing queues ...
hello    1
</code></pre>

<h4>consumer消费者</h4>

<pre><code class="python"># _*_coding:utf-8_*_
__author__ = 'Alex Li'
import pika

credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

# You may ask why we declare the queue again ‒ we have already declared it in our previous code.
# We could avoid that if we were sure that the queue already exists. For example if send.py program
# was run before. But we're not yet sure which program to run first. In such cases it's a good
# practice to repeat declaring the queue in both programs.
channel.queue_declare(queue='balance')


def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)


channel.basic_consume(callback,
                      queue='balance',
                      no_ack=True)

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()
</code></pre>

<p>接收队列后，查看一下队列状态</p>

<pre><code>[root@localhost ~]#  rabbitmqctl list_queues
Listing queues ...
hello    0
</code></pre>

<h3>队列持久化</h3>

<p>当rabbitMQ意外宕机时，可能会有持久化保存队列的需求（队列中的消息不消失）。</p>

<h4>producer生产者</h4>

<pre><code class="python"># !/usr/bin/env python
import pika

credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

# 声明queue
channel.queue_declare(queue='durable',durable=True)

# n RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
channel.basic_publish(exchange='',
                      routing_key='durable',
                      body='Hello cheng!',
                      properties=pika.BasicProperties(
                          delivery_mode=2,  # make message persistent
                      )
                      )
print(" [x] Sent 'Hello cheng!'")
connection.close()
</code></pre>

<p>执行后查看队列，记下队列名字与队列中所含消息的数量</p>

<pre><code>[root@localhost ~]# rabbitmqctl list_queues
Listing queues ...
durable    1
#重启rabbitmq
[root@localhost ~]# systemctl restart rabbitmq-server
#重启完毕后再次查看
[root@localhost ~]# rabbitmqctl list_queues
Listing queues ...
durable   #队列以及消息并未消失
</code></pre>

<h4>consumer消费者</h4>

<pre><code class="python"># _*_coding:utf-8_*_
__author__ = 'Alex Li'
import pika

credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

# You may ask why we declare the queue again ‒ we have already declared it in our previous code.
# We could avoid that if we were sure that the queue already exists. For example if send.py program
# was run before. But we're not yet sure which program to run first. In such cases it's a good
# practice to repeat declaring the queue in both programs.
channel.queue_declare(queue='durable',durable=True)


def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
    ch.basic_ack(delivery_tag=method.delivery_tag)

channel.basic_consume(callback,
                      queue='durable',
                      #no_ack=True
                      )

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()
</code></pre>

<p>可正确接收到信息。</p>

<p>再次查看队列的情况。</p>

<pre><code>[root@localhost ~]# rabbitmqctl list_queues
Listing queues ...
durable    0
</code></pre>

<h3>广播模式</h3>

<p>当producer发送消息到队列后，所有的consumer都会收到消息，需要注意的是，此模式下producer与concerned之间的关系类似与广播电台与收音机，如果广播后收音机没有接受到，那么消息就会丢失。</p>

<p>建议先执行consumer</p>

<h4>consumer生产者</h4>

<pre><code class="python"># _*_coding:utf-8_*_
__author__ = 'Alex Li'
import pika

credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

channel.exchange_declare(exchange='Clogs',
                         type='fanout')

result = channel.queue_declare(exclusive=True)  # 不指定queue名字,rabbit会随机分配一个名字,exclusive=True会在使用此queue的消费者断开后,自动将queue删除
queue_name = result.method.queue

channel.queue_bind(exchange='Clogs',
                   queue=queue_name)

print(' [*] Waiting for logs. To exit press CTRL+C')


def callback(ch, method, properties, body):
    print(" [x] %r" % body)


channel.basic_consume(callback,
                      queue=queue_name,
                      no_ack=True)

channel.start_consuming()
</code></pre>

<h4>producer生产者</h4>

<pre><code class="python">import pika
import sys

credentials = pika.PlainCredentials('admin','123456')
connection = pika.BlockingConnection(pika.ConnectionParameters(
    '192.168.56.19',5672,'/',credentials))
channel = connection.channel()

channel.exchange_declare(exchange='Clogs',
                         type='fanout')

message = ' '.join(sys.argv[1:]) or "info: Hello World!"
channel.basic_publish(exchange='Clogs',
                      routing_key='',
                      body=message)
print(" [x] Sent %r" % message)
connection.close()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Example of Ansible]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible/"/>
    <updated>2019-07-07T15:34:11+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/simple-example-of-ansible</id>
    <content type="html"><![CDATA[<p>Ansible 是一个自动化运维工具，相似的工具还有SaltStack、Puppet、Chef、Fabric，其中Ansible、SaltStack、Fabri都是用Python实现的，现在使用Python的同学比较多，维护起来也比较顺手，而Puppet、Chef是用ruby写的，各有各的拥趸。</p>

<p>各个工具的对比:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">工具 </th>
<th style="text-align:center;">    语言 </th>
<th style="text-align:center;">  架构 </th>
<th style="text-align:center;">  协议</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Puppet </td>
<td style="text-align:center;">    Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Chef </td>
<td style="text-align:center;">  Ruby </td>
<td style="text-align:center;">  C/S </td>
<td style="text-align:center;">   HTTP</td>
</tr>
<tr>
<td style="text-align:center;">Ansible </td>
<td style="text-align:center;">   Python </td>
<td style="text-align:center;"> 无Client </td>
<td style="text-align:center;">    SSH</td>
</tr>
<tr>
<td style="text-align:center;">Saltstack </td>
<td style="text-align:center;"> Python </td>
<td style="text-align:center;">    C/S(可无Client) </td>
<td style="text-align:center;"> SSH/ZMQ/RAET</td>
</tr>
</tbody>
</table>


<hr />

<h3>一个简单的使用ansible的例子</h3>

<p>我们的例子里，在当前目录有三个文件：<code>ansible.cfg</code>,<code>first.yml</code>,<code>hosts</code></p>

<h4>ansible.cfg</h4>

<p>其中<code>ansible.cfg</code>文件是我们例子的ansible命令的配置文件，这里主要修改inventory字段，指定我们需要使用当前目录的hosts文件作为主机列表配置文件</p>

<pre><code class="C">[defaults]

# some basic default values...

inventory      = ./hosts
#inventory      = /root/work/ansible/hosts
#library        = /usr/share/my_modules/
#remote_tmp     = $HOME/.ansible/tmp
#forks          = 5
#poll_interval  = 15
#sudo_user      = root
#ask_sudo_pass = True
#ask_pass      = True
#transport      = smart
#remote_port    = 22
#module_lang    = C
</code></pre>

<p>ansible命令执行的时候，会按照如下顺序搜索配置文件:</p>

<ul>
<li>ANSIBLE_CONFIG (an environment variable)</li>
<li>ansible.cfg (in the current directory)</li>
<li>.ansible.cfg (in the home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<h4>hosts</h4>

<p>hosts文件指定了我们需要的管理的主机列表：</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2


[host_iskey:vars]
ansible_ssh_pass='xxxxxxxx'
ansible_ssh_user='root'
</code></pre>

<h4>first.yml</h4>

<p>first.yml是我们的playbook，运行了一个很简单的命令，<code>touch /iskey</code></p>

<pre><code class="C  "># cat first.yml
- hosts: host_iskey
  gather_facts: smart
  remote_user: root
  tasks:
    - name: touch_iskey
      command: "/usr/bin/touch /iskey &amp;&amp; sleep 3"
</code></pre>

<ul>
<li>hosts:host_iskey</li>
</ul>


<p>说明要对hosts文件中的host_iskey组的主机列表进行操作</p>

<ul>
<li>gater_facts:smart</li>
</ul>


<p>ansible执行过程中，会收集远程主机的信息，如果每次都收集的话，非常浪费时间，可以设置facts缓存为smart，这样第一次收集之后，后边就不会再收集了，如果不需要收集可以直接设置为<code>no</code>来关掉主机信息收集</p>

<h4>鉴权方式</h4>

<h5>密码</h5>

<p>ansible可以使用密码方式进行鉴权，前提是需要安装<code>sshpass</code>工具，<code>apt install sshpass</code>, ssh命令本身不提供参数来支持密码登陆，一般都是通过<code>sshpass</code>工具来实现。</p>

<p>需要在hosts文件中，添加用户的密码，如下<code>host_iskey:vars</code>字段</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2

[host_iskey:vars]
ansible_ssh_pass='xxxxxxxx'
ansible_ssh_user='root'
</code></pre>

<h5>秘钥</h5>

<p>如果使用秘钥的话，可以用ssh-keygen生成秘钥，在当前目录生成名为ansible的秘钥</p>

<pre><code>ssh-keygen -f ansible
</code></pre>

<p>把生成的公钥，追加到host主机的<code>.ssh/authorized_keys</code>文件中去，</p>

<pre><code class="C"># cat hosts
[host_iskey]
x.x.x.1
x.x.x.2

[host_iskey:vars]
ansible_ssh_user='root'
ansible_ssh_private_key_file='./ansible'
</code></pre>

<p>执行ansible-playbook，</p>

<pre><code class="C"># ansible-playbook  first.yml

PLAY [host_iskey] ****************************************************************************************************************************

TASK [touch_iskey] ***************************************************************************************************************************
insufficient you can add 'warn: false' to this command task or set 'command_warnings=False' in ansible.cfg to get rid of this message.

changed: [x.x.x.1]
changed: [x.x.x.2]

PLAY RECAP ***********************************************************************************************************************************
x.x.x.1              : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
x.x.x.2               : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
****
</code></pre>

<h4>当然，可以通过ansible命令来执行一些简单的命令</h4>

<pre><code class="C">ansible -i ./hosts all -m command  -a "touch /xxxx"  --private-key=./key/ansible
</code></pre>

<p>如果密钥的权限不是700，可能会提醒如下错误</p>

<pre><code class="C"># ansible -i ./ansible/hosts all -m command  -a "touch /isno"  --private-key=./ansible/ansible
x.x.x.1 | UNREACHABLE! =&gt; {
    "changed": false,
    "msg": "Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nPermissions 0755 for './ansible' are too open.\r\nIt is required that your private key files are NOT accessible by others.\r\nThis private key will be ignored.\r\nLoad key \"./ansible\": bad permissions\r\nPermission denied (publickey,password).",
    "unreachable": true
}
x.x.x.2 | UNREACHABLE! =&gt; {
    "changed": false,
    "msg": "Failed to connect to the host via ssh: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\nPermissions 0755 for './ansible' are too open.\r\nIt is required that your private key files are NOT accessible by others.\r\nThis private key will be ignored.\r\nLoad key \"./ansible\": bad permissions\r\nPermission denied (publickey,password).",
    "unreachable": true
}
</code></pre>

<p>当然，如果不想用密钥的方式，也可以把密码直接写在hosts文件里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Lvm to Expend Root Partition]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/use-lvm-to-expend-root-partition/"/>
    <updated>2019-07-07T15:28:26+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/use-lvm-to-expend-root-partition</id>
    <content type="html"><![CDATA[<p>装完Linux系统后，如果当时规划的根分区太小了，有几种方法：
- 新挂一个盘，挂着到某个目录，比如<code>/usr1</code>,后续所有的大文件尽量放到/usr1
- 对跟分区进行扩容</p>

<p>新挂磁盘，比较简单，这里主要介绍一下如何对根分区进行扩容，对根分区进行扩容分两种情况：
- 根分区是非Linux LVM格式
- 根分区是Linux LVM格式</p>

<h2>扩容Linux LVM格式的分区</h2>

<p>查看当前分区，根分区挂的是<code>/dev/mapper/rhel-root</code>卷</p>

<pre><code>[root@bms-slave-0001 ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root  8G  6.5G  8G   80% /
</code></pre>

<p>查看当前磁盘:</p>

<pre><code>root@bms-slave-0001 ~]# fdisk -l

Disk /dev/sda: 599.0 GB, 598999040000 bytes, 1169920000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 262144 bytes / 262144 bytes
Disk label type: dos
Disk identifier: 0x000afd24

Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    20479999     9190400   8e  Linux LVM
/dev/sda3      1169788928  1169919999       65536   83  Linux
</code></pre>

<p>发现磁盘上还有很多空间，用fdisk，新建一个分区</p>

<pre><code>[root@bms-slave-0001 ~]# fdisk -l

Disk /dev/sda: 599.0 GB, 598999040000 bytes, 1169920000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 262144 bytes / 262144 bytes
Disk label type: dos
Disk identifier: 0x000afd24

Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200    20479999     9190400   8e  Linux LVM
/dev/sda3      1169788928  1169919999       65536   83  Linux
/dev/sda4        20480000  1169788927   574654464    5  Extended
/dev/sda5        20482048  1169788927   574653440   8e  Linux LVM
</code></pre>

<p>新建分区保存退出之后，执行一下<code>partprobe</code>命令，这样不用重启系统就可以重新加载分区表了。</p>

<p>这里有个小知识，如果硬盘的分区模式是BIOS+MBR，受限于MBR的容量，只能有4个主分区
如果采用ELF+GPT模式，则不受此限制。</p>

<p>我的主机是BIOS+MBR模式，所以就新建一个扩展分区，然后在扩展分区里新建一个分区格式是Linux LVM的分区<code>/dev/sda5</code></p>

<p>现在基于<code>/dev/sda5</code>，创建一个物理卷</p>

<pre><code># pvcreate /dev/sda5
</code></pre>

<p>把<code>/dev/sda5</code>加入到根分区卷组，但是首先要查看根分区卷组</p>

<pre><code># vgdisplay
--- Volume group ---
VG Name               rhel
System ID
Format                lvm2
Metadata Areas        2
Metadata Sequence No  5
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                2
Open LV               1
Max PV                0
Cur PV                2
Act PV                2
VG Size               556.79 GiB
PE Size               4.00 MiB
Total PE              142539
Alloc PE / Size       130243 / 508.76 GiB
Free  PE / Size       12296 / 48.03 GiB
VG UUID               1KHMUX-rlrd-Pypj-ucQZ-zPwA-TZd2-5oeHzv

# vgextend rhel /dev/sda5
</code></pre>

<p>扩容卷组之后，对根分区逻辑卷进行扩容</p>

<pre><code># lvextend -L +500G /dev/mapper/rhel-root

[root@bms-slave-0001 ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root  508G  6.5G  502G   2% /
devtmpfs               126G     0  126G   0% /dev
tmpfs                  126G     0  126G   0% /dev/shm
tmpfs                  126G   19M  126G   1% /run
tmpfs                  126G     0  126G   0% /sys/fs/cgroup
</code></pre>

<p>卷扩容之后，需要用re-size对文件系统进行扩容</p>

<pre><code># resize2fs /dev/mapper/rhel-root
</code></pre>

<p>如果在centos/redhat上的话，可以用如下命令进行扩容</p>

<pre><code># xfs_growfs /dev/mapper/rhel-root
</code></pre>

<h2>扩容非Lininx LVM格式的分区</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Octopress on Windows]]></title>
    <link href="http://iskey.github.io/blog/2019/07/07/install-octopress-on-windows/"/>
    <updated>2019-07-07T00:45:05+00:00</updated>
    <id>http://iskey.github.io/blog/2019/07/07/install-octopress-on-windows</id>
    <content type="html"><![CDATA[<p>最近在windows上安装了octopress（在linux的步骤差不多），简单记录一下，防止以后自己忘了</p>

<h2>安装git</h2>

<p>因为我们需要用github来存放我们生成的pages</p>

<h2>安装ruby</h2>

<ul>
<li>下载安装包</li>
</ul>


<p>这里要注意一下octopress要求的ruby版本，我自己fork的octpress分支的readme.markdown里有如下字样</p>

<pre><code>Note: Octopress requires a minimum Ruby version of 1.9.3-p0
</code></pre>

<p>到ruby的官方网站下载最接近的ruby版本就可以了，<a href="https://rubyinstaller.org/downloads/">Ruby</a>,
我选用的是<a href="https://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.6-x64.exe">Ruby 2.2.6(x64)</a>.</p>

<p>对应的Developmenet Kit是<a href="DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe</a>
(<code>注:Developmenet Kit是Ruby的开发工具集，安装octopress过程中，有些库需要编译</code>)</p>

<ul>
<li><p>安装Ruby（运行安装包，把Ruby安装到<code>D:/Ruby23-64</code>目录）</p></li>
<li><p>安装DevKit</p></li>
</ul>


<p>解压安装包到<code>D:/DevKit</code>，命令行进到<code>D:/DevKit</code>目录，执行</p>

<pre><code>ruby dk.rb init
</code></pre>

<p>执行完成后，打开<code>D:/DevKit</code>目录下的<code>config.yml</code>,查看里边有没有<code>- D:\Ruby23-64</code>字样，如果没有需要手动加上，继续执行命令</p>

<pre><code>ruby dk.rb install
</code></pre>

<p>另外记得把ruby的bin目录添加到系统环境变量</p>

<h3>安装Python</h3>

<p>安装Python2.7,不要用Python3</p>

<h3>安装octopress</h3>

<ul>
<li>下载octopress，我这里用自己的fork的repo，<a href="https://github.com/iskey/iskey.github.io">My octopres</a></li>
</ul>


<p>新建一个目录，<code>D:/octopress</code>,在该目录下用git</p>

<pre><code>git clone https://github.com/iskey/iskey.github.io
</code></pre>

<p>切换到<code>D:/octopress</code>，然后执行如下命令，切换一下gem的源（国内访问国外的源比较慢）</p>

<pre><code>gem sources -a https://ruby.taobao.org/
gem sources -r http://rubygems.org/
gem sources -l
</code></pre>

<p>然后，执行如下命令，安装gem库</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>安装Octopress主题</p>

<pre><code>rake install
</code></pre>

<h2>octopress使用</h2>

<ul>
<li><p>编写新文章</p>

<p>  rake new_post</p></li>
</ul>


<p>根据提示输入标题，或者直接使用如下命令</p>

<pre><code>rake new_post['welcome']
</code></pre>

<ul>
<li>发布、预览</li>
</ul>


<p>运行命令，设置github的pages地址</p>

<pre><code>rake setup_Github_pages 
</code></pre>

<p>发布文章到Github</p>

<pre><code>rake generate 
rake deploy
</code></pre>

<p>本地预览</p>

<pre><code>rake preview
</code></pre>
]]></content>
  </entry>
  
</feed>
