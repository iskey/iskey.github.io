"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8630:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const i={date:new Date("2016-04-22T20:36:00.000Z"),title:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",categories:"tool",tags:["serial"]},a=void 0,c={unversionedId:"Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",id:"Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",title:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",description:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",source:"@site/docs/Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3.md",sourceDirName:"Linux/System",slug:"/Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",permalink:"/Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",draft:!1,editUrl:"https://github.com/iskey/docusaurus-2/tree/main/packages/create-docusaurus/templates/shared/docs/Linux/System/\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3.md",tags:[{label:"serial",permalink:"/tags/serial"}],version:"current",frontMatter:{date:"2016-04-22T20:36:00.000Z",title:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",categories:"tool",tags:["serial"]},sidebar:"tutorialSidebar",previous:{title:"\u8bc1\u4e66\u7b80\u4ecb",permalink:"/Linux/System/\u8bc1\u4e66\u7b80\u4ecb"},next:{title:"Clang format",permalink:"/Linux/Tools/Clang format"}},l={},s=[{value:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",id:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3",level:2}],u={toc:s};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3"},"\u8c03\u8bd5\u4e32\u53e3\u8f6c\u5e94\u7528\u4e32\u53e3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#include "stdio.h"\n#include "sys/ioctl.h"\n#include "fcntl.h"\n\n#include "termios.h"\n#include "unistd.h"\n\n#define ECHOFLAGS (ECHO | ECHOE | ECHOK | ECHONL)\n\nint main()\n{\n    int fd;\n    int ret;\n    char buf[100];\n    struct termios term;\n    \n    fd= open("/dev/pts/0",O_RDONLY);\n    if(fd<=0){\n        printf("Error. open /dev/pts/0.\\n");\n        goto err;\n    }\n    ioctl(fd, TIOCCONS);\n    close(fd);\n\n    fd= open("/dev/ttyS0",O_RDONLY);\n    if(fd<=0){\n    fd= open("/dev/ttyS0",O_RDONLY);\n    if(fd<=0){\n        printf("Error. open /dev/console.\\n");\n        goto err;\n    }\n\n    ret= tcgetattr(fd, &term);\n    if(-1== ret){\n        printf("tcgetattr error.\\n");\n        goto err;\n    }\n    cfmakeraw(&term);\n    term.c_lflag&= ~ECHOFLAGS;\n    tcsetattr(fd, TCSAFLUSH, &term);\n    tcsetattr(fd, TCSANOW, &term);\n    if(-1== ret){\n        printf("tcsetattr error.\\n");\n        goto err;\n    }\n\n    ret= read(fd, buf, 1);\n    if(ret== -1){\n        perror("read error.\\n");    \n        goto err;\n    }\n    \n    while(*buf!=\'\\n\')\n    {\n        ret= read(fd, buf, 1);\n        if(ret== -1){\n            perror("read error1.\\n");\n            goto err;\n        }\n        printf("%02x\\n",*buf);\n    }\n    ioctl(fd, TIOCCONS);\n    close(fd);\n\n    return 0;\nerr:\n    return -1;\n}\n')))}f.isMDXComponent=!0}}]);