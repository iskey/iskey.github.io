"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1908],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},l=Object.keys(e);for(s=0;s<l.length;s++)t=l[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)t=l[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),u=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return s.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=u(t),b=r,h=m["".concat(i,".").concat(b)]||m[b]||c[b]||l;return t?s.createElement(h,o(o({ref:n},p),{},{components:t})):s.createElement(h,o({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var s=t(7462),r=(t(7294),t(3905));const l={date:new Date("2020-02-02T08:00:00.000Z"),title:"\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",categories:"ansible",tags:["ansible"]},o="\u5229\u7528ansible\u3001stress-ng\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",a={unversionedId:"Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",id:"Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",title:"\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",description:"\u538b\u6d4b\u5229\u5668-stress-ng",source:"@site/docs/Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5.md",sourceDirName:"Linux/Tools",slug:"/Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",permalink:"/Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",draft:!1,editUrl:"https://github.com/iskey/iskey.github.io/tree/main/docs/Linux/Tools/\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5.md",tags:[{label:"ansible",permalink:"/tags/ansible"}],version:"current",lastUpdatedAt:1706770637,formattedLastUpdatedAt:"Feb 1, 2024",frontMatter:{date:"2020-02-02T08:00:00.000Z",title:"\u5229\u7528Ansible\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5",categories:"ansible",tags:["ansible"]},sidebar:"tutorialSidebar",previous:{title:"\u5185\u6838\u4f7f\u7528ftrace",permalink:"/Linux/Tools/\u5185\u6838\u4f7f\u7528ftrace"},next:{title:"\u5982\u4f55\u4fee\u6539\u8fd0\u884c\u7a0b\u5e8f\u7684\u73af\u5883\u53d8\u91cf",permalink:"/Linux/Tools/\u5982\u4f55\u4fee\u6539\u8fd0\u884c\u7a0b\u5e8f\u7684\u73af\u5883\u53d8\u91cf"}},i={},u=[{value:"\u538b\u6d4b\u5229\u5668-stress-ng",id:"\u538b\u6d4b\u5229\u5668-stress-ng",level:2},{value:"\u6700\u7b80\u5355\u7684\u8fd0\u7ef4\u5de5\u5177-ansible",id:"\u6700\u7b80\u5355\u7684\u8fd0\u7ef4\u5de5\u5177-ansible",level:2},{value:"\u5982\u4f55\u7ba1\u7406\u538b\u6d4b\u8fdb\u7a0b-\u7ed9\u538b\u6d4b\u8fdb\u7a0b\u627e\u4e2a\u7239",id:"\u5982\u4f55\u7ba1\u7406\u538b\u6d4b\u8fdb\u7a0b-\u7ed9\u538b\u6d4b\u8fdb\u7a0b\u627e\u4e2a\u7239",level:2},{value:"\u8d1f\u8f7d\u573a\u666f\u5267\u672c\u8bbe\u8ba1-playbook",id:"\u8d1f\u8f7d\u573a\u666f\u5267\u672c\u8bbe\u8ba1-playbook",level:2},{value:"\u81ea\u52a8\u91cd\u8bd5-ansile\u7ecf\u5e38\u4e0d\u9760\u8c31",id:"\u81ea\u52a8\u91cd\u8bd5-ansile\u7ecf\u5e38\u4e0d\u9760\u8c31",level:2}],p={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5229\u7528ansiblestress-ng\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5"},"\u5229\u7528ansible\u3001stress-ng\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5"),(0,r.kt)("h2",{id:"\u538b\u6d4b\u5229\u5668-stress-ng"},"\u538b\u6d4b\u5229\u5668-stress-ng"),(0,r.kt)("p",null,"stress-ng\u662fstress\u7684\u52a0\u5f3a\u7248\uff0c\u5b8c\u5168\u517c\u5bb9stress\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u51e0\u767e\u4e2a\u53c2\u6570\uff0c\u582a\u79f0\u538b\u6d4b\u5de5\u5177\u4e2d\u7684\u745e\u58eb\u519b\u5200\u3002"),(0,r.kt)("p",null,"\u8fd9\u91cc\u5217\u4e3e\u51e0\u4e2a\u6837\u4f8b\u573a\u666f\uff1a"),(0,r.kt)("p",null,"CPU\u5bc6\u96c6\u578b\u573a\u666f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"stress-ng --cpu 6 --timeout 300\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u4f1a\u5c3d\u91cf\u5360\u6ee16\u4e2aCPU\u6838"),(0,r.kt)("p",null,"IO\u5bc6\u96c6\u578b\u573a\u666f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"stress-ng  -i 6 --hdd 1 --timeout 300\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u4f1a\u5f00\u542f1\u4e2aworker\u4e0d\u505c\u7684\u8bfb\u5199\u4e34\u65f6\u6587\u4ef6\uff0c\u540c\u65f6\u542f\u52a86\u4e2aworkers\u4e0d\u505c\u7684\u8c03\u7528sync\u7cfb\u7edf\u8c03\u7528\u63d0\u4ea4\u7f13\u5b58\uff0c"),(0,r.kt)("p",null,"\u8fdb\u7a0b\u5bc6\u96c6\u578b\u573a\u666f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(( proc_cnt = `nproc`*10 )); stress-ng --cpu $proc_cnt --pthread 1 timeout 300\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u4f1a\u542f\u52a8N*10\u4e2a\u8fdb\u7a0b\uff0c\u5728\u53ea\u6709N\u4e2a\u6838\u7684\u7cfb\u7edf\u4e0a\uff0c\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u8fdb\u7a0b\u5207\u6362\uff0c\u6a21\u62df\u8fdb\u7a0b\u95f4\u7ade\u4e89CPU\u7684\u573a\u666f"),(0,r.kt)("p",null,"\u7ebf\u7a0b\u5bc6\u96c6\u578b\u573a\u666f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"stress-ng --cpu `nproc` --pthread 1024 timeout 300\n")),(0,r.kt)("p",null,"\u8be5\u547d\u4ee4\u4f1a\u5728N\u4e2aCPU\u6838\u7684\u7cfb\u7edf\u4e0a\uff0c\u4ea7\u751fN\u4e2a\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b1024\u4e2a\u7ebf\u7a0b\uff0c\u6a21\u62df\u7ebf\u7a0b\u95f4\u7ade\u4e89CPU\u7684\u573a\u666f"),(0,r.kt)("p",null,"\u5176\u5b83\u5e38\u7528\u6837\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"        stress-ng --vm 8 --vm-bytes 80% -t 1h\n\n              run 8 virtual memory stressors that combined use 80% of the available memory for  1\n              hour. Thus each stressor uses 10% of the available memory.\n\n       stress-ng --cpu 4 --io 2 --vm 1 --vm-bytes 1G --timeout 60s\n\n              runs  for  60  seconds with 4 cpu stressors, 2 io stressors and 1 vm stressor using\n              1GB of virtual memory.\n\n       stress-ng --iomix 2 --iomix-bytes 10% -t 10m\n\n              runs 2 instances of the mixed I/O stressors using a total of 10% of  the  available\n              file  system  space for 10 minutes. Each stressor will use 5% of the available file\n              system space.\n\n       stress-ng  --cyclic  1  --cyclic-dist  2500  --cyclic-method  clock_ns  --cyclic-prio  100\n       --cyclic-sleep 10000 --hdd 0 -t 1m\n\n              measures  real time scheduling latencies created by the hdd stressor. This uses the\n              high resolution nanosecond clock to  measure  latencies  during  sleeps  of  10,000\n              nanoseconds.  At  the  end  of 1 minute of stressing, the latency distribution with\n              2500 ns intervals will be displayed.  NOTE:  this  must  be  run  with  super  user\n              privileges to enable the real time scheduling to get accurate measurements.\n\n       stress-ng --cpu 8 --cpu-ops 800000\n\n              runs 8 cpu stressors and stops after 800000 bogo operations.\n\n       stress-ng --sequential 2 --timeout 2m --metrics\n\n              run 2 simultaneous instances of all the stressors sequentially one by one, each for\n              2 minutes and summarise with performance metrics at the end.\n\n       stress-ng --cpu 4 --cpu-method fft --cpu-ops 10000 --metrics-brief\n\n              run 4 FFT cpu stressors, stop after 10000 bogo operations  and  produce  a  summary\n              just for the FFT results.\n\n       stress-ng --cpu 0 --cpu-method all -t 1h\n\n              run  cpu  stressors  on  all  online  CPUs  working  through  all the available CPU\n              stressors for 1 hour.\n\n       stress-ng --all 4 --timeout 5m\n\n              run 4 instances of all the stressors for 5 minutes.\n\n       stress-ng --random 64\n\n              run 64 stressors that are randomly chosen from all the available stressors.\n\n       stress-ng --cpu 64 --cpu-method all --verify -t 10m --metrics-brief\n\n              run  64  instances  of  all  the  different  cpu  stressors  and  verify  that  the\n              computations are correct for 10 minutes with a bogo operations summary at the end.\n\n       stress-ng --sequential 0 -t 10m\n\n              run  all  the  stressors one by one for 10 minutes, with the number of instances of\n              each stressor matching the number of online CPUs.\n\n       stress-ng --sequential 8 --class io -t 5m --times\n\n              run all the stressors in the io class one  by  one  for  5  minutes  each,  with  8\n              instances  of  each stressor running concurrently and show overall time utilisation\n              statistics at the end of the run.\n\n       stress-ng --all 0 --maximize --aggressive\n\n              run all the stressors (1 instance of each per  CPU)  simultaneously,  maximize  the\n              settings   (memory   sizes,   file   allocations,   etc.)   and   select  the  most\n              demanding/aggressive options.\n\n       stress-ng --random 32 -x numa,hdd,key\n\n              run 32 randomly selected stressors and exclude the numa, hdd and key stressors\n\n       stress-ng --sequential 4 --class vm --exclude bigheap,brk,stack\n\n              run 4 instances of the VM stressors one after each other,  excluding  the  bigheap,\n              brk and stack stressors\n\n       stress-ng --taskset 0,2-3 --cpu 3\n\n              run 3 instances of the CPU stressor and pin them to CPUs 0, 2 and 3.\n\n")),(0,r.kt)("h2",{id:"\u6700\u7b80\u5355\u7684\u8fd0\u7ef4\u5de5\u5177-ansible"},"\u6700\u7b80\u5355\u7684\u8fd0\u7ef4\u5de5\u5177-ansible"),(0,r.kt)("p",null,"\u5728\u5c0f\u89c4\u6a21\u7684\u673a\u5668\u4e0a\u6267\u884c\u547d\u4ee4\uff0c\u6700\u7b80\u5355\u975eansible\u83ab\u5c5e\uff0c\u56e0\u4e3aansible\u9ed8\u8ba4\u662f\u4e0d\u9700\u8981\u5728\u5f85\u8fd0\u7ef4\u7684\u673a\u5668\u4e0a\u5b89\u88c5\u989d\u5916\u7684\u670d\u52a1\uff0c\n\u53ea\u8981\u5f00\u542f\u4e86ssh\u670d\u52a1\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,r.kt)("p",null,"\u4e00\u4e2a\u7b80\u5355\u7684ansible\u4f7f\u7528\u6837\u4f8b\uff0c",(0,r.kt)("a",{parentName:"p",href:"https://iskey.github.io/blog/2019/07/07/simple-example-of-ansible/"},"simple-example-of-ansible")),(0,r.kt)("h2",{id:"\u5982\u4f55\u7ba1\u7406\u538b\u6d4b\u8fdb\u7a0b-\u7ed9\u538b\u6d4b\u8fdb\u7a0b\u627e\u4e2a\u7239"},"\u5982\u4f55\u7ba1\u7406\u538b\u6d4b\u8fdb\u7a0b-\u7ed9\u538b\u6d4b\u8fdb\u7a0b\u627e\u4e2a\u7239"),(0,r.kt)("p",null,"\u4f7f\u7528ansible\u8fdb\u884c\u52a0\u538b\u65f6\uff0c\u5982\u679c\u6267\u884cstress-ng\u547d\u4ee4\uff0c\u7136\u540e\u9a6c\u4e0a\u9000\u51fa\uff0c\u538b\u6d4b\u5de5\u5177\u8fdb\u7a0b\u4e5f\u5c31\u88ab\u6740\u6b7b\u4e86\uff0c\u8fd9\u662f\u56e0\u4e3a\u538b\u6d4b\u5de5\u5177\u9ed8\u8ba4\u7684\u7236\u8fdb\u7a0b\u662fansible\u7684ssh\u4f1a\u8bdd\n\u8fd9\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528nohup\u3001setsid\u547d\u4ee4\u8ba9stress-ng\u547d\u4ee4\u540e\u53f0\u6267\u884c\u3002\n\u5728\u7a0d\u5fae\u590d\u6742\u7684\u573a\u666f\u6a21\u62df\u65f6\uff0cstress-ng\u53ef\u80fd\u4f1a\u542f\u52a8\u5f88\u591a\u7684\u8fdb\u7a0b\uff0c\u5e76\u4e14\u6709\u4e9b\u65f6\u5019\u4e0d\u4ec5\u6709stress-ng\uff0c\u800c\u4e14\u53ef\u80fd\u8fd8\u9700\u8981sys-bench\u7b49\u5de5\u5177\uff0c\n\u5f53\u9700\u8981\u8c03\u6574\u538b\u529b\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u6740\u6389\u4e4b\u524d\u7684\u538b\u6d4b\u8fdb\u7a0b\uff0c\u518d\u542f\u52a8\u65b0\u7684\u538b\u6d4b\uff0c\u5982\u679c\u4e00\u4e2a\u4e00\u4e2a\u7684\u627e\u51fa\u6765\u5e76\u6740\u6389\u8fdb\u7a0b\uff0c\u4e0d\u4ec5\u64cd\u4f5c\u590d\u6742\u800c\u4e14\u7ecf\u5e38\n\u4f1a\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b\u3002"),(0,r.kt)("p",null,"\u8fd9\u65f6\u5019\u5c31\u9700\u8981screen\u3001tmux\u8fd9\u6837\u7684\u4f1a\u8bdd\u7ba1\u7406\u5de5\u5177\u4e86\uff0c\u901a\u8fc7screen\u6765\u7edf\u4e00\u7ba1\u7406\u4f1a\u8bdd\uff0c\u6240\u6709\u7684\u538b\u6d4b\u8fdb\u7a0b\u90fd\u88ab\u6258\u7ba1\u5728screen\u91cc\uff0c\u8fd9\u6837\u5982\u679c\u9700\u8981\n\u5173\u6389\u6240\u6709\u7684\u538b\u529b\u65f6\uff0c\u53ea\u9700\u8981\u6740\u6389screen\u8fdb\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,r.kt)("p",null,"\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"screen -S stress -d -m stress-ng -c 1 --timeout 300\n")),(0,r.kt)("h2",{id:"\u8d1f\u8f7d\u573a\u666f\u5267\u672c\u8bbe\u8ba1-playbook"},"\u8d1f\u8f7d\u573a\u666f\u5267\u672c\u8bbe\u8ba1-playbook"),(0,r.kt)("p",null,"\u5728\u4e91\u8ba1\u7b97\u573a\u666f\u4e0b\uff0c\u7ecf\u5e38\u4f1a\u9700\u8981\u7528\u538b\u6d4b\u5de5\u5177\u6765\u6a21\u62df\u4e00\u4e9b\u4e1a\u52a1\u573a\u666f\uff0cstress-ng\u662f\u6700\u5e38\u7528\u5230\u7684\u5de5\u5177\u4e4b\u4e00\uff0c\u901a\u5e38ansible+stress-ng\u5c31\u80fd\u5e94\u4ed8\u7edd\u5927\u591a\u6570\u7684\u538b\u6d4b\u573a\u666f\u3002\n\u5982\u679c\u9700\u8981\u6a21\u62df\u7684CPU\u3001MEM\u3001\u78c1\u76d8IO\u6a21\u578b\u6bd4\u8f83\u591a\uff0c\u7528\u547d\u4ee4\u884c\u5c31\u663e\u5f97\u4e0d\u662f\u90a3\u4e48\u65b9\u4fbf\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u7528playbook\u3002"),(0,r.kt)("p",null,"github\u4e0a\u5df2\u7ecf\u6709\u4eba\u5199\u597d\u4e86\u4e00\u4e2aplaybook\uff0c",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CSCfi/ansible-role-stress"},"ansible-role-stress"),"\u3002"),(0,r.kt)("p",null,"\u9879\u76ee\u5df2\u7ecf\u5728CenstOS 7\u4e0a\u6d4b\u8bd5\u8fc7\u4e86\uff0c\u5728Ubuntu\u4e0a\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u7684\u3002"),(0,r.kt)("p",null,"playbook\u652f\u6301\u5982\u4e0b\u89d2\u8272\u53d8\u91cf\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"test_duration: stress-ng \u8d85\u65f6\u65f6\u95f4"),(0,r.kt)("li",{parentName:"ul"},"\u4e0d\u540c\u7c7b\u578b\u538b\u6d4b\u8d44\u6e90\u7684worker\u6570\u91cf:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"cpu_workers"),(0,r.kt)("li",{parentName:"ul"},"vm_workers"),(0,r.kt)("li",{parentName:"ul"},"hdd_workers"))),(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u4e2aworker\u7684\u78c1\u76d8\u6216\u5185\u5b58\u4f7f\u7528\u91cf",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"bytes_per_hdd_worker"),(0,r.kt)("li",{parentName:"ul"},"bytes_per_vm_worker")))),(0,r.kt)("h2",{id:"\u81ea\u52a8\u91cd\u8bd5-ansile\u7ecf\u5e38\u4e0d\u9760\u8c31"},"\u81ea\u52a8\u91cd\u8bd5-ansile\u7ecf\u5e38\u4e0d\u9760\u8c31"),(0,r.kt)("p",null,"\u4f7f\u7528playbook\u64cd\u4f5c\u5927\u91cf\u673a\u5668\u65f6\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u673a\u5668\u6267\u884c\u547d\u4ee4\u5931\u8d25\uff0c\u6bd4\u5982\u7f51\u7edc\u4e0d\u901a\u3001\u7f51\u7edc\u95ea\u65ad\u7b49\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5bf9\u5931\u8d25\u7684\u673a\u5668\u91cd\u65b0\u6267\u884c\u547d\u4ee4\uff0cplaybook\u53ef\u4ee5\u5982\u4e0b\u547d\u4ee4\u8fdb\u884c\u91cd\u8bd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'ansible-playbook -i host stress.yml --extra-vars "host=all" --limit @$playbook_retry\n')),(0,r.kt)("p",null,"\u5176\u4e2dplaybook_retry\u6587\u4ef6\u91cc\u4fdd\u5b58\u7684\u662f\u9700\u8981\u91cd\u8bd5\u7684IP\u5217\u8868,\u53ef\u4ee5\u4ece\u6267\u884c\u56de\u663e\u4e2d\u5206\u6790\u6267\u884c\u7ed3\u679c\uff0c\u901a\u8fc7awk\u627e\u51fa\u6267\u884c\u5931\u8d25\n\u7684IP\u5217\u8868\uff0c\u901a\u8fc7ansible-playbook\u8fdb\u884c\u91cd\u8bd5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n\nhosts=(\n"host1" \n"host2" \n"host3"\n)\n\ncpu_load=(15 15 15 15 15 15)\nmem_load=(5 5 5 5 5 5)\n\nmkdir -p tmp\n\nhost_file="./hosts"\n\ntotal_result="./tmp/total_result.log"\nplaybook_result="./tmp/playbook_result.log"\nplaybook_retry="./tmp/playbook_retry.txt"\n\necho "" > $total_result\n\nparse_playbook_result()\n{\n    sed \'1,/PLAY RECAP/d\' $playbook_result | awk -F" *|=|\\t" \'\n    /unreachable/{\n    ip=$1\n    ok_cnt=$4\n    changed_cnt=$6\n    unreachable_cnt=$8\n    failed_cnt=$10\n    if(unreachable_cnt!=0 || failed_cnt!=0 || rescued_cnt!=0){\n        print ip\n    }\n    }\' > $playbook_retry\n}\n\nansible_playbook()\n{\n    echo "playbook Vars: $2"\n    ansible-playbook -i $host_file $1 --extra-vars "$2" >$playbook_result 2>&1\n\n    cat $playbook_result > $total_result\n    \n    while true\n    do\n        parse_playbook_result\n        RETRY_CNT=$(wc -l $playbook_retry | awk \'{print $1}\')\n        \n        if [[ $RETRY_CNT != 0 ]]; then\n            echo "Some host will retry:"\n            cat $playbook_retry\n            ansible-playbook -i $host_file stress_stop.yml --extra-vars "$2" --limit @$playbook_retry >/dev/null 2>&1\n            ansible-playbook -i $host_file $1 --extra-vars "$2" --limit @$playbook_retry >$playbook_result 2>&1\n            cat $playbook_result > $total_result\n        else\n            return\n        fi\n    done\n}\n\nfor(( i=0; i<${#hosts[@]}; i++ ))\ndo\n  echo "Stress" ${hosts[i]}\n  ansible_playbook "stress_start.yml" "host=${hosts[i]} cpu_load=${cpu_load[i]} mem_load=${mem_load[i]}"\ndone\n\n\necho "Over zzz"\n\n')))}c.isMDXComponent=!0}}]);