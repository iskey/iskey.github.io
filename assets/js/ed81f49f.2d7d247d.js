"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6592],{3905:(e,n,r)=>{r.d(n,{Zo:()=>o,kt:()=>d});var t=r(7294);function l(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function _(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function u(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?_(Object(r),!0).forEach((function(n){l(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,l=function(e,n){if(null==e)return{};var r,t,l={},_=Object.keys(e);for(t=0;t<_.length;t++)r=_[t],n.indexOf(r)>=0||(l[r]=e[r]);return l}(e,n);if(Object.getOwnPropertySymbols){var _=Object.getOwnPropertySymbols(e);for(t=0;t<_.length;t++)r=_[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var a=t.createContext({}),p=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):u(u({},n),e)),r},o=function(e){var n=p(e.components);return t.createElement(a.Provider,{value:n},e.children)},i={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var r=e.components,l=e.mdxType,_=e.originalType,a=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),s=p(r),d=l,$=s["".concat(a,".").concat(d)]||s[d]||i[d]||_;return r?t.createElement($,u(u({ref:n},o),{},{components:r})):t.createElement($,u({ref:n},o))}));function d(e,n){var r=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var _=r.length,u=new Array(_);u[0]=s;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:l,u[1]=c;for(var p=2;p<_;p++)u[p]=r[p];return t.createElement.apply(null,u)}return t.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6959:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>u,default:()=>i,frontMatter:()=>_,metadata:()=>c,toc:()=>p});var t=r(7462),l=(r(7294),r(3905));const _={title:"Shell\u83b7\u53d6CPU\u5229\u7528\u7387",date:"2018-05-05 22:11:45 +0800",comments:!0,categories:"shell",tags:["cpu"]},u="Shell\u83b7\u53d6CPU\u5229\u7528\u7387",c={unversionedId:"Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387",id:"Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387",title:"Shell\u83b7\u53d6CPU\u5229\u7528\u7387",description:"\u901a\u8fc7shell\u83b7\u53d6\u6bcf\u4e2aCPU\u6838\u7684CPU\u4f7f\u7528\u7387\uff0c\u5e76\u653e\u5230gpercpu_usage\u6570\u7ec4\u4e2d\uff0c\u901a\u8fc7sort\u5bf9\u8be5\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u53d6TOP 3\u53d6\u5e73\u5747\u7b97\u7684\u6574\u673a\u7684CPU\u4f7f\u7528\u7387\u3002",source:"@site/docs/Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387.md",sourceDirName:"Linux/Tools",slug:"/Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387",permalink:"/Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387",draft:!1,editUrl:"https://github.com/iskey/iskey.github.io/tree/main/docs/Linux/Tools/Shell\u83b7\u53d6CPU\u5229\u7528\u7387.md",tags:[{label:"cpu",permalink:"/tags/cpu"}],version:"current",lastUpdatedAt:1706606093,formattedLastUpdatedAt:"Jan 30, 2024",frontMatter:{title:"Shell\u83b7\u53d6CPU\u5229\u7528\u7387",date:"2018-05-05 22:11:45 +0800",comments:!0,categories:"shell",tags:["cpu"]},sidebar:"tutorialSidebar",previous:{title:"Shell\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c",permalink:"/Linux/Tools/Shell\u6587\u4ef6\u63cf\u8ff0\u7b26"},next:{title:"Linux shell IO\u91cd\u5b9a\u5411",permalink:"/Linux/Tools/linux shell IO\u91cd\u5b9a\u5411"}},a={},p=[{value:"/proc/stat",id:"procstat",level:2}],o={toc:p};function i(e){let{components:n,...r}=e;return(0,l.kt)("wrapper",(0,t.Z)({},o,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"shell\u83b7\u53d6cpu\u5229\u7528\u7387"},"Shell\u83b7\u53d6CPU\u5229\u7528\u7387"),(0,l.kt)("p",null,"\u901a\u8fc7shell\u83b7\u53d6\u6bcf\u4e2aCPU\u6838\u7684CPU\u4f7f\u7528\u7387\uff0c\u5e76\u653e\u5230",(0,l.kt)("inlineCode",{parentName:"p"},"g_per_cpu_usage"),"\u6570\u7ec4\u4e2d\uff0c\u901a\u8fc7sort\u5bf9\u8be5\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u53d6TOP 3\u53d6\u5e73\u5747\u7b97\u7684\u6574\u673a\u7684CPU\u4f7f\u7528\u7387\u3002"),(0,l.kt)("h2",{id:"procstat"},"/proc/stat"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\n#!/bin/sh\n\nset -e\nset -o functrace\nfunction handle_error {\n    local retval=$?\n    local line=${last_lineno:-$1}\n    echo "Failed at $line: $BASH_COMMAND"\n    echo "Trace: " "$@"\n    exit $retval\n}\n\n#CPU core number\ng_cpu_num=$(nproc)\ng_cpu_num=$(($g_cpu_num - 1))\n\n#\u521d\u59cb\u5316\u6bcf\u4e2aCPU\u6838\u7684\u4e0a\u4e00\u6b21\u65f6\u95f4\nfor per_cpu in `seq 0 $g_cpu_num`\ndo\n    g_last_cpu_total[$per_cpu]=0\n    g_last_cpu_idle[$per_cpu]=0\ndone\n\n#\u66f4\u65b0\u6bcfCPU\u6838\u4f7f\u7528\u7387\u7684\u51fd\u6570\uff0c\u66f4\u65b0\u540e\u7684\u6bcfCPU\u6838\u4f7f\u7528\u7387\uff0c\n#@ g_per_cpu_usage: \u6bcfCPU\u4f7f\u7528\u7387\n#@ g_vm_cpu_usage\uff1a\u6839\u636eTOP 3\u53d6\u5e73\u5747\u7b97\u7684CPU\u4f7f\u7528\u7387\nfunction update_all_cpu_usage()\n{\n    #all cpu core stat\n    local l_all_cpu_str=`sed -n \'s#^cpu[^ \\t]\\{1,\\} \\(.*\\)$#\\1#gp\' /proc/stat`\n    local l_pcu_array=($l_all_cpu_str)\n\n    for per_cpu in `seq 0 $g_cpu_num`\n    do\n        cur_index=$((10 * ${per_cpu}))\n        #echo "----------" $cur_index\n        local l_cur_cpu_total=$(( ${l_pcu_array[${cur_index}+0]} + ${l_pcu_array[${cur_index}+1]} + ${l_pcu_array[${cur_index}+2]} \\\n                    + ${l_pcu_array[${cur_index}+3]} + ${l_pcu_array[${cur_index}+4]} + ${l_pcu_array[${cur_index}+5]} \\\n                    + ${l_pcu_array[${cur_index}+6]} + ${l_pcu_array[${cur_index}+7]} + ${l_pcu_array[${cur_index}+8]} + ${l_pcu_array[${cur_index}+9]} ))\n        #echo "$l_cur_cpu_total"\n        l_cur_cpu_idle=${l_pcu_array[${cur_index}+3]}\n        g_per_cpu_usage[$per_cpu]=$(( 100 - ( ${l_cur_cpu_idle} - ${g_last_cpu_idle[$per_cpu]} ) * 100 / ( ${l_cur_cpu_total} - ${g_last_cpu_total[$per_cpu]} + 1) ))\n        \n        g_last_cpu_total[$per_cpu]=$l_cur_cpu_total\n        g_last_cpu_idle[$per_cpu]=$l_cur_cpu_idle\n\n    done\n\n    printf \' %s \' "${g_per_cpu_usage[@]}"\n    printf \'\\n\'\n\n    #Sort CPU usages\n    local l_per_cpu_usage_sorted\n    ORG_IFS=$IFS\n    IFS=$\'\\n\' l_per_cpu_usage_sorted=($(sort -n -r <<<"${g_per_cpu_usage[*]}"))\n    IFS=$ORG_IFS\n\n    printf \' %s \' "${l_per_cpu_usage_sorted[@]}"\n    printf \'\\n\'\n\n    local l_vm_cpu_usage=$(( ${l_per_cpu_usage_sorted[0]} + ${l_per_cpu_usage_sorted[1]} + ${l_per_cpu_usage_sorted[2]} ))\n    \n    g_vm_cpu_usage=$(($l_vm_cpu_usage / 3))\n    echo "g_vm_cpu_usage=" $g_vm_cpu_usage\n\n    #Get Low load CPU array.\n    local l_low_cpu_usage=${l_per_cpu_usage_sorted[$g_iso_cpu_num+2]}\n    local l_low_cpu_index=0\n    local l_cpu_index=0\n    g_low_cpu_array=()\n    for i in ${g_per_cpu_usage[@]}\n    do\n        if [ $i -lt $l_low_cpu_usage ];then\n            l_low_cpu_index=$(($l_low_cpu_index+1))\n            g_low_cpu_array[$l_low_cpu_index]=$l_cpu_index\n        fi\n        l_cpu_index=$(($l_cpu_index+1))\n    done\n\n}\n  \ntrap \'handle_error $LINENO ${BASH_LINENO[@]}\' INT TERM EXIT ERR\nupdate_all_cpu_usage\ntrap - INT TERM EXIT\n\n')))}i.isMDXComponent=!0}}]);